# Promote an existing ledger suite release to latest.
#
# To enable clients to point to artifacts from the latest stable
# release of the ledger suite, e.g.,
# https://github.com/dfinity/ic/releases/download/ledger-suite-icrc-latest/ic-icrc1-ledger.wasm.gz
# this workflow creates a new release with the `-latest` suffix, as
# well as setting the corresponding git tag to point to the commit
# of the source release.
#
# Input:
#   release_tag: The tag of an existing release to promote, e.g., `ledger-suite-icrc-2025-08-20`.
name: Ledger Suite Promote Release to Latest

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to promote (e.g., ledger-suite-icrc-2025-08-20)'
        required: true
        type: string

jobs:
  promote-to-latest:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git tags and commits

      - name: Validate and parse release tag
        id: parse_release
        run: |
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          echo "Input release tag: $RELEASE_TAG"

          # Validate the release tag format
          if [[ ! "$RELEASE_TAG" =~ ^ledger-suite-(icrc|icp)-[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "❌ Invalid release tag format. Expected: ledger-suite-{icrc|icp}-YYYY-MM-DD"
            echo "❌ Received: $RELEASE_TAG"
            exit 1
          fi

          # Extract the ledger suite type
          if [[ "$RELEASE_TAG" =~ ^ledger-suite-icrc- ]]; then
            SUITE_TYPE="icrc"
          elif [[ "$RELEASE_TAG" =~ ^ledger-suite-icp- ]]; then
            SUITE_TYPE="icp"
          else
            echo "❌ Could not determine suite type from tag: $RELEASE_TAG"
            exit 1
          fi

          LATEST_TAG="ledger-suite-$SUITE_TYPE-latest"

          echo "✅ Parsed release information:"
          echo "  Source release: $RELEASE_TAG"
          echo "  Suite type: $SUITE_TYPE"
          echo "  Latest tag: $LATEST_TAG"

          echo "source_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "suite_type=$SUITE_TYPE" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check if source release exists
        id: check_source
        run: |
          SOURCE_TAG="${{ steps.parse_release.outputs.source_tag }}"
          echo "Checking if source release exists: $SOURCE_TAG"

          # Check if the git tag exists
          if git rev-parse --verify "$SOURCE_TAG" >/dev/null 2>&1; then
            echo "✅ Source tag exists: $SOURCE_TAG"

            # Get the commit SHA
            SOURCE_COMMIT_SHA=$(git rev-parse "$SOURCE_TAG^{commit}")
            echo "Commit SHA: $SOURCE_COMMIT_SHA"

            echo "source_commit_sha=$SOURCE_COMMIT_SHA" >> $GITHUB_OUTPUT
          else
            echo "❌ Source tag not found: $SOURCE_TAG"
            exit 1
          fi

      - name: Check for existing latest tag
        id: cleanup_latest
        run: |
          LATEST_TAG="${{ steps.parse_release.outputs.latest_tag }}"
          echo "Checking for existing latest tag: $LATEST_TAG"

          # Check if latest tag exists
          if git rev-parse --verify "$LATEST_TAG" >/dev/null 2>&1; then
            echo "Found existing latest tag: $LATEST_TAG"
            echo "had_existing=true" >> $GITHUB_OUTPUT
          else
            echo "No existing latest tag found for: $LATEST_TAG"
            echo "had_existing=false" >> $GITHUB_OUTPUT
          fi

      - name: Download source release assets
        run: |
          SOURCE_TAG="${{ steps.parse_release.outputs.source_tag }}"
          echo "Downloading assets from source release: $SOURCE_TAG"

          # Create download directory
          mkdir -p downloaded_assets
          cd downloaded_assets

          # Get release info via GitHub API
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$SOURCE_TAG")

          # Check if release was found
          if echo "$RELEASE_INFO" | grep -q '"message": "Not Found"'; then
            echo "❌ Release not found: $SOURCE_TAG"
            exit 1
          fi

          # Extract asset IDs and names for authenticated download
          echo "$RELEASE_INFO" | jq -r '.assets[] | "\(.name) \(.id)"' | while read -r name asset_id; do
            echo "Downloading: $name (asset ID: $asset_id)"

            # Use GitHub API to download asset with authentication (works for both public and private repos)
            if curl -L -f \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/octet-stream" \
              -o "$name" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"; then
              echo "✅ Downloaded: $name"
            else
              echo "❌ Failed to download: $name"
              exit 1
            fi
          done

          echo "Assets downloaded:"
          ls -la

          echo "DOWNLOAD_DIR=downloaded_assets" >> $GITHUB_ENV

      - name: Get source release info
        id: get_source
        run: |
          SOURCE_TAG="${{ steps.parse_release.outputs.source_tag }}"
          SOURCE_COMMIT_SHA="${{ steps.check_source.outputs.source_commit_sha }}"

          # Get release info via GitHub API
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$SOURCE_TAG")

          # Extract release body and URL
          echo "$RELEASE_INFO" | jq -r '.body' > source_release_body.txt
          SOURCE_RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')

          # Store values for later steps
          echo "source_commit_sha=$SOURCE_COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "source_release_url=$SOURCE_RELEASE_URL" >> $GITHUB_OUTPUT
          echo "source_tag_name=$SOURCE_TAG" >> $GITHUB_OUTPUT
          echo "source_release_body_file=source_release_body.txt" >> $GITHUB_OUTPUT

      - name: Check if latest tag exists
        id: latest_tag_check
        run: |
          echo "Checking if tag '${{ steps.parse_release.outputs.latest_tag }}' already exists..."
          if git rev-parse "${{ steps.parse_release.outputs.latest_tag }}" >/dev/null 2>&1; then
            echo "Found existing latest tag: ${{ steps.parse_release.outputs.latest_tag }}"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing latest tag found: ${{ steps.parse_release.outputs.latest_tag }}"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing latest tag
        if: steps.latest_tag_check.outputs.tag_exists == 'true'
        run: |
          LATEST_TAG="${{ steps.parse_release.outputs.latest_tag }}"

          echo "Deleting existing latest tag: $LATEST_TAG"

          # Delete local tag if it exists
          git tag -d "$LATEST_TAG" || echo "Local tag deletion failed (might not exist locally)"

          # Delete remote tag
          git push origin ":refs/tags/$LATEST_TAG" || echo "Remote tag deletion failed (might not exist remotely)"

          echo "Existing latest tag deleted"

      - name: Create latest tag
        run: |
          SOURCE_COMMIT="${{ steps.get_source.outputs.source_commit_sha }}"
          LATEST_TAG="${{ steps.parse_release.outputs.latest_tag }}"
          SOURCE_TAG="${{ steps.parse_release.outputs.source_tag }}"

          echo "Creating tag $LATEST_TAG at commit: $SOURCE_COMMIT"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Checkout the source commit
          git checkout "$SOURCE_COMMIT"

          # Create annotated tag
          git tag -a "$LATEST_TAG" -m "Latest release promoted from $SOURCE_TAG"
          git push origin "$LATEST_TAG"

          echo "Successfully created and pushed tag: $LATEST_TAG"

      - name: Create release body
        run: |
          LATEST_TAG="${{ steps.parse_release.outputs.latest_tag }}"
          SUITE_TYPE="${{ steps.parse_release.outputs.suite_type }}"
          SOURCE_TAG="${{ steps.get_source.outputs.source_tag_name }}"
          SOURCE_URL="${{ steps.get_source.outputs.source_release_url }}"

          # Start with the original release body
          cat "${{ steps.get_source.outputs.source_release_body_file }}" > latest_release_body.txt

          # Add promotion footer
          cat >> latest_release_body.txt << EOF

          ---

          **This is an automatically promoted copy of [$SOURCE_TAG]($SOURCE_URL)**

          This \`-latest\` release provides stable URLs for accessing the most recent ${SUITE_TYPE^^} ledger suite files. The content is identical to the source release but will be updated whenever a new ${SUITE_TYPE^^} release is promoted.
          EOF

      - name: Create latest release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.parse_release.outputs.latest_tag }}
          name: ${{ steps.parse_release.outputs.latest_tag }}
          body_path: latest_release_body.txt
          files: ${{ env.DOWNLOAD_DIR }}/*
          draft: false
          prerelease: false
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "Release Promotion Complete!"
          echo ""
          echo "Summary:"
          echo "  • Source release: ${{ steps.parse_release.outputs.source_tag }}"
          echo "  • Suite type: ${{ steps.parse_release.outputs.suite_type }}"
          echo "  • Latest tag: ${{ steps.parse_release.outputs.latest_tag }}"
          echo "  • Latest release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.parse_release.outputs.latest_tag }}"
          echo ""
          echo "Stable URLs now available:"
          echo "  • Base URL: https://github.com/${{ github.repository }}/releases/download/${{ steps.parse_release.outputs.latest_tag }}/"
