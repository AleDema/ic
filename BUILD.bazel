load("//bazel:defs.bzl", "gzip_compress")
load("//bazel:canisters.bzl", "optimized_canister")
load("//bazel:transitions.bzl", "opt_stripped_binary")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("//bazel:buildifier.bzl", "buildifier_test")

package(default_visibility = ["//visibility:public"])

exports_files([
    ".rclone.conf",
    "clippy.toml",
    "rustfmt.toml",
])

BUILDIFIER_EXCLUDES = [
    "./.git/*",
    "./gitlab-ci/src/git_changes/test_data/**",
]

buildifier(
    name = "buildifier",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "fix",
    mode = "fix",
)

# buildifier.check rule is used by buildifier_test
buildifier(
    name = "buildifier.check",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "warn",
    mode = "diff",
)

buildifier_test(
    name = "buildifier_test",
    tags = [
        "external",
        "local",
        "no-sandbox",
        "precommit",
        "small",
        "smoke",
    ],
)

test_suite(
    name = "precommit",
    tags = ["precommit"],
)

alias(
    name = "bazelifier",
    actual = "//rs/bazelifier",
)

alias(
    name = "rustfmt",
    actual = "@rules_rust//:rustfmt",
)

BINARIES = {
    "boundary-node-control-plane": "//rs/boundary_node/control_plane:boundary-node-control-plane",
    "boundary-node-prober": "//rs/boundary_node/prober:boundary-node-prober",
    "canister_sandbox": "//rs/canister_sandbox",
    "denylist-updater": "//rs/boundary_node/denylist_updater:denylist-updater",
    "e2e-test-driver": "//rs/scenario_tests:e2e-test-driver",
    "ic-admin": "//rs/registry/admin:ic-admin",
    "ic-balance-exporter": "//rs/boundary_node/ic_balance_exporter:ic-balance-exporter",
    "ic-btc-adapter": "//rs/bitcoin/adapter:ic-btc-adapter",
    "ic-canister-http-adapter": "//rs/canister_http/adapter:ic-canister-http-adapter",
    "ic-consensus-pool-util": "//rs/artifact_pool:ic-consensus-pool-util",
    "ic-crypto-csp": "//rs/crypto:ic-crypto-csp",
    "ic-nns-init": "//rs/nns/init:ic-nns-init",
    "ic-p8s-sd": "//rs/ic_p8s_service_discovery:ic-p8s-sd",
    "ic-prep": "//rs/prep:ic-prep",
    "ic-recovery": "//rs/recovery:ic-recovery",
    "ic-regedit": "//rs/registry/regedit:ic-regedit",
    "ic-registry-replicator": "//rs/orchestrator/registry_replicator:registry_replicator",
    "ic-rosetta-api": "//rs/rosetta-api:ic-rosetta-api",
    "ic-workload-generator": "//rs/workload_generator:ic-workload-generator",
    "orchestrator": "//rs/orchestrator",
    "prod-test-driver": "//rs/tests:prod-test-driver",
    "replica": "//rs/replica",
    "sandbox_launcher": "//rs/canister_sandbox/sandbox_launcher",
    "sns": "//rs/sns/cli:sns",
    "state-tool": "//rs/state_tool:state-tool",
    "system-tests": "//rs/tests:system-tests",
    "vsock_agent": "//rs/guestos_vsock_agent:vsock_agent",
}

[opt_stripped_binary(
    name = name,
    binary = BINARIES[name],
) for name in BINARIES]

filegroup(
    name = "binaries",
    srcs = [name for name in BINARIES],
)

sh_binary(
    # A unique name for this target.
    name = "collect_binaries",
    srcs = ["gitlab-ci/tools/copy-bins.sh"],
    data = [":binaries"],
    env = {"BINARIES": "$(rootpaths :binaries)"},
)

optimized_canister(
    name = "ledger_archive_canister",
    wasm = "//rs/rosetta-api/ledger_canister:ledger-archive-node-canister-wasm",
)

CANISTERS = {
    "cycles-minting-canister": "//rs/nns/cmc:cycles-minting-canister",
    "genesis-token-canister": "//rs/nns/gtc:genesis-token-canister",
    "governance-canister": "//rs/nns/governance:governance-canister",
    "ledger-canister": "//rs/rosetta-api/icrc1/ledger:ledger_canister",
    "nns-ui-canister": "//rs/nns/nns-ui:nns-ui-canister",
    "registry-canister": "//rs/registry/canister:registry-canister",
    "root-canister": "//rs/nns/handlers/root:root-canister",
    "sns-governance-canister": "//rs/sns/governance:sns-governance-canister",
    "sns-root-canister": "//rs/sns/root:sns-root-canister",
    "sns-swap-canister": "//rs/sns/swap:sns-swap-canister",
    "xnet-test-canister": "//rs/rust_canisters/xnet_test:xnet-test-canister",
}

[[
    optimized_canister(
        name = name,
        wasm = CANISTERS[name],
    ),
    gzip_compress(
        name = name + ".wasm.gz",
        srcs = [":" + name + ".wasm"],
    ),
] for name in CANISTERS]
