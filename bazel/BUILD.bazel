load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")

bool_flag(
    name = "enable_malicious_code",
    build_setting_default = False,
)

config_setting(
    name = "malicious_code_enabled",
    flag_values = {
        ":enable_malicious_code": "True",
    },
)

exports_files(
    [
        "prost_generator.sh",
        "generic_rust_bench.sh",
    ],
    visibility = ["//visibility:public"],
)

EXTERNAL_CRATES = ["external_crates.bzl"]

sh_test(
    name = "external_crates_test",
    size = "small",
    srcs = ["external_crates_test.sh"],
    args = ["%s/%s" % (
        package_name(),
        p,
    ) for p in EXTERNAL_CRATES],
    data = EXTERNAL_CRATES,
)

BUILDIFIER_EXCLUDES = [
    "./.git/*",
    "./gitlab-ci/src/git_changes/test_data/**",
]

buildifier(
    name = "buildifier",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "fix",
    mode = "fix",
    visibility = ["//visibility:public"],
)

buildifier(
    name = "buildifier.check",
    exclude_patterns = BUILDIFIER_EXCLUDES,
    lint_mode = "warn",
    mode = "diff",
)

py_test(
    name = "buildifier_test",
    size = "small",
    srcs = ["buildifier_test.py"],
    data = [
        ":buildifier.check",
        "//:WORKSPACE.bazel",
    ],
    env = {
        "BUILDIFIER_CHECK_BIN": "$(location :buildifier.check)",
        "WORKSPACE": "$(location //:WORKSPACE.bazel)",
    },
    tags = [
        "external",  # force test to be unconditionally executed.
        "local",  # precludes the action or test from being remotely cached, remotely executed, or run inside the sandbox.
        "smoke",  # it should be run before committing code changes into the version control system.
    ],
    visibility = ["//visibility:public"],
)
