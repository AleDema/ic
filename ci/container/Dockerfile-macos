FROM ubuntu:24.04
ENV TZ=UTC

ARG PACKAGE_FILE=ci/container/files/packages.macos
COPY ${PACKAGE_FILE} /tmp/
RUN export DEBIAN_FRONTEND=noninteractive && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt -yq update && \
    apt -yqq install $(sed -e "s/#.*//" "/tmp/$(basename $PACKAGE_FILE)") && \
    rm "/tmp/$(basename $PACKAGE_FILE)"

RUN apt -yqq install --no-install-recommends podman containernetworking-plugins buildah zip fuse-overlayfs xtail

# install afl & gsutils deps for bazel-fuzzers
RUN curl -L "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add - && \
    echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-18 main" | tee -a /etc/apt/sources.list.d/llvm.list && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg  add - && \
    apt -yq update && \
    apt -yqq install --no-install-recommends lld-18 llvm-18 llvm-18-dev clang-18 libclang-rt-18-dev google-cloud-cli \
    gcc-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-plugin-dev libstdc++-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-dev

ARG mkcert_version=1.4.4
ARG mkcert_sha=b98f2cc69fd9147fe4d405d859c57504571adec0d3611c3eefd04107c7ac00d0
RUN curl -fsSL https://github.com/FiloSottile/mkcert/releases/download/v${mkcert_version}/mkcert-v${mkcert_version}-linux-arm64 -o /usr/local/bin/mkcert && \
    echo "$mkcert_sha /usr/local/bin/mkcert" | sha256sum --check && \
    chmod +x /usr/local/bin/mkcert

ARG bazelisk_sha=4c8d966e40ac2c4efcc7f1a5a5cceef2c0a2f16b957e791fa7a867cce31e8fcb
RUN curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.25.0/bazelisk-linux-arm64 -o /usr/bin/bazel && \
    echo "$bazelisk_sha /usr/bin/bazel" | sha256sum --check && \
    chmod 777 /usr/bin/bazel

ARG nvm_version=v0.39.1
ARG dependency_mgmt_nns_dapp_node_version=18.20.5
ARG dependency_mgmt_default_node_version=20
ARG dependency_mgmt_oisy_wallet_node_version=22.11.0
ENV NVM_DIR=/opt/nvm
RUN mkdir $NVM_DIR && \
    curl --fail https://raw.githubusercontent.com/nvm-sh/nvm/${nvm_version}/install.sh -sSf | bash

# Add buf
ARG BUF_BIN="/usr/local/bin/buf"
ARG BUF_VERSION="1.46.0"
RUN curl -sSL "https://github.com/bufbuild/buf/releases/download/v${BUF_VERSION}/buf-$(uname -s)-$(uname -m)" -o "${BUF_BIN}" && \
    echo "21abc15cea986e7bc9ce400f5c36f4ae3d45ce61087e47ca191511b0df7566f8  ${BUF_BIN}" | shasum -a 256 -c - && \
    chmod +x "${BUF_BIN}"

# Add mold linker
ARG MOLD_BIN="/usr/local/bin/mold"
ARG MOLD_VERSION=2.37.1
RUN curl -sSL "https://github.com/rui314/mold/releases/download/v${MOLD_VERSION}/mold-${MOLD_VERSION}-$(uname -m)-linux.tar.gz" | tar -C /usr/local --strip-components=1 -xzf - && \
    echo "5da76be6a0734eb9c642735d5dac0a94b22f5cb49220e93dc29e1022b4e65dac  ${MOLD_BIN}" | shasum -a 256 -c - && \
    ln -sf "${MOLD_BIN}" "$(realpath /usr/bin/ld)"

# Add IC SDK (dfx)
ARG sdk_version=0.29.2
ARG sdk_sha=9da909e8a3cbcb938cfe8502afab87ec61e75c5744025cd0a18b621695c38a5e
RUN mkdir -p /tmp/sdk && curl -fsSL https://github.com/dfinity/sdk/releases/download/${sdk_version}/dfx-${sdk_version}-aarch64-linux.tar.gz -o /tmp/sdk/dfx.tar.gz && \
    echo "$sdk_sha /tmp/sdk/dfx.tar.gz" | sha256sum --check && \
    tar -zxf /tmp/sdk/dfx.tar.gz -C /usr/local/bin && \
    chmod +x /usr/local/bin/dfx

# Add motoko compiler
ARG motoko_version=0.16.3
RUN curl -fsSL https://github.com/dfinity/motoko/releases/download/${motoko_version}/motoko-linux-aarch64-${motoko_version}.tar.gz | tar -xz -C /usr/local/bin && chmod +x /usr/local/bin/moc

# Create user groups needed for github actions runner
RUN groupadd -g 1001 buildifier && useradd -ms /bin/bash -u 1001 -g 1001 -G ubuntu buildifier && \
    # CI before script requires sudo \
    echo "ALL ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Add gitconfig
COPY ./ci/container/files/gitconfig /etc/gitconfig

# Install AFLplusplus
ARG AFLPLUSPLUS_RELEASE_VERSION=v4.21c
RUN mkdir -p /afl && \
    chown -R ubuntu:ubuntu /afl && \
    cd /afl && \
    git clone --depth=1 --branch=${AFLPLUSPLUS_RELEASE_VERSION} https://github.com/AFLplusplus/AFLplusplus.git && \
    cd AFLplusplus && \
    STATIC=1 LLVM_CONFIG=/usr/bin/llvm-config-18 CC=/usr/bin/clang-18 CXX=/usr/bin/clang++-18 make all && \
    STATIC=1 LLVM_CONFIG=/usr/bin/llvm-config-18 CC=/usr/bin/clang-18 CXX=/usr/bin/clang++-18 make install && \
    mv afl-fuzz afl-showmap  /afl && \
    cd .. && rm -rf AFLplusplus

# Pre-populate the Bazel installation for root
# (note: this is only used for bash completion; the actual bazel version comes from bazelisk)
COPY .bazelversion /tmp/bazel/
RUN cd /tmp/bazel && touch WORKSPACE  && bazel version

COPY ./ci/container/files/generate-bazel-completion.sh /tmp/
RUN USE_BAZEL_VERSION=$(tail -1 /tmp/bazel/.bazelversion) /tmp/generate-bazel-completion.sh && \
    echo "source /etc/bash_completion.d/bazel" >>/etc/bash.bashrc

COPY ./ci/container/files/containers.conf /etc/containers/containers.conf

USER ubuntu

# Set PATH for ubuntu user
ENV PATH=/ic/bin:/home/ubuntu/.cargo/bin:/home/ubuntu/.local/bin:$PATH
ENV PYTHONPATH=/ic/ci/src:/ic/ci/src/dependencies:$PYTHONPATH

# Pre-populate the Bazel installation for ubuntu
RUN cd /tmp/bazel && bazel version

# Add Rust/Cargo support
RUN mkdir -p /tmp/rust-version/
COPY rust-toolchain.toml /tmp/rust-version/rust-toolchain.toml
# Read the channel from the toolchain file
RUN sed </tmp/rust-version/rust-toolchain.toml -n 's/^channel = "\(.*\)"$/\1/p' > /tmp/rust-version/version
RUN echo "Rust version:" "$(cat /tmp/rust-version/version)"
RUN curl --fail https://sh.rustup.rs -sSf \
    | sh -s -- -y --default-toolchain "$(cat /tmp/rust-version/version)-aarch64-unknown-linux-gnu" --no-modify-path && \
    rustup default "$(cat /tmp/rust-version/version)-aarch64-unknown-linux-gnu" && \
    rustup target add wasm32-unknown-unknown && \
    rustup component add clippy
RUN rm -rf /tmp/rust-version

# Add cargo-audit
ARG CARGO_AUDIT_VERSION=0.21.0
RUN cargo install cargo-audit --version ${CARGO_AUDIT_VERSION}
# Add zshrc generated from zsh-newuser-install (option 2)
COPY --chown=ubuntu:ubuntu ./ci/container/files/zshrc /home/ubuntu/.zshrc

# Read in the build-ci script
COPY ./ci/container/TAG /home/ubuntu/.DFINITY-TAG

WORKDIR /
# Use buildifier (uid 1001) if /entrypoint.sh is overriden
# In GitHub that is the case and we need 1001 and we set it via ARG.
ARG CI_USER="root"
USER $CI_USER
CMD ["/bin/bash"]
