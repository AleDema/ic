include:
  - local: /gitlab-ci/config/00--common--rules.yml
  - local: /gitlab-ci/config/00--common--images.yml

stages:             # Files from the given stage should be prefixed with:
  - automation          # temp
  - init                # 10--
  - test                # 20--
  - deploy              # only required for gitlab pages (job "pages" needs to be in "deploy" stage)
  - cargo-build         # 30--
  - cargo-test          # 40--
  - guest-os-build      # 46--
  - guest-os-test       # 47--
  - host-os-test        # 54--
  - build-determinism-test  # 55--
  - prod-tests          # 60--
    # Shard prod tests into 5 groups, because there are 5 'cdnightly' testnet environments.
    # The stages are purely for visual convenience when rendering the pipeline in the GitLab UI.
  - prod-tests-01
  - prod-tests-02
  - prod-tests-03
  - prod-tests-04
  - prod-tests-05
  - benchmark-tests
  - benchmark-spot-tests
  - sns-tests
  - push-branches       # 75--
  - npm-release         # 80--
  - finalize            # 100--

default:
  # Retry config copied from:
  # https://gitlab.com/gitlab-org/gitlab/blob/master/.gitlab/ci/global.gitlab-ci.yml#L1-9
  # Complete description available at:
  # https://docs.gitlab.com/ee/ci/yaml/#retry
  retry:
    max: 2  # This is confusing but this means "3 runs at max".
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure

variables:
  TEST_ES_HOSTNAMES: >-
    elasticsearch-node-0.testnet.dfinity.systems:443,
    elasticsearch-node-1.testnet.dfinity.systems:443,
    elasticsearch-node-2.testnet.dfinity.systems:443

before_script:
  - |
    # Execute the before_script section
    echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"  # first close before_script section, if open

    # Start the (collapsed) before_script section
    set -eExuo pipefail
    echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

    date +%s > "/tmp/job_start_date_${CI_JOB_ID:-}"
    # date -Iseconds is not supported by BSD date (macOS)
    date +"%Y-%m-%dT%H:%M:%S%z" > "/tmp/job_start_iso_date_${CI_JOB_ID:-}"
    date
    command -v ssh-agent > /dev/null
    test -z "${SSH_AUTH_SOCK:-}" && { eval "$(ssh-agent -s)"; ssh-add - <<< "${SSH_PRIVATE_KEY}"; }
    mkdir -p ~/.ssh
    chmod 0700 ~/.ssh

    echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
    date

    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}

    if [ "${CI_DISPOSABLE_ENVIRONMENT:-false}" != "true" ]; then
      # MacOS + shell builds
      export CARGO_TARGET_DIR="$CI_PROJECT_DIR/target"
    fi

    # docker login for RO to overcome anonymous pull limit of 100 pulls / 6h
    # enterprise logged in account has 5000 pulls / 24h
    if [ "$(uname)" == "Linux" ]; then
      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"

      # set ownership to ic-build container's user,
      # but ignore errors that happen due to git gc:
      #   `chown: changing ownership of '.git/shallow.lock': No such file or directory`
      sudo chown "$(id -u):$(id -g)" -fR "${CI_PROJECT_DIR}" || true
    fi

  - echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"


# TESTING NOTE:
# $SHELL_WRAPPER allows us to emulate CI runs without actually executing the complicated and
#                time-consuming operations.
#                In normal execution, "$SHELL_WRAPPER" will be substituted with "/usr/bin/time"
#                In CI validation, "$SHELL_WRAPPER" will be substituted with "echo"

after_script:
  - |
    # Start the after_script section
    echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

    # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
    export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

    rm -rf "${CI_PROJECT_DIR}/target"

    # Finish and collapse the after_script section
    echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"

.build-env-base:
  # Generally only the last push to a branch matters and older jobs can be cancelled
  # https://docs.gitlab.com/ee/ci/yaml/#interruptible
  # Jobs can override this by setting `interruptible: false`
  interruptible: true
  artifacts:
    paths:
      - "junit_data/*"
      - "coredumps/*.txt"
      - "coredumps/*.gz"
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0  # Pull the complete repo initially
    GIT_STRATEGY: "fetch"  # And then pull only new commits
    SHELL_WRAPPER: "/usr/bin/time"

.ubuntu-k8s:
  extends:
    - .build-env-base
    - .ic-build-legacy-image

.bazel-build-k8s:
  extends:
    - .ubuntu-k8s
    - .ic-build-image
  tags:
    - dfinity-ic
    # Run in ZH since BuildFarm is in ZH
    - zh
  variables:
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"

.ubuntu-cargo-k8s:
  extends:
    - .build-env-base
    - .ubuntu-k8s
    - .ic-build-legacy-image
  variables:
    # This MUST match the directory used in our `build-ic.sh` script
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"

.macos-cargo-native:
  extends:
    - .build-env-base
  tags:
    - dfinity
    - macos
