.bazel-rules-pipeline:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/'

.bazel-rules-pipeline-no-merge-train:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/'

.bazel-rules-pipeline-no-merge-train-allow-to-fail:
  rules:
    # Set to manual due to capacity crunch 2022-12-13.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"'
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/'
      allow_failure: true

.bazel-rules-post-master:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      when: manual
      allow_failure: true
    - if: '$SCHEDULE_NAME == "run-all-master"'

.bazel-rules-test-parity:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      changes:
        - 'rs/**/*.rs'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    - if: '$SCHEDULE_NAME == "run-all-master"'

.bazel-test-all:
  extends:
    - .bazel-rules-pipeline
    - .bazel-build-k8s
  stage: test
  needs: []
  artifacts:
    when: always
    paths:
      - bazel-build-log*.json*
      - bazel-bep.pb
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
  variables:
    BAZEL_COMMAND: "test"
    BAZEL_TARGETS: "//..."
  script:
    - ./gitlab-ci/src/bazel-ci/main.sh
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "*************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel **"
      echo -e "*************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    - !reference [after_script]

bazel-test-all:
  extends:
    - .bazel-test-all
    - .bazel-rules-pipeline-no-merge-train
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going"
    BAZEL_TARGETS: "//..."

# VER-1818: bazelified system tests should not block pre-master pipelines, as they run on a new (WIP) test driver implementation.
bazel-test-all-allow-to-fail:
  extends:
    - .bazel-test-all
    - .bazel-rules-pipeline-no-merge-train-allow-to-fail
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --test_tag_filters=allow_to_fail"
    BAZEL_TARGETS: "//..."

.scheduled-bazel-system-test:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=${BAZEL_TEST_TAG_FILTERS} --build_event_json_file=./build_event_file.json"
    BAZEL_TARGETS: "//..."
  artifacts:
    when: always
    paths:
      - output_dir/
      - build_event_file.json
  after_script:
    - |
      mkdir output_dir
      export OUTPUT_DIR="$PWD/output_dir"
      export BUILD_EVENT_JSON_PATH="$PWD/build_event_file.json"
      export SLACK_WEBHOOK_URL
      export HONEYCOMB_API_TOKEN
      bazel run //rs/tests:post_processing
    - !reference [after_script]

bazel-system-test-hourly:
  extends:
    - .scheduled-bazel-system-test
    - .bazel-rules-post-master
  variables:
    BAZEL_TEST_TAG_FILTERS: "system_test_hourly"

bazel-system-test-nightly:
  extends:
    - .bazel-test-all
    - .rules-rollout-pipeline-auto
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_nightly"
    BAZEL_TARGETS: "//..."
  timeout: 200 minutes

bazel-config-check-all-rebuild:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=check"
    BAZEL_COMMAND: "build"
    BAZEL_TARGETS: "//rs/..."

bazel-cache-perf-test-linux:
  extends:
    - bazel-test-all
    - .bazel-rules-post-master
  needs:
    - bazel-test-all

bazel-test-all-rebuild:
  extends:
    - .bazel-test-all
    - .bazel-rules-post-master
  variables:
    BAZEL_COMMAND: "build"
    BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached --remote_instance_name=${CI_COMMIT_SHA} --@rules_rust//rust/settings:pipelined_compilation=True"

bazel-build-macos:
  extends:
    - .build-env-base
    - .bazel-test-all
    - .bazel-rules-pipeline-no-merge-train
  tags:
    - macos
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_COMMAND: "build"
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_TARGETS: "//rs/... //publish/binaries/... //publish/sdk/..."

bazel-cache-perf-test-macos:
  extends:
    - bazel-build-macos
    - .bazel-rules-post-master
  needs:
    - bazel-build-macos

bazel-cargo-test-parity:
  extends:
    - .bazel-test-all
    - .bazel-rules-test-parity
    - .ic-build-image
  artifacts:
    when: always
    paths:
      - artifacts/*
  tags:
    # TODO: remove when IDX-2575 is complete
    - docker
    - dfinity
    - zh
  script:
    - |
      set -eufo pipefail
      echo "Checking bazel vs cargo test parity"

      ./bazel/test_parity/compare_covered_tests.sh
