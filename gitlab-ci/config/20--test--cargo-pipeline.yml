gen-cargo-pipeline:
  extends:
    - .ubuntu-cargo-docker-k8s
    - .cargo-rules-autorun-on-trigger
  # Child pipeline must be generated in a stage prior to the one where it runs
  stage: init
  tags:
    - dfinity
    - ubuntu
  variables:
    PYTHONPATH : ${CI_PROJECT_DIR}/gitlab-ci/src
  script:
    - |
      set -euo pipefail
      ssh-add -L

      cd gitlab-ci/src/

      # set-up python dev
      pip3 install -r requirements.txt
      $SHELL_WRAPPER python3 gen_gitlab_cargo_pipeline/gen_pipeline.py \
        ../../rs/ ../../ic-os -v --out=../../child-pipeline.yml
      
      cd -
      # Parse list of tags from current runner and return the first one that is two symbols.
      # This is most likely DC tag. Therefore set it for all child cargo pipelines to also run them all in the current DC.
      # This technique will make DC selection self regulating: DC that can't run jobs (because it is full or broken)
      # will not run `gen-cargo-pipeline` either.
      DC=$(echo "${CI_RUNNER_TAGS}" | jq -r 'map(select(length == 2)) | .[0]')
      echo "DC_TAG=$DC" >> dc.env

  artifacts:
    paths:
      - child-pipeline.yml
    reports:
      dotenv: dc.env

cargo-pipeline:
  extends: .cargo-rules-autorun-on-trigger
  stage: test
  needs:
    - job: gen-cargo-pipeline
    - job: container-autobuild-protected
      optional: true
  variables:
    CI_PARENT_PIPELINE_SOURCE: "${CI_PIPELINE_SOURCE}"
    SELECTED_DC: "$DC_TAG"
  trigger:
    include:
      - artifact: child-pipeline.yml
        job: gen-cargo-pipeline
    strategy: depend
