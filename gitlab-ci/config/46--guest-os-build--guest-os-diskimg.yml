guest-os-diskimg:
  extends:
    - .ubuntu-docker-k8s-protected
    - .rules-parent-pipeline-autorun-on-trigger
  stage: guest-os-build
  needs:
    - job: cargo-build-release-linux-native
      artifacts: false
  variables:
      BUILD_EXTRA_ARGS: ""
      BUILD_EXTRA_SUFFIX: ""
  script:
    - |
      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="$CI_COMMIT_SHA" --remote-path="release" \
          --out="artifacts/release"

      if [[ "$CI_JOB_NAME" == *"-malicious" ]]; then
          "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
              --git-rev="$CI_COMMIT_SHA" --remote-path="release-malicious" \
              --out="artifacts/release-malicious"
      fi

      "${CI_PROJECT_DIR}/gitlab-ci/tools/job-driver.py" guest-os-diskimg

# Build dev image.
#
# This is the same as the prod image with the following differences:
# - it has password "root" set for root to allow console login
guest-os-diskimg-dev:
  extends:
    - guest-os-diskimg
  variables:
      BUILD_EXTRA_ARGS: "-t dev -p root"
      BUILD_EXTRA_SUFFIX: "-dev"

# Build malicious dev image.
#
# This is the same as the dev image with the following differences:
# - the replica binary is built with the malicious_code profile
guest-os-diskimg-dev-malicious:
  extends:
    - guest-os-diskimg
  needs:
    - job: cargo-build-release-linux-native
      artifacts: false
    - job: cargo-build-release-linux-native-malicious
      artifacts: false
  variables:
      BUILD_EXTRA_ARGS: "-t dev -p root"
      BUILD_EXTRA_SUFFIX: "-dev-malicious"

boundary-os-diskimg:
  extends:
    - .ubuntu-docker-k8s-protected
    - .rules-parent-pipeline-autorun-on-trigger
  stage: guest-os-build
  needs:
    - job: cargo-build-release-linux-native
      artifacts: false
  variables:
      BUILD_EXTRA_ARGS: ""  # We keep this as a dev image might soon follow, e.g. due to ssh access
      BUILD_EXTRA_SUFFIX: ""
  script:
    - |
      set -xeuo pipefail

      "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
          --git-rev="$CI_COMMIT_SHA" --remote-path="release" \
          --out="artifacts/release"

      # artifacts/release dir with binaries come from cargo-build-release-linux-native
      cd "${CI_PROJECT_DIR}"/ic-os/boundary-guestos

      BUILD_OUT="build-out/disk-img${BUILD_EXTRA_SUFFIX}"
      BUILD_TMP="build-tmp${BUILD_EXTRA_SUFFIX}"
      UPLOAD_TARGET="boundary-os/disk-img${BUILD_EXTRA_SUFFIX}"

      "${CI_PROJECT_DIR}"/gitlab-ci/src/job_scripts/lib/boundary-os-diskimg.sh \
        "$BUILD_OUT" "$BUILD_TMP" "$UPLOAD_TARGET" "$CI_COMMIT_SHA" "$CDPRNET"
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" rclone -- \
      "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_upload.py --version="$CI_COMMIT_SHA" "$BUILD_OUT" "$UPLOAD_TARGET"
      echo "Build ID (real or fake git revision): $CI_COMMIT_SHA"

# Build dev image.
#
# This is the same as the prod image with the following differences:
# - it has password "root" set for root to allow console login
boundary-os-diskimg-dev:
  extends:
    - boundary-os-diskimg
  variables:
      BUILD_EXTRA_ARGS: "-p root"
      BUILD_EXTRA_SUFFIX: "-dev"

# Build snp image.
#
# This is the same as the prod image with the following differences:
# - it has password "root" set for root to allow console login
# - Boundary-os binary is built as an SNP enabled image
boundary-os-diskimg-snp-dev:
  extends:
    - boundary-os-diskimg
  variables:
    BUILD_EXTRA_ARGS: "-p root -s"
    BUILD_EXTRA_SUFFIX: "-snp-dev"
