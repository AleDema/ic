#!/usr/bin/env bash
# Starts the Docker container and mounts some local folders as volumes for caching purposes.
# The purpose of this script is to replicate the CI environment.
#
# Example usage:
# REPO_ROOT $ ./gitlab-ci/tools/docker-run

set -eEuo pipefail

while test $# -gt 0; do
    case "$1" in
        -b* | --bazel*)
            BAZEL_MODE=true
            shift
            ;;
        *) break ;;
    esac
done

if [ -n "${DEBUG:-}" ]; then
    set -x
fi

REPO_ROOT="$(
    cd "$(dirname "$0")"
    git rev-parse --show-toplevel
)"

if [ -z "${IMAGE:-}" ]; then
    if [ "${BAZEL_MODE:-false}" == "true" ]; then
        "$REPO_ROOT"/gitlab-ci/docker/docker-build-image.sh --bazel
    else
        "$REPO_ROOT"/gitlab-ci/docker/docker-build-image.sh
    fi
fi

source "$REPO_ROOT/gitlab-ci/docker/docker-run-include"

if [ "${BAZEL_MODE:-false}" == "true" ]; then
    IMAGE="$BAZEL_IMAGE"
fi

wdir="/ic/$(git rev-parse --show-prefix)"
if [[ -z "${@:-}" ]]; then
    set -x
    docker run --rm "${DOCKER_RUN_ARGS[@]}" -w "$wdir" "$IMAGE" bash
else
    set -x

    # This script needs to quote the parameters passed into bash -c.
    # However it also needs to escape quote each parameter so they are
    # parsed correctly on the other end.
    PARAMS=""
    for PARAM in "$@"; do
        PARAMS="${PARAMS} \"${PARAM}\""
    done
    docker run --rm "${DOCKER_RUN_ARGS[@]}" -w "$wdir" "$IMAGE" bash -c "${PARAMS}"
fi
