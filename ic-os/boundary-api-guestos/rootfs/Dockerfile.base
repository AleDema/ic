# Boundary API Guestos - Base Image
#
# Build steps:
# - `docker build -t dfinity/boundary-api-guestos-base:<tag> -f Dockerfile.base .`
# - `docker push/pull dfinity/boundary-api-guestos-base:<tag>`

# NOTE! If you edit this file, you will need to perform the following
# operations to get your changes deployed.
#
# 1. Get your MR approved and merged into master
# 2. On the next hourly master pipeline (Run post-merge tests), click the "deploy-guest-os-baseimg" job
# 3. Note the sha256 and update the sha256 reference in the neighboring Dockerfiles.

#
# First build stage: download software, build and verify it (such that it
# does not change under our noses).
#
FROM ubuntu:20.04 AS download

USER root:root

ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install \
    ca-certificates \
    curl \
    pkg-config \
    libffi-dev \
    libssl-dev \
    ssl-cert \
    rustc \
    cargo \
    perl \
    git \
    autoconf \
    make \
    automake \
    g++ \
    gcc \
    uuid-dev

WORKDIR /tmp

# Download and verify vector
RUN \
    curl -L -O https://packages.timber.io/vector/0.24.1/vector_0.24.1-1_amd64.deb && \
    echo "605b5bd2a0b3d03a252addfebb24e35af6929523cc9129a468039874806b3492  vector_0.24.1-1_amd64.deb" | shasum -c

# Download and verify node_exporter
RUN \
    curl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz && \
    echo "af999fd31ab54ed3a34b9f0b10c28e9acee9ef5ac5a5d5edfdde85437db7acbb  node_exporter-1.5.0.linux-amd64.tar.gz" | shasum -c

# Download and verify process-exporter
RUN \
    curl -L -O https://github.com/ncabatoff/process-exporter/releases/download/v0.7.10/process-exporter-0.7.10.linux-amd64.tar.gz && \
    echo "52503649649c0be00e74e8347c504574582b95ad428ff13172d658e82b3da1b5  process-exporter-0.7.10.linux-amd64.tar.gz" | shasum -c

# Download libnginx-mod-http-ndk.deb
RUN \
   curl -L -O https://github.com/dfinity/nginx-modules/releases/download/v0.1.0/libnginx-mod-http-ndk_0.3.1_amd64.deb && \
   echo "c807ac06ce3ffbbfda9845dbd70d59d5b3180913b0ba8ef3e89f3da4e7818a68  libnginx-mod-http-ndk_0.3.1_amd64.deb" | shasum -c

# Download libnginx-mod-http-cbor-input.deb
RUN \
   curl -L -O https://github.com/dfinity/nginx-modules/releases/download/v0.1.0/libnginx-mod-http-cbor-input_0.1.0_amd64.deb && \
   echo "7d454a87da8a38c2d7b17d791186e2a512cbc9d2f64c502248e80a8a97781a2b  libnginx-mod-http-cbor-input_0.1.0_amd64.deb" | shasum -c

# Download libnginx-mod-http-cbor-req-ic.deb
RUN \
   curl -L -O https://github.com/dfinity/nginx-modules/releases/download/v0.1.0/libnginx-mod-http-cbor-req-ic_0.1.0_amd64.deb && \
   echo "86c7a6ce4d3ee5c4251778f85732e415db7672ac9641bd39bdf35a1cbae2b88a  libnginx-mod-http-cbor-req-ic_0.1.0_amd64.deb" | shasum -c

# Download libnginx-mod-http-cbor-resp-ic.deb
RUN \
   curl -L -O https://github.com/dfinity/nginx-modules/releases/download/v0.1.0/libnginx-mod-http-cbor-resp-ic_0.1.0_amd64.deb && \
   echo "aae648fd0e5687ea11a1582686dfcc7a48c2a7eed307f72f38d9de8926fce30a  libnginx-mod-http-cbor-resp-ic_0.1.0_amd64.deb" | shasum -c

#
# Second build stage:
# - Download and cache minimal Ubuntu Server 20.04 LTS Docker image
# - Install and cache upstream packages from built-in Ubuntu repositories
# - Copy downloaded archives from first build stage into the target image
#
FROM ubuntu:20.04

USER root:root

ENV TZ=UTC
ENV SOURCE_DATE_EPOCH=0

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Preparation and install of packages for nginx
RUN apt-get -y update && apt-get -y upgrade && apt-get -y --no-install-recommends install gnupg 
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62

RUN echo "deb http://nginx.org/packages/mainline/ubuntu/ focal nginx" >> /etc/apt/sources.list.d/nginx.list &&\
    echo "deb-src http://nginx.org/packages/mainline/ubuntu/ focal nginx" >> /etc/apt/sources.list.d/nginx.list 

# GeoIP repository
RUN \
    apt-get update && \
    apt-get install -y \
        software-properties-common \
        gpg

RUN \
    add-apt-repository -y ppa:maxmind/ppa

RUN \
    apt-get update && \
    apt-get -y upgrade && \
    apt-get -y --no-install-recommends install \
        attr \
        ca-certificates \
        checkpolicy \
        chrony \
        cryptsetup \
        curl \
        dante-server \
        faketime \
        fdisk \
        haveged \
        initramfs-tools \
        inotify-tools \
        iproute2 \
        iputils-ping \
        isc-dhcp-client \
        less \
        libffi-dev \
        liblmdb0 \
        libmaxminddb0 \
        libssl-dev \
        linux-image-virtual-hwe-20.04 \
        logrotate \
        lshw \
        lvm2 \
        net-tools \
        netbase \
        nftables \
        nginx-module-njs=1.21.3+0.7.0-1~focal \
        nginx=1.21.3-1~focal \
        opensc \
        openssh-client openssh-server \
        parted \
        pciutils \
        pcsc-tools pcscd \
        policycoreutils \
        python \
        python3-dev \
        rsync \
        ssl-cert \
        sudo \
        systemd systemd-sysv systemd-journal-remote \
        udev \
        usbutils \
        vim \
        zstd

# Install vector
COPY --from=download /tmp/vector_0.24.1-1_amd64.deb /tmp/vector_0.24.1-1_amd64.deb
RUN dpkg -i --force-confold /tmp/vector_0.24.1-1_amd64.deb && \
    rm /tmp/vector_0.24.1-1_amd64.deb

# Install node_exporter
COPY --from=download /tmp/node_exporter-1.5.0.linux-amd64.tar.gz /tmp/node_exporter-1.5.0.linux-amd64.tar.gz
RUN cd /tmp/ && \
    mkdir -p /etc/node_exporter && \
    tar --strip-components=1 -C /usr/local/bin/ -zvxf node_exporter-1.5.0.linux-amd64.tar.gz node_exporter-1.5.0.linux-amd64/node_exporter && \
    rm /tmp/node_exporter-1.5.0.linux-amd64.tar.gz

# Install process-exporter
COPY --from=download /tmp/process-exporter-0.7.10.linux-amd64.tar.gz /tmp/process-exporter-0.7.10.linux-amd64.tar.gz
RUN cd /tmp/ && \
    tar --strip-components=1 -C /usr/local/bin/ -zvxf process-exporter-0.7.10.linux-amd64.tar.gz process-exporter-0.7.10.linux-amd64/process-exporter && \
    rm /tmp/process-exporter-0.7.10.linux-amd64.tar.gz

### Nginx Modules

ARG NGINX_MODULES_PATH=/usr/lib/nginx/modules/

WORKDIR /tmp

# Install libnginx-mod-http-ndk 
COPY --from=download /tmp/libnginx-mod-http-ndk_0.3.1_amd64.deb .
RUN \
    dpkg -i libnginx-mod-http-ndk_0.3.1_amd64.deb && \
    rm libnginx-mod-http-ndk_0.3.1_amd64.deb

# Install libnginx-mod-http-cbor-input
COPY --from=download /tmp/libnginx-mod-http-cbor-input_0.1.0_amd64.deb .
RUN \
    dpkg -i libnginx-mod-http-cbor-input_0.1.0_amd64.deb && \
    rm libnginx-mod-http-cbor-input_0.1.0_amd64.deb

# Install libnginx-mod-http-cbor-req-ic
COPY --from=download /tmp/libnginx-mod-http-cbor-req-ic_0.1.0_amd64.deb .
RUN \
    dpkg -i libnginx-mod-http-cbor-req-ic_0.1.0_amd64.deb && \
    rm libnginx-mod-http-cbor-req-ic_0.1.0_amd64.deb

# Install libnginx-mod-http-cbor-resp-ic
COPY --from=download /tmp/libnginx-mod-http-cbor-resp-ic_0.1.0_amd64.deb .
RUN \
    dpkg -i libnginx-mod-http-cbor-resp-ic_0.1.0_amd64.deb && \
    rm libnginx-mod-http-cbor-resp-ic_0.1.0_amd64.deb
