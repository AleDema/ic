include "/run/ic-node/etc/nginx/conf.d/domain_set.conf";

# Geolocation

geoip2 /etc/nginx/geoip/GeoLite2-Country.mmdb {
  $geo_country_code default=N/A source=$remote_addr country iso_code;
  $geo_country_name default=N/A source=$remote_addr country names en;
}

geoip2 /etc/nginx/geoip/GeoLite2-City.mmdb {
  $geo_city_name default=N/A source=$remote_addr city names en;
}

# njs
js_import ic_router.js;

# get route
js_set $route ic_router.route;

map $route $subnet_id {
  "~^[^,]*,(?<v>.*)" $v;
}

map $route $node_id {
  "~^(?<v>[^,]*),.*" $v;
}

# get random route
js_set $random_route ic_router.randomRoute;

map $random_route $random_subnet_id {
  "~^(?<v>[^,]*),.*" $v;
}

map $random_route $random_node_id {
  "~^[^,]*,(?<v>.*)" $v;
}

js_set $host_canister_id ic_router.hostCanisterId;
js_set $inferred_canister_id ic_router.inferCanisterId;

### Compliance

# A denylist is provided to restrict access to forbidden canisters
# A canister- and subnet-allowlist overrides any erroneously denied canisters

map $inferred_canister_id $denylisted {
  default "0";
  include "/var/opt/nginx/denylist/denylist.map"; # lines of the format `ryjl3-tyaaa-aaaaa-aaaba-cai 1;`
}

map $inferred_canister_id $canister_allowed {
  default "0";
  include "allowlist_canisters.map";
}

map $subnet_id $subnet_allowed {
  default "0";
  include "allowlist_subnets.map";
}

js_import is_bot from njs/njs-plugin-is-bot.js;
js_set $is_bot is_bot.fn;

geo $rosetta {
  default 0;     # all other traffic maps to zone 0
  10.0.0.0/8 1;  # local and rosetta traffic map to zone 1

  # Add rosetta node addresses here and map to zone 1
  2a00:fb01:400::/56 1;
  2607:fb58:9005::/48 1;
}

map $subnet_id $nns {
  default "";
  qahwp-36t4m-fjumt-a6uqb-mejzn-xuwvi-swwk5-35xmw-koagu-idvtz-sqe $rosetta;
}

map nop $icx_proxy {
  default "127.0.0.1:9500";
}

add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;

# for call/update requests
limit_req_zone $nns zone=nns_zone:1m rate=10r/s;
limit_req_zone $subnet_id zone=subnet_zone:1m rate=300r/s;

# for read request
limit_req_zone $nns zone=nns_read_zone:1m rate=100r/s;
limit_req_zone $subnet_id zone=subnet_read_zone:1m rate=500r/s;

limit_req_zone $binary_remote_addr zone=http_remote_addr_zone:1m rate=100r/s;
limit_req_zone $rosetta zone=http_zone:1m rate=10000r/s;

root /var/www/html;

# Any direct HTTPS access without correct domain name will default to returning a 404.
server {
  listen       443 ssl http2;
  listen       [::]:443 ssl http2 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

  server_name  _;

  return 404;
}

# Any direct HTTP traffic will be redirected to HTTPS via 301.
server {
  listen       80;
  listen       [::]:80 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

  server_name  _;

  return 301 https://$host$request_uri;
}

server {
  listen       80;
  listen       [::]:80;

  server_name  localhost 127.0.0.1;
  server_name  [::1];

  location /nginx_status {
    stub_status;
    allow 127.0.0.1; #only allow requests from localhost
    deny all;        #deny all other hosts
  }
}
