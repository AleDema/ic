include "ic/nginx_table.conf";

proxy_cache_path /var/cache/nginx/mainnet levels=1:2 keys_zone=cache_mainnet:10m max_size=1000m inactive=10m use_temp_path=off;

# Rate limiting based on fields in the CBOR.
# Note: Some rate limits are defined in nginx_global.conf.  This CBOR rate limit relies on the CBOR contents variable
#       defined in the server section below, so the rate limit is defined locally.
# Note: We MAY want to define the identity canister ID in ansible.
#       Disadvantage:  Increased indirection.
#       Advantage:  It is changed in one place.
#       Disadvantage:  Ansible does not derive values from the Rust code, where the identity canister originates, so
#                      if the identity changes, Ansible will not help by automatically updating this value.
#       Evaluation of advantage: At present this ID is used in one place in ansible.
#       At present the disadvantages outweigh the advantage, so we keep the value here.
limit_req_zone $cbor_rate_limit_mainnet_1rpm zone=cbor_key_rate_limit_mainnet_1rpm:1m rate=1r/m;
map $cbor_key $cbor_rate_limit_mainnet_1rpm {
    default                                                 "";
    "~^call[.][^.]*[.]00000000000000070101[.]register[.].*" $binary_remote_addr; # Rate limit identity creation.
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name .boundary.dfinity.network;
    server_name .mainnet.dfinity.network;

    location / {
        if ($host_canister_id != "") {
            return 308 $scheme://$host_canister_id.{{DOMAIN}}.{{TLD}}$request_uri;
        }

        return 308 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name {{DOMAIN}}.{{TLD}};

    location = / {
        include "includes/method_get.conf";
        return 302 https://dashboard.internetcomputer.org/;
    }

    location = /api/v2/status {
        # Prereqs
        include "includes/method_get.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        set $subnet_id "$random_subnet_id";
        set $node_id "$random_node_id";
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Caching
        set $cache_name "cache_mainnet";
        set_cbor_input $cache_key;
        set $skip_cache 0;
        if ($cache_key = "") {
            set $skip_cache 1;
        }
        include "includes/query_cache.conf";

        # Proxy
        proxy_pass "https://$node_id-query";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # Limits
        set_cbor_input $cbor_key;
        limit_req zone=cbor_key_rate_limit_mainnet_1rpm burst=3 delay=2;
        limit_req zone=nns_zone burst=3 delay=2;
        limit_req zone=subnet_zone burst=100 delay=100;

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # Limits
        set_cbor_input $cbor_key;
        limit_req zone=cbor_key_rate_limit_mainnet_1rpm burst=3 delay=2;
        limit_req zone=nns_read_zone burst=30 delay=20;
        limit_req zone=subnet_read_zone burst=100 delay=100;

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name raw.{{DOMAIN}}.{{TLD}};

    location = / {
        include "includes/method_get.conf";
        return 302 https://dashboard.internetcomputer.org/;
    }

    location = /api/v2/status {
        include "includes/method_get.conf";
        return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        include "includes/method_post.conf";
        return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        include "includes/method_post.conf";
        return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        include "includes/method_post.conf";
        return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name ~^([^.]+\.{{DOMAIN_ESCAPED}}\.{{TLD}})$;

    location / {
        include "includes/method_get.conf";

        location ~* ^\/(?!.*\/.*|sw\.js).*\.js$ {
            if ($http_service_worker = "script") {
                rewrite ^ /uninstall-script.js break;
            }
        }

        if ($is_bot = "1") {
            rewrite ^(.*)$ /seo/$1 last;
        }

        try_files $uri /index.html;
    }

    location /seo/ {
        internal;
        rewrite ^/seo/(.*)$ $1 break;

        # CORS
        set $cors_allow_methods "HEAD, GET, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://$icx_proxy;
        include "includes/proxy_headers.conf";

        add_header "X-Cache-Status" $upstream_cache_status;
    }

    location /_/raw/ {
        # CORS
        set $cors_allow_methods "HEAD, GET, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://$icx_proxy;
        include "includes/proxy_headers.conf";

        add_header "X-Cache-Status" $upstream_cache_status;
    }

    # location = /api/v2/status {
    #     include "includes/method_get.conf";
    #     return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    # }

    # location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
    #     include "includes/method_post.conf";
    #     return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    # }

    # location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
    #     include "includes/method_post.conf";
    #     return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    # }

    # location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
    #     include "includes/method_post.conf";
    #     return 307 $scheme://{{DOMAIN}}.{{TLD}}$request_uri;
    # }

    location = /api/v2/status {
        # Prereqs
        include "includes/method_get.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        set $subnet_id "$random_subnet_id";
        set $node_id "$random_node_id";
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Caching
        set $cache_name "cache_mainnet";
        set_cbor_input $cache_key;
        set $skip_cache 0;
        if ($cache_key = "") {
            set $skip_cache 1;
        }
        include "includes/query_cache.conf";

        # Proxy
        proxy_pass "https://$node_id-query";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # Limits
        set_cbor_input $cbor_key;
        limit_req zone=cbor_key_rate_limit_mainnet_1rpm burst=3 delay=2;
        limit_req zone=nns_zone burst=3 delay=2;
        limit_req zone=subnet_zone burst=100 delay=100;

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Prereqs
        include "includes/method_post.conf";
        include "includes/missing_node_404.conf";
        include "includes/denylist_451.conf";

        # Limits
        set_cbor_input $cbor_key;
        limit_req zone=cbor_key_rate_limit_mainnet_1rpm burst=3 delay=2;
        limit_req zone=nns_read_zone burst=30 delay=20;
        limit_req zone=subnet_read_zone burst=100 delay=100;

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "https://$node_id";
        include "includes/proxy_ssl.conf";
        include "includes/secure_headers.conf";
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name ~^([^.]+\.raw\.{{DOMAIN_ESCAPED}}\.{{TLD}})$;

    location / {
        # CORS
        set $cors_allow_methods "HEAD, GET, POST, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://$icx_proxy;
        include "includes/proxy_headers.conf";

        add_header "X-Cache-Status" $upstream_cache_status;
    }
}
