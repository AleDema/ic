include "/var/opt/nginx/ic/ic_upstreams.conf";

# Server blocks for custom domains
include "/var/opt/nginx/domains.conf";

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name .boundary.dfinity.network;
    server_name .mainnet.dfinity.network;

    location / {
        # Observability
        include "includes/request_id.conf";

        if ($host_canister_id != "") {
            return 308 $scheme://$host_canister_id.$primary_domain$request_uri;
        }

        return 308 $scheme://$primary_domain$request_uri;
    }
}

# API Domains ONLY
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    include "/run/ic-node/etc/nginx/conf.d/api_domain.conf";
    include "includes/error_pages.conf";

    location = / {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_get.conf";
        return 302 https://dashboard.internetcomputer.org/;
    }

    location ~ (/api/v2/status|/health) {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_get.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }
}

# System and Application Domains ONLY
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    include "/run/ic-node/etc/nginx/conf.d/server_domain.conf";
    include "includes/error_pages.conf";

    location = / {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_get.conf";
        return 302 https://dashboard.internetcomputer.org/;
    }

    location ~ (/api/v2/status|/health) {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_get.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://ic_boundary";
        include "includes/proxy_x_request_id.conf";
        include "includes/proxy_keepalive.conf";
        include "includes/secure_headers.conf";
    }

    # Custom Domains
    location ~ /registrations\/?$ {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_post.conf";

        # Limits
        limit_req zone=rgs_global nodelay;
        limit_req zone=rgs_per_ip nodelay;

        # CORS
        set $cors_allow_methods "HEAD, POST";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://cert_issuer";
    }

    location ~ /registrations/[0-9a-zA-Z]+$ {
        # Observability
        include "includes/request_id.conf";

        # Limits
        limit_req zone=rgs_global nodelay;
        limit_req zone=rgs_per_ip nodelay;

        # CORS
        set $cors_allow_methods "HEAD, GET, PUT, DELETE";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        # Proxy
        proxy_pass "http://cert_issuer";
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    include "/run/ic-node/etc/nginx/conf.d/server_raw_domain.conf";
    include "includes/error_pages.conf";

    location = / {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_get.conf";
        return 302 https://dashboard.internetcomputer.org/;
    }

    location = /api/v2/status {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_get.conf";
        return 307 $scheme://$primary_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_domain$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    include "/run/ic-node/etc/nginx/conf.d/server_domain_escaped.conf";
    include "includes/error_pages.conf";

    location / {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/method_get.conf";
        include "includes/domain_canister_match_404.conf";
        include "includes/denylist_451.conf";

        # Match all requests to /*.js except /sw.js that also have the header 'Service-Worker: script' and deliver the service worker uninstall script instead.
        # These requests are made by browsers to update their installed service worker script. Unfortunately previous versions of the service worker used to have different names,
        # so they will not check for sw.js but for their old file name. In order to make sure all installed service workers are using the path /sw.js, an uninstall script is delivered for all other paths.
        # Note: Paths with multiple segments (e.g. /foo/bar.js) will not match. This is important because external developers might use those paths to install their own service worker in the future.
        # Note: We have to duplicate some of the logic (`if` blocks and such) because nginx is declarative not imperative.
        location ~* ^\/(?!.*\/.*|sw\.js).*\.js$ {
            # Observability
            include "includes/request_id.conf";

            if ($is_bot = "1") {
                rewrite ^(.*)$ /seo/$1 last;
            }

            if ($http_service_worker = "script") {
                rewrite ^ /uninstall-script.js break;
            }

            rewrite ^(.*)$ /sw/$1 last;
        }

        if ($is_bot = "1") {
            rewrite ^(.*)$ /seo/$1 last;
        }

        rewrite ^(.*)$ /sw/$1 last;
    }

    # Serve Service-Worker related files
    # This internal location is needed because we ran into an odd bug
    # where a seemingly random if-statement made try_files fail with a 404
    #
    # See https://dfinity.atlassian.net/browse/BOUN-534
    location /sw/ {
        internal;
        rewrite ^/sw/(.*)$ $1 break;

        try_files $uri /index.html;
    }

    location /seo/ {
        internal;
        rewrite ^/seo/(.*)$ $1 break;

        # Observability
        include "includes/request_id.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://icx_proxy;
        include "includes/proxy_headers.conf";
        include "/run/ic-node/etc/nginx/conf.d/proxy_headers_seo.conf";
    }

    location /_/raw/ {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/domain_canister_match_404.conf";
        include "includes/denylist_451.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://icx_proxy;
        include "includes/proxy_headers.conf";
        include "/run/ic-node/etc/nginx/conf.d/proxy_headers_underscore.conf";
    }

    ########################################################
    # TODO as a follow up for BOUN-65
    # Eventually we need to remove the redirects
    ########################################################

    location = /api/v2/status {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_get.conf";
        return 307 $scheme://$primary_api_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/query {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_api_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/call {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_api_domain$request_uri;
    }

    location ~ /api/v2/canister/[0-9a-zA-Z\-]+/read_state {
        # Observability
        include "includes/request_id.conf";

        include "includes/method_post.conf";
        return 307 $scheme://$primary_api_domain$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    include "/run/ic-node/etc/nginx/conf.d/server_raw_domain_escaped.conf";
    include "includes/error_pages.conf";

    location / {
        # Observability
        include "includes/request_id.conf";

        # Prereqs
        include "includes/domain_canister_match_404.conf";
        include "includes/denylist_451.conf";

        # CORS
        set $cors_allow_methods "HEAD, GET, POST, OPTIONS";
        include "includes/cors_remove_proxy.conf";
        include "includes/cors.conf";
        include "includes/options.conf";

        proxy_pass http://icx_proxy;
        include "includes/proxy_headers.conf";
    }
}
