load("//bazel:artifacts.bzl", "upload_artifacts", "urls_test")
load("//toolchains/sysimage:toolchain.bzl", "disk_image", "docker_tar", "ext4_image", "sha256sum", "summary_sha256sum", "tar_extract", "upgrade_image")

docker_tar(
    name = "rootfs-tree.tar",
    src = ":rootfs",
    dep = glob(["rootfs/**"]),
    extra_args = [
        "--build-arg",
        "ROOT_PASSWORD=root",
        "--build-arg",
        "BASE_IMAGE=dfinity/guestos-base-dev@sha256:5319fda4a6a53167622df86452c6a2e9318a2de0905190783d7651ff39a3efda",
    ],
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

ext4_image(
    name = "partition-config.tar",
    partition_size = "100M",
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

tar_extract(
    name = "file_contexts",
    src = ":rootfs-tree.tar",
    path = "etc/selinux/default/contexts/files/file_contexts",
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

# Declare the dependencies that we will have for the built filesystem images.
# This needs to be done separately from the build rules because we want to
# compute the hash over all inputs going into the image and derive the
# "version.txt" file from it.
IC_OS_IMAGE_DEPS = {
    "bootfs": {
        # base layer
        ":rootfs-tree.tar": "/",

        # We will install extra_boot_args onto the system, after substuting
        # the hash of the root filesystem into it. Add the template (before
        # substitution) as a dependency nevertheless such that changes
        # to the template file are reflected in the overall version hash
        # (the root_hash must include the version hash, it cannot be the
        # other way around).
        ":bootloader/extra_boot_args.template": "/boot/extra_boot_args.template:0644",
    },
    "rootfs": {
        # base layer
        ":rootfs-tree.tar": "/",

        # additional files to install
        "//:canister_sandbox": "/opt/ic/bin/canister_sandbox:0755",
        "//:ic-btc-adapter": "/opt/ic/bin/ic-btc-adapter:0755",
        "//:ic-consensus-pool-util": "/opt/ic/bin/ic-consensus-pool-util:0755",
        "//:ic-canister-http-adapter": "/opt/ic/bin/ic-canister-http-adapter:0755",
        "//:ic-crypto-csp": "/opt/ic/bin/ic-crypto-csp:0755",
        "//:ic-regedit": "/opt/ic/bin/ic-regedit:0755",
        "//:ic-recovery": "/opt/ic/bin/ic-recovery:0755",
        "//:orchestrator": "/opt/ic/bin/orchestrator:0755",
        "//:replica": "/opt/ic/bin/replica:0755",
        "//:sandbox_launcher": "/opt/ic/bin/sandbox_launcher:0755",
        "//:state-tool": "/opt/ic/bin/state-tool:0755",
        "//:vsock_agent": "/opt/ic/bin/vsock_agent:0755",
        "//ic-os/guestos/src:infogetty": "/opt/ic/bin/infogetty:0755",
        "//ic-os/guestos/src:prestorecon": "/opt/ic/bin/prestorecon:0755",
        # NB: this should be there for dev images only
        ":rootfs/allow_console_root": "/etc/allow_console_root:0644",
    },
}

# This macro expands to compute the hash sum of all inputs individually, and
# then aggregating the hash into a summary hash.
summary_sha256sum(
    name = "version.txt",
    inputs = IC_OS_IMAGE_DEPS,
    suffix = "-dev",
)

ext4_image(
    name = "partition-boot.tar",
    src = ":rootfs-tree.tar",
    # Take the dependency list declared above, and add in the "version.txt"
    # as well as the generated extra_boot_args file in the correct place.
    extra_files = {
        k: v
        for k, v in (
            IC_OS_IMAGE_DEPS["bootfs"].items() + [
                (":version.txt", "/boot/version.txt:0644"),
                (":extra_boot_args", "/boot/extra_boot_args:0644"),
            ]
        )
        if k != ":bootloader/extra_boot_args.template"
        # additional files to install
        if v != "/"
    },
    file_contexts = ":file_contexts",
    partition_size = "1G",
    subdir = "boot/",
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

ext4_image(
    name = "partition-root-unsigned.tar",
    src = ":rootfs-tree.tar",
    # Take the dependency list declared above, and add in the "version.txt"
    # at the correct place.
    extra_files = {
        k: v
        for k, v in (IC_OS_IMAGE_DEPS["rootfs"].items() + [(":version.txt", "/opt/ic/share/version.txt:0644")])
        if v != "/"
    },
    file_contexts = ":file_contexts",
    partition_size = "3G",
    strip_paths = [
        "/run",
        "/boot",
    ],
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

genrule(
    name = "partition-root-sign",
    srcs = [":partition-root-unsigned.tar"],
    outs = [
        "partition-root.tar",
        "partition-root-hash",
    ],
    cmd = "$(location //toolchains/sysimage:verity_sign.py) -i $(location :partition-root-unsigned.tar) -o $(location partition-root.tar) -r $(location partition-root-hash)",
    tools = ["//toolchains/sysimage:verity_sign.py"],
)

genrule(
    name = "extra_boot_args_root_hash",
    srcs = [
        ":bootloader/extra_boot_args.template",
        ":partition-root-hash",
    ],
    outs = [":extra_boot_args"],
    cmd = "sed -e s/ROOT_HASH/$$(cat $(location :partition-root-hash))/ < $(location :bootloader/extra_boot_args.template) > $(location extra_boot_args)",
)

disk_image(
    name = "disk.img.tar",
    layout = ":partitions.csv",
    partitions = [
        "//ic-os/bootloader:partition-esp.tar",
        "//ic-os/bootloader:partition-grub.tar",
        ":partition-config.tar",
        ":partition-boot.tar",
        ":partition-root.tar",
    ],
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
)

upgrade_image(
    name = "upgrade.tar",
    boot_partition = ":partition-boot.tar",
    root_partition = ":partition-root.tar",
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
    target_compatible_with = [
        "@platforms//os:linux",
    ],
    version_file = ":version.txt",
)

genrule(
    name = "disk.img.tar_zstd",
    srcs = [":disk.img.tar"],
    outs = [":disk.img.tar.zstd"],
    cmd = "zstd --threads=0 -10 -f -z $(location disk.img.tar) -o \"$@\"",
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
)

sha256sum(
    name = "disk.img.tar.zstd.sha256",
    srcs = [":disk.img.tar.zstd"],
)

genrule(
    name = "upgrade.tar_zstd",
    srcs = [":upgrade.tar"],
    outs = [":upgrade.tar.zstd"],
    cmd = "zstd --threads=0 -10 -f -z $(location upgrade.tar) -o \"$@\"",
    # The image is pretty big, therefore it is usually much faster to just rebuild it instead of fetching from the cache.
    # TODO(IDX-2221): remove this when CI jobs and bazel infrastructure will run in the same clusters.
    tags = ["no-remote-cache"],
)

upload_artifacts(
    name = "upload_guestos",
    inputs = [
        ":disk.img.tar.zstd",
        ":upgrade.tar.zstd",
    ],
    remote_subdir = "ic-os/guestos",
)

exports_files([
    "rootfs/opt/ic/share/ic.json5.template",
])

urls_test(
    name = "upload_guestos_test",
    inputs = [":upload_guestos"],
)

# I have no clue why I cannot use these labels directly in the data section of the
# python binary below. When I try to, the files simply do not get added to the
# runfiles of the executable.
genrule(
    name = "version_wrap",
    srcs = [":version.txt"],
    outs = [":version.txt.wrapped"],
    cmd = "cat $(location version.txt) > \"$@\"",
)

genrule(
    name = "hash_wrap",
    srcs = [":disk.img.tar.zstd.sha256"],
    outs = [":disk.img.tar.zstd.sha256.wrapped"],
    cmd = "cat $(location disk.img.tar.zstd.sha256) > \"$@\"",
)

py_binary(
    name = "launch_single_vm",
    srcs = [
        ":scripts/launch_single_vm.py",
        "//ic-os/guestos/tests:ictools.py",
    ],
    data = [
        ":disk.img.tar.zstd.sha256.wrapped",
        ":upload_guestos_disk.img.tar.zstd",
        ":version.txt.wrapped",
        "//rs/prep:ic-prep",
    ],
    tags = ["manual"],
)
