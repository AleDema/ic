load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")


rust_library(
    name = "ckdoge_minter_lib",
    srcs = glob(
        ["src/**"],
        exclude = ["src/main.rs"],
    ),
    crate_features = [],
    crate_name = "ic_ckdoge_minter",
    proc_macro_deps = [
        # Keep sorted.
    ],
    version = "0.1.0",
    deps = [
        # Keep sorted.
        "//packages/icrc-ledger-types:icrc_ledger_types",
        "//rs/bitcoin/ckbtc/minter:ckbtc_minter_lib",
        "@crate_index//:candid",
        "@crate_index//:serde",
    ],
)

[
    rust_canister(
    name = name,
    srcs = ["src/main.rs"],
    compile_data = [":ckdoge_minter.did"],
    crate_features = features,
    crate_name = "ic_ckdoge_minter_canister",
    proc_macro_deps = [
        # Keep sorted.
    ],
    rustc_env = {
        "CKDOGE_MINTER_DID_PATH": "$(execpath :ckdoge_minter.did)",
    },
    service_file = ":ckdoge_minter.did",
    deps = [
        # Keep sorted.
        ":ckdoge_minter_lib",
        "//rs/bitcoin/ckbtc/minter:ckbtc_minter_lib",
        "@crate_index//:candid",
        "@crate_index//:ic-cdk",
    ],
    )
    for (name, features) in [
        # Production version without debug assertions.
        (
            "ckdoge_minter",
            [],
        ),
        # Test version with internal consistency checks.
        (
            "ckdoge_minter_debug",
            ["self_check"],
        ),
    ]
]
