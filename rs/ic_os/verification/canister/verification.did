type CertTableEntry = record { cert_type : opt CertType; data : blob };

type CertType = variant { ARK; ASK; CRL; VCEK; VLEK; OTHER : record {} };

type FetchAttestationTokenRequest = record { tls_public_key : blob };

type FetchAttestationTokenResponse = record { attestation_token : blob };

type GenerateAttestationTokenChallenge = record { nonce : blob };

type GenerateTlsCertificateRequest = record {
  tls_public_key_pem : text;
  sev_attestation_report : SevAttestationReport;
  nonce : blob;
};

type InitiateGenerateAttestationTokenRequest = record {
  tls_public_key_pem : text
};

type InitiateGenerateAttestationTokenResponse = record {
  challenge : GenerateAttestationTokenChallenge;
};

type FetchAttestationTokenResult = variant {
  Ok : FetchAttestationTokenResponse;
  Err : VerificationError;
};

type GenerateTlsCertificateResponse = record {
  tls_certificate_pem : text
};

type GenerateTlsCertificateResult = variant {
  Ok : GenerateTlsCertificateResponse;
  Err : VerificationError
};

type InitiateGenerateAttestationTokenResult = variant {
  Ok : InitiateGenerateAttestationTokenResponse;
  Err : VerificationError;
};

type SevAttestationReport = record {
  attestation_report : blob;
  certificates : vec CertTableEntry;
};

type VerificationError = record {
  detail : opt VerificationErrorDetail;
  message : text;
};

type VerificationErrorDetail = variant {
  Internal : record { message: text };
  InvalidNonce : reserved;
  AttestationTokenNotFound : reserved;
  NonceNotFound : reserved;
  UnsupportedTlsKey : record { message: text };
  InvalidAttestationReport : record { message: text };
  NonceTooOld : reserved;
};

service : {
  generate_tls_certificate : (GenerateTlsCertificateRequest) -> (GenerateTlsCertificateResult);
  initiate_generate_attestation_token : (InitiateGenerateAttestationTokenRequest) -> (InitiateGenerateAttestationTokenResult);
}
