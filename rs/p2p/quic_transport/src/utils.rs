//! Quic Transport utilities.
//!
//! Contains the actual wire format used for messages.
//! Request encoding of Request<Bytes> into HttpRequest protobuf.
//! Response encoding Response<Bytes> into HttpResponse protobuf.
use std::{
    cmp::Reverse,
    collections::{BTreeMap, BinaryHeap, HashMap},
    time::Instant,
};

use anyhow::{anyhow, Context};
use axum::{
    body::{Body, HttpBody},
    extract::State,
    http::{Method, Request, Response, Version},
    middleware::Next,
};
use bytes::{Buf, BufMut, Bytes, BytesMut};
use ic_protobuf::transport::v1 as pb;
use prost::Message;
use quinn::{Chunk, RecvStream, SendStream, VarInt, WriteError};
use reed_solomon_erasure::ReedSolomon;

use crate::metrics::QuicTransportMetrics;

/// On purpose the value is big, otherwise there is risk of not processing important consensus messages.
/// E.g. summary blocks generated by the consensus protocol for 40 node subnet can be bigger than 5MB.
const MAX_MESSAGE_SIZE_BYTES: usize = 128 * 1024 * 1024;

#[derive(Debug, Clone, Copy)]
struct EcHeader {
    len: u32,
    scheme: (u32, u32),
    padding: u32,
}

#[derive(Default)]
struct Assembler {
    header: Option<EcHeader>,
    partial_messages: HashMap<usize, BinaryHeap<(Reverse<usize>, Bytes)>>,
    full_messages: BTreeMap<usize, Bytes>,
}

impl Assembler {
    const CHUNK_SIZE: usize = 1280;
    const EC_HEADER_SIZE: usize = 16;
    const MSG_SIZE: usize = Self::CHUNK_SIZE + Self::EC_HEADER_SIZE;
    fn add_chunk(&mut self, offset: usize, mut bytes: Bytes) -> bool {
        let mut pos = offset;
        while !bytes.is_empty() {
            let ec_idx = pos / Self::MSG_SIZE;
            // offset is at chunk boundary
            let c = if pos % Self::MSG_SIZE == 0 {
                if bytes.len() < Self::MSG_SIZE {
                    pos += bytes.len();
                    let b = bytes.split_to(bytes.len());
                    assert!(bytes.is_empty());
                    b
                } else {
                    pos += Self::MSG_SIZE;
                    assert!(pos % Self::MSG_SIZE == 0);
                    let chunk = bytes.split_to(Self::MSG_SIZE);
                    assert!(chunk.len() == Self::MSG_SIZE);
                    chunk
                }
            } else {
                let dist_to_next_ec = Self::MSG_SIZE - (pos % Self::MSG_SIZE);
                if bytes.len() < dist_to_next_ec {
                    pos += bytes.len();
                    let b = bytes.split_to(bytes.len());
                    assert!(bytes.is_empty());
                    b
                } else {
                    pos += dist_to_next_ec;
                    assert!(pos % Self::MSG_SIZE == 0);
                    bytes.split_to(dist_to_next_ec)
                }
            };
            let e = self.partial_messages.entry(ec_idx).or_default();
            e.push((Reverse(pos), c));

            let sum = e.iter().map(|c| c.1.len()).sum::<usize>();
            assert!(sum <= Self::MSG_SIZE);

            // Entry contains complete chunk
            if sum == Self::MSG_SIZE {
                let mut bm = BytesMut::new();
                while let Some((Reverse(_), s)) = e.pop() {
                    bm.extend_from_slice(&s);
                }

                let mut ec_header = bm.split_off(bm.len() - Self::EC_HEADER_SIZE);
                if self.header.is_none() {
                    self.header = Some(EcHeader {
                        len: ec_header.get_u32(),
                        scheme: (ec_header.get_u32(), ec_header.get_u32()),
                        padding: ec_header.get_u32(),
                    });
                }
                self.full_messages.insert(ec_idx, bm.freeze());
            }
        }
        self.header
            .is_some_and(|h| h.scheme.0 <= decoded_map.len() as u32)
    }
}

async fn assemble(mut recv_stream: RecvStream) -> Result<Bytes, anyhow::Error> {
    let chunk_size = 1280;
    let ec_header_size = 4 + 4 + 4 + 4;
    let tot_ec_size = chunk_size + ec_header_size;

    let mut header = None;

    let mut chunk_map: HashMap<usize, BinaryHeap<_>> = HashMap::new();
    let mut decoded_map: BTreeMap<usize, Bytes> = BTreeMap::new();
    while let Some(Chunk { offset, mut bytes }) = recv_stream
        .read_chunk(MAX_MESSAGE_SIZE_BYTES, false)
        .await?
    {
        let mut pos = offset as usize;
        while !bytes.is_empty() {
            let ec_idx = pos / tot_ec_size;
            // offset is at chunk boundary
            let c = if pos % tot_ec_size == 0 {
                if bytes.len() < tot_ec_size {
                    pos += bytes.len();
                    let b = bytes.split_to(bytes.len());
                    assert!(bytes.is_empty());
                    b
                } else {
                    pos += tot_ec_size;
                    assert!(pos % tot_ec_size == 0);
                    bytes.split_to(tot_ec_size)
                }
            } else {
                let dist_to_next_ec = tot_ec_size - (pos % tot_ec_size);
                if bytes.len() < dist_to_next_ec {
                    pos += bytes.len();
                    let b = bytes.split_to(bytes.len());
                    assert!(bytes.is_empty());
                    b
                } else {
                    pos += dist_to_next_ec;
                    assert!(pos % tot_ec_size == 0);
                    bytes.split_to(dist_to_next_ec)
                }
            };
            let e = chunk_map.entry(ec_idx).or_default();
            e.push((Reverse(pos), c));

            let sum = e.iter().map(|c| c.1.len()).sum::<usize>();
            assert!(sum <= tot_ec_size);
            if sum == tot_ec_size {
                let mut bm = BytesMut::new();
                while let Some((Reverse(_), s)) = e.pop() {
                    bm.extend_from_slice(&s);
                }

                let mut ec_header = bm.split_off(bm.len() - ec_header_size);
                if header.is_none() {
                    header = Some(EcHeader {
                        len: ec_header.get_u32(),
                        scheme: (ec_header.get_u32(), ec_header.get_u32()),
                        padding: ec_header.get_u32(),
                    });
                }
                decoded_map.insert(ec_idx, bm.freeze());
            }
        }

        let h1 = header.clone();
        if h1.is_some_and(|h| h.scheme.0 <= decoded_map.len() as u32) {
            let header = h1.unwrap();
            let shards: (Vec<(usize, Bytes)>, Vec<(usize, Bytes)>) =
                decoded_map
                    .into_iter()
                    .fold((Vec::new(), Vec::new()), |mut acc, x| {
                        assert!(x.1.len() == chunk_size);
                        if x.0 < header.scheme.0 as usize {
                            acc.0.push(x);
                        } else {
                            println!(" header {header:?}");
                            println!(" d {} {}", x.0, x.0 - header.scheme.0 as usize);
                            acc.1.push((x.0 - header.scheme.0 as usize, x.1));
                        }
                        acc
                    });
            println!("shards 0 {} shards 1 {}", shards.0.len(), shards.1.len());
            let now = Instant::now();
            let mut v: Vec<_> = if shards.0.len() == header.scheme.0 as usize {
                shards.0.into_iter().map(|(i, b)| (i, b.to_vec())).collect()
            } else {
                println!("reconstructing");
                reed_solomon_simd::decode(
                    header.scheme.0 as usize,
                    header.scheme.1 as usize,
                    shards.0,
                    shards.1,
                )
                .unwrap()
                .into_iter()
                .collect()
            };
            println!("after decode{:?}", now.elapsed());
            v.sort_unstable();
            println!("after sort {:?}", now.elapsed());
            let data: Vec<u8> = v.into_iter().map(|x| x.1).flatten().collect();
            let mut data = Bytes::from(data);
            println!("after asse {:?}", now.elapsed());
            let a = data.split_to(data.len() - header.padding as usize);
            println!("raw send {a:?}");
            assert!(a.len() == header.len as usize);

            recv_stream.stop(VarInt::from_u32(1)).unwrap();
            return Ok(a);
        }
    }
    panic!("ah")
}

async fn disassemble(
    send_stream: &mut SendStream,
    mut bytes: Vec<u8>,
) -> Result<(), anyhow::Error> {
    println!("raw send {bytes:?}");
    let len_bytes = bytes.len();
    let chunk_size = 1280;
    let padding = chunk_size - bytes.len() % chunk_size;
    bytes.resize(chunk_size * bytes.len().div_ceil(chunk_size), 0);
    assert!(bytes.len() % chunk_size == 0);
    let data_shards = std::cmp::max(1, bytes.len() / chunk_size);
    let parity_shards = std::cmp::max(1, data_shards / 2);
    bytes.resize(data_shards * chunk_size, 0);
    let shards: Vec<_> = bytes.chunks(chunk_size).collect();
    let parity = reed_solomon_simd::encode(data_shards, parity_shards, &shards).unwrap();
    let mut ecs: Vec<Bytes> = shards
        .into_iter()
        .chain(parity.iter().map(|x| x.as_slice()))
        .map(|x| {
            let mut b = BytesMut::new();
            b.extend_from_slice(x);
            b.put_u32(len_bytes as u32);
            b.put_u32(data_shards as u32);
            b.put_u32(parity_shards as u32);
            b.put_u32(padding as u32);
            b.freeze()
        })
        .collect();
    let write_result = send_stream.write_all_chunks(&mut ecs).await;
    match write_result {
        Ok(()) => {}
        Err(WriteError::Stopped(int)) if int == VarInt::from_u32(1) => {}
        Err(e) => return Err(e.into()),
    };
    let finish_result = send_stream.finish().await;
    match finish_result {
        Ok(()) => Ok(()),
        Err(WriteError::Stopped(int)) if int == VarInt::from_u32(1) => Ok(()),
        Err(e) => Err(e.into()),
    }
}

pub(crate) async fn read_request(recv_stream: RecvStream) -> Result<Request<Body>, anyhow::Error> {
    let mut raw_msg = assemble(recv_stream)
        .await
        .with_context(|| "Failed to read request from the stream.")?;

    let request_proto =
        pb::HttpRequest::decode(&mut raw_msg).with_context(|| "Failed to decode http request.")?;

    let mut request = Request::builder()
        .method(match pb::HttpMethod::try_from(request_proto.method) {
            Ok(pb::HttpMethod::Get) => Method::GET,
            Ok(pb::HttpMethod::Post) => Method::POST,
            Ok(pb::HttpMethod::Put) => Method::PUT,
            Ok(pb::HttpMethod::Delete) => Method::DELETE,
            Ok(pb::HttpMethod::Head) => Method::HEAD,
            Ok(pb::HttpMethod::Options) => Method::OPTIONS,
            Ok(pb::HttpMethod::Connect) => Method::CONNECT,
            Ok(pb::HttpMethod::Patch) => Method::PATCH,
            Ok(pb::HttpMethod::Trace) => Method::TRACE,
            Ok(pb::HttpMethod::Unspecified) => {
                return Err(anyhow!("received http method unspecified."));
            }
            Err(e) => {
                return Err(anyhow!("received invalid method {}", e));
            }
        })
        .version(Version::HTTP_3)
        .uri(request_proto.uri);
    for h in request_proto.headers {
        let pb::HttpHeader { key, value } = h;
        request = request.header(key, value);
    }
    // This consumes the body without requiring allocation or cloning the whole content.
    let body_bytes = Bytes::from(request_proto.body);
    request
        .body(Body::from(body_bytes))
        .with_context(|| "Failed to build request.")
}

pub(crate) async fn read_response(
    recv_stream: RecvStream,
) -> Result<Response<Bytes>, anyhow::Error> {
    let mut raw_msg = assemble(recv_stream)
        .await
        .with_context(|| "Failed to read response from the stream.")?;

    let response_proto = pb::HttpResponse::decode(&mut raw_msg)
        .with_context(|| "Failed to decode response header.")?;

    let status: u16 = match response_proto.status_code.try_into() {
        Ok(status) => status,
        Err(e) => {
            return Err(anyhow!(
                "Received invalid status code {} {}",
                response_proto.status_code,
                e
            ))
        }
    };

    let mut response = Response::builder().status(status).version(Version::HTTP_3);
    for h in response_proto.headers {
        let pb::HttpHeader { key, value } = h;
        response = response.header(key, value);
    }
    // This consumes the body without requiring allocation or cloning the whole content.
    let body_bytes = Bytes::from(response_proto.body);
    response
        .body(body_bytes)
        .with_context(|| "Failed to build response.")
}

pub(crate) async fn write_request(
    mut send_stream: SendStream,
    request: Request<Bytes>,
) -> Result<(), anyhow::Error> {
    let (parts, body) = request.into_parts();

    let request_proto = pb::HttpRequest {
        uri: String::from(parts.uri.path()),
        headers: parts
            .headers
            .into_iter()
            .filter_map(|(k, v)| {
                k.map(|k| pb::HttpHeader {
                    key: k.to_string(),
                    value: v.as_bytes().to_vec(),
                })
            })
            .collect(),
        method: match parts.method {
            Method::GET => pb::HttpMethod::Get.into(),
            Method::POST => pb::HttpMethod::Post.into(),
            Method::PUT => pb::HttpMethod::Put.into(),
            Method::DELETE => pb::HttpMethod::Delete.into(),
            Method::HEAD => pb::HttpMethod::Head.into(),
            Method::OPTIONS => pb::HttpMethod::Options.into(),
            Method::CONNECT => pb::HttpMethod::Connect.into(),
            Method::PATCH => pb::HttpMethod::Patch.into(),
            Method::TRACE => pb::HttpMethod::Trace.into(),
            _ => return Err(anyhow!("invalid method")),
        },
        body: body.into(),
    };

    let res = request_proto.encode_to_vec();
    disassemble(&mut send_stream, res).await
}

pub(crate) async fn write_response(
    mut send_stream: &mut SendStream,
    response: Response<Body>,
) -> Result<(), anyhow::Error> {
    let (parts, body) = response.into_parts();
    // Check for axum error in body
    // TODO: Think about this. What is the error that can happen here?
    let body = axum::body::to_bytes(body, MAX_MESSAGE_SIZE_BYTES)
        .await
        .with_context(|| "Failed to read response from body.")?;
    let response_proto = pb::HttpResponse {
        status_code: parts.status.as_u16().into(),
        headers: parts
            .headers
            .into_iter()
            .filter_map(|(k, v)| {
                k.map(|k| ic_protobuf::transport::v1::HttpHeader {
                    key: k.to_string(),
                    value: v.as_bytes().to_vec(),
                })
            })
            .collect(),
        body: body.into(),
    };
    let res = response_proto.encode_to_vec();
    disassemble(&mut send_stream, res).await
}

/// Axum middleware to collect metrics
pub(crate) async fn collect_metrics(
    State(state): State<QuicTransportMetrics>,
    request: Request<Body>,
    next: Next,
) -> axum::response::Response {
    state
        .request_handle_bytes_received_total
        .with_label_values(&[request.uri().path()])
        .inc_by(request.body().size_hint().lower());
    let _timer = state
        .request_handle_duration_seconds
        .with_label_values(&[request.uri().path()])
        .start_timer();
    let out_counter = state
        .request_handle_bytes_sent_total
        .with_label_values(&[request.uri().path()]);
    let response = next.run(request).await;
    out_counter.inc_by(response.body().size_hint().lower());
    response
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn tt() {
        println!("ola");
    }
}
