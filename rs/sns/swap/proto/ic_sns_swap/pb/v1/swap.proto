// This file contains the Protobuf definitions for the 'swap' canister
// which can be used for an initial token swap (a.k.a. token sale or
// single price auction) to decentralise an application running on the
// Internet Computer, turning it into a decentralized application or
// "dapp". See the documentation of the `Swap` message for a high
// level overview.

syntax = "proto3";

package ic_sns_swap.pb.v1;

import "ic_base_types/pb/v1/types.proto";


// Lifecycle states of the swap canister. The details of their meanings
// are provided in the documentation of the `Swap` message.
enum Lifecycle {
  // The canister is incorrectly configured. Not a real lifecycle state.
  LIFECYCLE_UNSPECIFIED = 0;
  // In this state, the canister is correctly initialized. Once SNS
  // tokens have been transferred to the swap canister's account on
  // the SNS ledger, a call to `open` with valid parameters will start
  // the swap.
  LIFECYCLE_PENDING     = 1;
  // In this state, prospective buyers can register for the token
  // swap. The swap will be committed when the target (max) ICP has
  // been reached or the swap's due date/time occurs, whichever
  // happens first.
  LIFECYCLE_OPEN        = 2;
  // The token price has been determined; on a call to `finalize`,
  // buyers receive their SNS neurons and the SNS governance canister
  // receives the ICP.
  LIFECYCLE_COMMITTED   = 3;
  // The token swap has been aborted, e.g., because the due date/time
  // occured before the minimum (reserve) amount of ICP has been
  // retrieved. On a call to `finalize`, participants get their ICP refunded.
  LIFECYCLE_ABORTED     = 4;
}


// The 'swap' canister smart contract is used to perform a type of
// single-price auction (SNS/ICP) of one token type SNS for another token
// type ICP (this is typically ICP, but can be treated as a variable) at a
// specific date/time in the future.
//
// Such a single-price auction is typically used to decentralize an SNS,
// i.e., to ensure that a sufficient number of governance tokens of the
// SNS are distributed among different participants.
//
// State (lifecycle) diagram for the swap canister's state.
//
// ```text
//                                  sufficient_participantion && (swap_due || icp_target_reached)
// PENDING ------------------> OPEN ------------------------------------------------------------> COMMITTED
//                             |                                                                  |
//                             | swap_due && not sufficient_participation                         |
//                             v                                                                  v
//                             ABORTED -------------------------------------------------------> <DELETED>
// ```
//
// Here `sufficient_participation` means that the minimum number of
// participants `min_participants` has been reached, each contributing
// between `min_participant_icp_e8s` and `max_participant_icp_e8s`, and
// their total contributions add up to at least `min_icp_e8s` and at most
// `max_icp_e8s`.
//
//
// The dramatis personae of the 'swap' canister are as follows:
//
// - The swap canister itself.
//
// - The NNS governance canister - which is the only principal that can open the swap.
//
// - The governance canister of the SNS to be decentralized.
//
// - The ledger canister of the SNS, i.e., the ledger of the token type
//   being sold.
//
// - The ICP ledger cansiter, or more generally of the base currency of
//   the auction.
//
// - The root canister of the SNS to control aspects of the SNS not
//   controlled by the SNS governance canister.
//
// When the swap canister is initialized, it must be configured with
// the canister IDs of the other participant canisters.
//
// The next step is to provide SNS tokens for the swap. This normally
// happens when the canister is in the PENDING state, and the amount
// is validated in the call to `open`.
//
// The request to open the swap has to originate from the NNS governance
// cansiter. The request specifies the parameters of the swap, i.e., the
// date/time at which the token swap will take place, the minimal number
// of participants, the minimum number of base tokens (ICP) of each
// paricipant, as well as the minimum and maximum number (reserve and
// target) of base tokens (ICP) of the swap.
//
// Step 0. The canister is created, specifying the initalization
// parameters, which are henceforth fixed for the lifetime of the
// canister.
//
// Step 1 (State PENDING). The swap canister is loaded with the right
// amount of SNS tokens. A call to `open` will then transition the
// canister to the OPEN state.
//
// Step 2. (State OPEN). The field `params` is received as an argument
// to the call to `open` and is henceforth immutable. The amount of
// SNS token is verified against the SNS ledger. The swap is open for
// paricipants who can enter into the auction with a number of ICP
// tokens until either the target amount has been reached or the
// auction is due, i.e., the date/time of the auction has been
// reached. The transition to COMMITTED or ABORTED happens
// automatically (on the canister heartbeat) when the necessary
// conditions are fulfilled.
//
// Step 3a. (State COMMITTED). Tokens are allocated to partcipants at
// a single clearing price, i.e., the number of SNS tokens being
// offered divided by the total number of ICP tokens contributed to
// the swap. In this state, a call to `finalize` will create SNS
// neurons for each participant and transfer ICP to the SNS governance
// canister. The call to `finalize` does not happen automatically
// (i.e., on the canister heartbeat) so that there is a caller to
// respond to with potential errors.
//
// Step 3b. (State ABORTED). If the parameters of the swap have not
// been satisfied before the due date/time, the swap is aborted and
// the ICP tokens transferred back to their respective owners.
//
// The 'swap' canister can be deleted when all tokens registered with the
// 'swap' canister have been disbursed to their rightful owners.
//
// The logic of this canister is based on the following principles.
//
// * Message fields are never removed.
//
// * Integer and enum fields can only have their values increase (with
// one exception, viz., the timestamp field for the start of a
// transfer is reset if the transfer fails).
//
// Data flow for the community fund.
//
// - A SNS is created.
// - Proposal to open a decentralization sale for the SNS is submitted to the NNS.
//   - ProposalToOpenDecentralizationSale
//     - The Community Fund investment amount
//     - The parameters of the decentralization sale (`Params`).
//   - Call to open swap:
//     - Parameters
//     - CF Investments
//     - NNS Proposal ID of the NNS proposal to open the swap.
// - On accept of proposal to open decentralization sale:
//   - Compute the maturity contribution of each CF neuron and deduct this amount from the CF neuron.
//   - The swap is informed about the corresponding amount of ICP (`CfParticipant`) in the call to open.
//   - Call back to NNS governance after the swap is committed or aborted:
//     - On committed swap:
//       - Ask the NNS to mint the right amount of ICP for the SNS corresponding to the CF investment (the NNS governance canister keeps track of the total).
//     - On aborted swap:
//       - Send the information about CF participants (`CfParticipant`) back to NNS governance which will return it to the corresponding neurons. Assign the control of the dapp (now under the SNS control) back to the specified principals.
// - On reject of proposal to open decentralization sale:
//   - Assign the control of the dapp (now under the SNS control) back to the specified principals.
message Swap {
  // Was 'state'.
  reserved 2;
  // The current lifecycle of the swap.
  Lifecycle lifecycle = 3;
  // Specified on creation. That is, always specified and immutable.
  Init init = 1;
  // Specified in the transition from PENDING to OPEN and immutable
  // thereafter.
  Params params = 4;
  // Community fund participation.  Specified in the transition from
  // PENDING to OPEN and immutable thereafter.
  repeated CfParticipant cf_participants = 5;
  // Empty in the PENDING state. In the OPEN state, new buyers can be
  // added and existing buyers can increase their bids. In the
  // COMMITTED and ABORTED states, the amount cannot be modified, and
  // the transfer timestamps are filled in.
  //
  // The key is the textual representation of the buyer's principal
  // and the value represents the bid.
  map<string, BuyerState> buyers = 6;
  // When the swap is committed, this field is initialized according
  // to the outcome of the swap.
  repeated SnsNeuronRecipe neuron_recipes = 7;
  // This field represents the request to NNS governance to mint ICP
  // for SNS governance on behalf of the community fund investments.
  TransferableAmount cf_minting = 8;
}

// The initialisation data of the canister. Always specified on
// canister creation, and cannot be modified afterwards.
//
// If the initialization parameters are incorrect, the swap will
// immediately be aborted.
message Init {
  reserved 5, 7 to 10;
  // The canister ID of the NNS governance canister. This is the only
  // principal that can open the swap.
  string nns_governance_canister_id = 1;

  // The canister ID of the governance canister of the SNS that this
  // token swap pertains to.
  string sns_governance_canister_id = 2;

  // The ledger canister of the SNS.
  string sns_ledger_canister_id = 3;

  // The ledger canister for the base token, typically ICP. The base
  // token is typically ICP, but this assumption is not used anywhere,
  // so, in principle, any token type can be used as base token.
  string icp_ledger_canister_id = 4;

  // Analogous to `sns_governance_canister_id`, but for the "root"
  // canister instead of the governance canister.
  string sns_root_canister_id = 12;
  
  // If the swap is aborted, control of the canister(s) should be set to these
  // principals. Must not be empty.
  repeated string fallback_controller_principal_ids = 11;
}

// Represents one NNS neuron from the community fund participating in this swap.
message CfNeuron {
  // The NNS neuron ID of the participating neuron.
  fixed64 nns_neuron_id = 1;
  // The amount of ICP that the community fund invests associated
  // with this neuron.
  uint64 amount_icp_e8s = 2;
}

// Represent CF participant, possibly with several neurons.
message CfParticipant {
  // The principal that can vote on behalf of these CF neurons.
  string hotkey_principal = 1;
  // Information about the participating neurons. Must not be empty.
  repeated CfNeuron cf_neurons = 2;
}

// The parameters of the swap, provided in the call to 'open'. Cannot
// be modified after the call to 'open'.
message Params {
  // The minimum number of buyers that must participate for the swap
  // to take place. Must be greater than zero.
  uint32 min_participants = 1;
  
  // The total number of ICP that is required for this token swap to
  // take place. This number divided by the number of SNS tokens being
  // offered gives the seller's reserve price for the swap, i.e., the
  // minimum number of ICP per SNS tokens that the seller of SNS
  // tokens is willing to accept. If this amount is not achieved, the
  // swap will be aborted (instead of committed) when the due date/time
  // occurs. Must be smaller than or equal to `max_icp_e8s`.
  uint64 min_icp_e8s = 2;  

  // The number of ICP that is "targetted" by this token swap. If this
  // amount is achieved, the swap will be triggered immediately,
  // without waiting for the due date (`end_timestamp_seconds`). This
  // means that an investor knows the minimum number of SNS tokens
  // received per invested ICP. Must be at least `min_participants *
  // min_participant_icp_e8s`.
  uint64 max_icp_e8s = 3;
  
  // The minimum amount of ICP that each buyer must contribute to
  // participate. Must be greater than zero.
  uint64 min_participant_icp_e8s = 4;

  // The maximum amount of ICP that each buyer can contribute. Must be
  // greater than or equal to `min_participant_icp_e8s` and less than
  // or equal to `max_icp_e8s`. Can effectively be disabled by
  // setting it to `max_icp_e8s`.
  uint64 max_participant_icp_e8s = 5;

  // The date/time when the swap is due, i.e., it will automatically
  // end and commit or abort depending on whether the parameters have
  // been fulfilled.
  uint64 swap_due_timestamp_seconds = 6;

  // The number of tokens (of `init.sns_ledger_canister_id`) that are
  // being offered. The tokens are held in escrow for the the SNS
  // governance canister.
  //
  // Invariant for the OPEN state:
  // ```text
  // state.sns_token_e8s <= token_ledger.balance_of(<swap-canister>)
  // ```
  uint64 sns_token_e8s = 7;
}

message TransferableAmount {
  uint64 amount_e8s = 1;
  uint64 transfer_start_timestamp_seconds = 2;
  uint64 transfer_success_timestamp_seconds = 3;
}

message BuyerState {
  reserved 1 to 4;
  // The amount of ICP accepted from this buyer. ICP is accepted by
  // first making a ledger transfer and then calling the method
  // `refresh_buyer_token_e8s`.
  //
  // Can only be set when a buyer state record for a new buyer is
  // created, which can only happen when the lifecycle state is
  // `Open`. Must be at least `min_participant_icp_e8s`, and at most
  // `max_participant_icp_e8s`.
  //
  // Invariant between canisters in the OPEN state:
  //
  //  ```text
  //  icp.amount_e8 <= icp_ledger.balance_of(subaccount(swap_canister, P)),
  //  ```
  //
  // where `P` is the principal ID associated with this buyer's state.
  //
  // ownership
  // * PENDING - a `BuyerState` cannot exists
  // * OPEN - owned by the buyer, cannot be transferred out
  // * COMMITTED - owned by the SNS governance canister, can be transferred out
  // * ABORTED - owned by the buyer, can be transferred out
  TransferableAmount icp = 5;
}

// Information about a direct investor.
message DirectInvestment {
  string buyer_principal = 1;  
}

// Information about a community fund investment. The NNS Governance
// canister is the controller of these neurons.
message CfInvestment {
  string hotkey_principal = 1;
  fixed64 nns_neuron_id = 2;
}

message TimeWindow {
  uint64 start_timestamp_seconds = 1;
  uint64 end_timestamp_seconds = 2;
}

message SnsNeuronRecipe {
  TransferableAmount sns = 1;
  oneof investor {
    DirectInvestment direct = 2;
    CfInvestment community_fund = 3;
  }
}



//
// === Request/Response Messages
//

message OpenRequest {
  // The parameters of the swap.
  Params params = 1;  
  // Community fund participation.
  repeated CfParticipant cf_participants = 2;
}

message OpenResponse {}

message GetCanisterStatusRequest {
}

// TODO: introduce a limits on the number of buyers to include?
message GetStateRequest {}
message GetStateResponse {
  Swap swap = 1;
  DerivedState derived = 2;
}

message GetBuyerStateRequest {
  // The principal_id of the user who's buyer state is being queried for.
  ic_base_types.pb.v1.PrincipalId principal_id = 1;
}

message GetBuyerStateResponse {
  BuyerState buyer_state = 1;
}

message GetBuyersTotalRequest {}

message GetBuyersTotalResponse {
  // The total amount of ICP deposited by buyers.
  uint64 buyers_total  = 1;
}

message DerivedState {
  uint64 buyer_total_icp_e8s = 1;
  // Current approximate rate SNS tokens per ICP.
  float sns_tokens_per_icp = 2;
}

message SetOpenTimeWindowRequest {
  // Duration must be between 1 and 90 days. The TimeWindow's
  // end time but be greater than or equal to the TimeWindow's
  // start time.
  TimeWindow open_time_window = 1;
}
// Response if setting the open time window succeeded.
message SetOpenTimeWindowResponse {}

// Informs the swap canister that a buyer has sent funds to participate in the
// swap.
//
// Only in lifecycle state 'open'.
message RefreshBuyerTokensRequest {
  // If not specified, the caller is used.
  string buyer = 1;
}
message RefreshBuyerTokensResponse {
  uint64 icp_accepted_partipation_e8s = 1;
  uint64 icp_ledger_account_balance_e8s = 2;
}

// Once a swap is committed or aborted, the tokens need to be
// distributed, and, if the swap was committed, neurons created.
message FinalizeSwapRequest {}

message FinalizeSwapResponse {
  SweepResult sweep_icp = 1;
  SweepResult sweep_sns = 2;
  SweepResult create_neuron = 3;
  SetModeCallResult sns_governance_normal_mode_enabled = 4;
  SetDappControllersCallResult set_dapp_controllers_result = 5;
}

message SweepResult {
  uint32 success = 1;
  uint32 failure = 2;
  uint32 skipped = 3;
}

// Analogous to Rust type Result<SetModeResponse, CanisterCallError>.
message SetModeCallResult {
  reserved "ok";
  reserved 1;
  oneof possibility {
    // TODO ic_sns_governance.pb.v1.SetModeResponse ok = 1;
    CanisterCallError err = 2;
  }
}

// Analogous to Rust type Result<SetModeResponse, CanisterCallError>.
message SetDappControllersCallResult {
  oneof possibility {
    // TODO(NNS1-1589): Uncomment.
    // ic_sns_root.pb.v1.
    SetDappControllersResponse ok = 1;
    CanisterCallError err = 2;
  }
}

// TODO(NNS1-1589): Delete these.
message SetDappControllersRequest {
  repeated ic_base_types.pb.v1.PrincipalId controller_principal_ids = 1;
}
message SetDappControllersResponse {
  message FailedUpdate {
    ic_base_types.pb.v1.PrincipalId dapp_canister_id = 1;
    CanisterCallError err = 2;
  }
  repeated FailedUpdate failed_updates = 1;
}

message CanisterCallError {
  optional int32 code = 1;
  string description = 2;
}

// Request a refund of tokens that were sent to the canister in
// error. The refund is always on the ICP ledger, from this canister's
// subaccount of the caller to the account of the caller.
message ErrorRefundIcpRequest {
  // The amount of ICP to transfer.
  uint64 icp_e8s = 1;
  // If specified, use this as 'fee' instead of the default.
  uint64 fee_override_e8s = 2;
}

message ErrorRefundIcpResponse {
}
