//! This module contains functionality to simulate a subnet's
/// network, RTT and Packet Loss, during system tests.
use super::{
    super::{driver::test_env_api::SshSession, util::get_config},
    test_env_api::{IcNodeContainer, SubnetSnapshot},
};
use std::{time::Duration, vec::Vec};

pub trait SimulateNetwork<NetworkSettings> {
    fn apply_network_settings(&self, network_settings: NetworkSettings);
}

impl SimulateNetwork<ProductionSubnetTopology> for SubnetSnapshot {
    fn apply_network_settings(&self, network_settings: ProductionSubnetTopology) {
        let nodes: Vec<_> = self.nodes().collect();

        assert_eq!(
            nodes.len(),
            network_settings.subnet_size(),
            "Subnet size must match the size of the simulated topology."
        );

        let subnet_size = network_settings.subnet_size();
        let mut tc_commands = Vec::<String>::with_capacity(subnet_size);

        let packet_loss = network_settings.packet_loss();
        let rtt = network_settings.rtt();

        for source_node in 0..subnet_size {
            let mut tc_command =
                String::from("sudo tc qdisc del dev enp1s0 root 2> /dev/null || true \n");
            tc_command.push_str("sudo tc qdisc add dev enp1s0 root handle 1: htb \n");
            tc_command.push_str(
                "sudo tc class add dev enp1s0 parent 1: classid 1:1 htb rate 2000Mbps \n",
            );

            for destination_node in 0..subnet_size {
                if source_node == destination_node {
                    continue;
                }
                let destination_ip = nodes[destination_node].get_ip_addr();
                // tc class id start at 1 and we already defined one above so we need to start from 2..
                let tc_class_id = destination_node + 2;
                tc_command.push_str(&format!(
                    "sudo tc class add dev enp1s0 parent 1:1 classid 1:{} htb rate 2000Mbps \n",
                    tc_class_id,
                ));
                tc_command.push_str(&format!(
                        "sudo tc qdisc add dev enp1s0 handle {}: parent 1:{} netem limit 10000000 loss {:.3}% delay {}ms \n",
                        tc_class_id,
                        tc_class_id,
                        packet_loss[(subnet_size-1) * source_node + destination_node].2 * 100.0,
                        (rtt[(subnet_size-1) * source_node + destination_node].2 * 1000.0 / 2.0) as u64
                    ));
                tc_command.push_str(&format!("sudo tc filter add dev enp1s0 protocol ipv6 parent 1: pref {} u32 match ip6 dst {destination_ip} flowid 1:{} \n", tc_class_id, tc_class_id ));
            }
            tc_command.push_str(
                "sudo tc class add dev enp1s0 parent 1:1 classid 1:999 htb rate 2000Mbps \n",
            );
            tc_command.push_str(
                "sudo tc qdisc add dev enp1s0 parent 1:999 handle 999: netem limit 10000000 \n",
            );
            tc_command.push_str("sudo tc filter add dev enp1s0 protocol ipv6 parent 1: pref 999 u32 match ip6 dst ::/0 flowid 1:999 \n");
            tc_commands.push(tc_command);
        }

        nodes.iter().enumerate().for_each(|(idx, node)| {
            let session = node
                .block_on_ssh_session()
                .expect("Failed to ssh into node");
            node.block_on_bash_script_from_session(&session, &tc_commands[idx])
                .expect("Failed to execute bash script from session");
        });
    }
}

impl SimulateNetwork<FixedNetworkSimulation> for SubnetSnapshot {
    fn apply_network_settings(&self, network_settings: FixedNetworkSimulation) {
        let nodes: Vec<_> = self.nodes().collect();

        const DEVICE_NAME: &str = "enp1s0"; // network interface name

        let cfg = get_config();
        let p2p_listen_port = cfg.transport.unwrap().listening_port;

        let bandwidth_mbit_per_sec = network_settings
            .bandwidth_mbit_per_sec
            .unwrap_or(100_000_000);
        let latency_ms = network_settings.latency.map(|d| d.as_millis()).unwrap_or(0);

        let packet_loss = network_settings.packet_loss.unwrap_or(0.0);
        assert!(
            (0.0..=1.0).contains(&packet_loss),
            "Packet loss must be between 0.0 and 1.0"
        );

        let packet_loss_percentage = format!("{:.3}", packet_loss);
        let command = format!(
            r#"set -euo pipefail
sudo tc qdisc del dev {DEVICE_NAME} root 2> /dev/null || true
sudo tc qdisc add dev {DEVICE_NAME} root handle 1: htb default 10
sudo tc class add dev {DEVICE_NAME} parent 1: classid 1:10 htb rate {bandwidth_mbit_per_sec}mbit ceil {bandwidth_mbit_per_sec}mbit
sudo tc qdisc add dev {DEVICE_NAME} parent 1:10 handle 10: netem delay {latency_ms}ms loss {packet_loss_percentage}% limit 10000000
sudo tc filter add dev {DEVICE_NAME} parent 1: protocol ipv6 prio 1 u32 match ip6 dport {p2p_listen_port} 0xFFFF flowid 1:10
sudo tc qdisc show dev {DEVICE_NAME}
"#,
        );

        nodes.iter().for_each(|node| {
            let session = node
                .block_on_ssh_session()
                .expect("Failed to ssh into node");
            node.block_on_bash_script_from_session(&session, &command)
                .expect("Failed to execute bash script from session");
        });
    }
}

#[derive(Default, Clone, Debug)]
pub struct FixedNetworkSimulation {
    packet_loss: Option<f64>,
    latency: Option<Duration>,
    bandwidth_mbit_per_sec: Option<u32>,
}

impl FixedNetworkSimulation {
    pub const fn new() -> Self {
        Self {
            packet_loss: None,
            latency: None,
            bandwidth_mbit_per_sec: None,
        }
    }

    /// Sets the packet loss in each direction in decimal form (0.0 to 1.0).
    pub const fn with_packet_loss(self, packet_loss: f64) -> Self {
        Self {
            packet_loss: Some(packet_loss),
            ..self
        }
    }

    pub const fn with_latency(self, latency: Duration) -> Self {
        Self {
            latency: Some(latency),
            ..self
        }
    }

    pub const fn with_bandwidth(self, bandwidth_mbit_per_sec: u32) -> Self {
        Self {
            bandwidth_mbit_per_sec: Some(bandwidth_mbit_per_sec),
            ..self
        }
    }
}

#[derive(Clone, Debug)]
pub enum ProductionSubnetTopology {
    LHG73,
    /// Canary subnet
    IO67,
    /// Internet Identity Subnet
    UZR34,
}

impl ProductionSubnetTopology {
    fn rtt(&self) -> Vec<(u64, u64, f64)> {
        match self {
            ProductionSubnetTopology::LHG73 => LHG_73_RTT.to_vec(),
            ProductionSubnetTopology::IO67 => IO67_RTT.to_vec(),
            ProductionSubnetTopology::UZR34 => UZR_34_RTT.to_vec(),
        }
    }

    fn packet_loss(&self) -> Vec<(u64, u64, f64)> {
        match self {
            ProductionSubnetTopology::LHG73 => LHG73_PACKET_LOSS.to_vec(),
            ProductionSubnetTopology::IO67 => IO67_PACKET_LOSS.to_vec(),
            ProductionSubnetTopology::UZR34 => UZR_34_PACKET_LOSS.to_vec(),
        }
    }

    fn subnet_size(&self) -> usize {
        match self {
            ProductionSubnetTopology::LHG73 => 13,
            ProductionSubnetTopology::IO67 => 13,
            ProductionSubnetTopology::UZR34 => 28,
        }
    }
}

/// Query:
/// https://victoria.ch1-obs1.dfinity.network/select/0/vmui/#/?g0.expr=sum+by+%28ic_node%2Cpeer%29+%28quic_transport_quinn_path_rtt_seconds%7Bic_subnet%3D%22uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe%22%7D%29&g0.range_input=21h24m51s870ms&g0.end_input=2024-08-20T08%3A22%3A07&g0.relative_time=none&g0.tenantID=0
pub const UZR_34_RTT: [(u64, u64, f64); 756] = [
    (1, 2, 0.15598),
    (1, 3, 0.37478),
    (1, 4, 0.13583),
    (1, 5, 0.26419),
    (1, 6, 0.2685),
    (1, 7, 0.15921),
    (1, 8, 0.07969),
    (1, 9, 0.20214),
    (1, 10, 0.41222),
    (1, 11, 0.15609),
    (1, 12, 0.23028),
    (1, 13, 0.205),
    (1, 14, 0.26206),
    (1, 15, 0.17735),
    (1, 16, 0.25761),
    (1, 17, 0.29715),
    (1, 18, 0.19226),
    (1, 19, 0.15543),
    (1, 20, 0.36432),
    (1, 21, 0.14284),
    (1, 22, 0.05377),
    (1, 23, 0.14463),
    (1, 24, 0.25803),
    (1, 25, 0.24942),
    (1, 26, 0.17277),
    (1, 27, 0.15197),
    (1, 28, 0.17169),
    (2, 1, 0.1558),
    (2, 3, 0.18167),
    (2, 4, 0.24428),
    (2, 5, 0.1322),
    (2, 6, 0.13709),
    (2, 7, 0.01866),
    (2, 8, 0.23824),
    (2, 9, 0.06627),
    (2, 10, 0.23563),
    (2, 11, 0.02084),
    (2, 12, 0.11739),
    (2, 13, 0.04274),
    (2, 14, 0.19052),
    (2, 15, 0.27049),
    (2, 16, 0.09998),
    (2, 17, 0.17725),
    (2, 18, 0.07601),
    (2, 19, 0.02554),
    (2, 20, 0.1687),
    (2, 21, 0.03541),
    (2, 22, 0.19079),
    (2, 23, 0.01521),
    (2, 24, 0.15494),
    (2, 25, 0.11967),
    (2, 26, 0.03282),
    (2, 27, 0.00982),
    (2, 28, 0.26739),
    (3, 1, 0.37482),
    (3, 2, 0.18166),
    (3, 4, 0.22102),
    (3, 5, 0.10883),
    (3, 6, 0.10923),
    (3, 7, 0.18799),
    (3, 8, 0.30704),
    (3, 9, 0.23476),
    (3, 10, 0.10802),
    (3, 11, 0.17426),
    (3, 12, 0.07633),
    (3, 13, 0.18028),
    (3, 14, 0.26706),
    (3, 15, 0.2572),
    (3, 16, 0.10358),
    (3, 17, 0.29476),
    (3, 18, 0.22275),
    (3, 19, 0.17826),
    (3, 20, 0.08183),
    (3, 21, 0.18932),
    (3, 22, 0.32744),
    (3, 23, 0.16661),
    (3, 24, 0.1332),
    (3, 25, 0.07369),
    (3, 26, 0.19568),
    (3, 27, 0.19236),
    (3, 28, 0.27564),
    (4, 1, 0.13592),
    (4, 2, 0.24435),
    (4, 3, 0.22078),
    (4, 5, 0.14195),
    (4, 6, 0.15366),
    (4, 7, 0.25079),
    (4, 8, 0.18394),
    (4, 9, 0.29446),
    (4, 10, 0.29284),
    (4, 11, 0.22095),
    (4, 12, 0.14995),
    (4, 13, 0.25318),
    (4, 14, 0.04908),
    (4, 15, 0.13845),
    (4, 16, 0.15395),
    (4, 17, 0.26367),
    (4, 18, 0.34179),
    (4, 19, 0.22368),
    (4, 20, 0.21611),
];
/// Query:
/// https://victoria.ch1-obs1.dfinity.network/select/0/vmui/#/?g0.expr=sum+by+%28ic_node%2Cpeer%29+%28%0A++rate%28quic_transport_quinn_path_lost_packets%7Bic_subnet%3D%22uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe%22%7D%5B7d%5D%29+%2F%0A++rate%28quic_transport_quinn_path_sent_packets%7Bic_subnet%3D%22uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe%22%7D%5B7d%5D%29%0A%29&g0.range_input=13d14h36m59s549ms&g0.end_input=2024-06-23T20%3A59%3A19&g0.tab=1&g0.relative_time=none&g0.tenantID=0
pub const UZR_34_PACKET_LOSS: [(u64, u64, f64); 756] = [
    (1, 2, 0.0014514129881646948),
    (1, 3, 0.0006131850167412532),
    (1, 4, 0.0013043255033421538),
    (1, 5, 0.0009004597545326842),
    (1, 6, 0.000657815771963414),
    (1, 7, 0.002330080989434942),
    (1, 8, 0.0020129759280524124),
    (1, 9, 0.001741535335545006),
    (1, 10, 0.0005975423603102675),
    (1, 11, 0.001584336077072161),
    (1, 12, 0.0007858214666658632),
    (1, 13, 0.0013547146136822729),
    (1, 14, 0.002833389023236848),
    (1, 15, 0.001388697772469328),
    (1, 16, 0.0010976019643632391),
    (1, 17, 0.08579120361604305),
    (1, 18, 0.0010422589696026249),
    (1, 19, 0.0008384012813774807),
    (1, 20, 0.0005919395391293981),
    (1, 21, 0.001433340099691003),
    (1, 22, 0.0029680213383182818),
    (1, 23, 0.002310312945495288),
    (1, 24, 0.0006591699717690591),
    (1, 25, 0.0016257504020891244),
    (1, 26, 0.0015972382340924839),
    (1, 27, 0.0012342138982256285),
    (1, 28, 0.0021117965103125387),
    (2, 1, 0.00032695137614781095),
    (2, 3, 0.000004556070707939352),
    (2, 4, 0.0000005751707969681597),
    (2, 5, 0.000000576117509536185),
    (2, 6, 0.000002300160608714503),
    (2, 7, 0.0005558519031119696),
    (2, 8, 0.000005847122309519759),
    (2, 9, 0.00005767833386160219),
    (2, 10, 0.0000046109908731199405),
    (2, 11, 0.0008501484436807228),
    (2, 12, 0.000003986986476141873),
    (2, 13, 0.0001723542674430353),
    (2, 14, 0.00010314143985450036),
    (2, 15, 0),
    (2, 16, 0.000005595657769570813),
    (2, 17, 0.000008667589283392609),
    (2, 18, 0),
    (2, 19, 0.00013164093894631822),
    (2, 20, 0.000011586686665287853),
    (2, 21, 0.00013555596070558454),
    (2, 22, 0.000002895252654222871),
    (2, 23, 0.00026620870975386585),
    (2, 24, 0.00000057925480028453),
    (2, 25, 0.00003877295016535523),
    (2, 26, 0.00019372315907724606),
    (2, 27, 0.0006062464967429664),
    (2, 28, 0.00000579637228244331),
    (3, 1, 0.001112693239306704),
    (3, 2, 0.002494095797124711),
    (3, 4, 0.0026971959804112855),
    (3, 5, 0.002073191614276279),
    (3, 6, 0.0009599999999999999),
    (3, 7, 0.003009613106162331),
    (3, 8, 0.0025533731951938956),
    (3, 9, 0.0022221209289605033),
    (3, 10, 0.001853979034321564),
    (3, 11, 0.002517255748415219),
    (3, 12, 0.0020461513047097418),
    (3, 13, 0.002430594855507653),
    (3, 14, 0.0010470337399910957),
    (3, 15, 0.0009260094081563273),
    (3, 16, 0.0012625285506128018),
    (3, 17, 0.0018334911236518071),
    (3, 18, 0.0021677015330584487),
    (3, 19, 0.002069429889875535),
    (3, 20, 0.0021222124907363743),
    (3, 21, 0.002536911522152603),
    (3, 22, 0.0013697134462417801),
    (3, 23, 0.0021869185500514384),
    (3, 24, 0.0025051401701812713),
    (3, 25, 0.002049534046665658),
    (3, 26, 0.0014068764371625668),
    (3, 27, 0.0026058746702161883),
    (3, 28, 0.00226487728384191),
    (4, 1, 0.0006372382290168809),
    (4, 2, 0.000004637052133217871),
    (4, 3, 0.0000011396543884101708),
    (4, 5, 0),
    (4, 6, 0.00026401265880303913),
    (4, 7, 0),
    (4, 8, 0.00012657104157658264),
    (4, 9, 0.0002247817526006726),
    (4, 10, 0.000006919708887847088),
    (4, 11, 0.0000005777161033742086),
    (4, 12, 0),
    (4, 13, 0.00007550321440415476),
    (4, 14, 0.000028230213357039033),
    (4, 15, 0.000029127315991883844),
    (4, 16, 0.0000028825754081726777),
    (4, 17, 0.000025585177505511937),
    (4, 18, 0.000012856136906170652),
    (4, 19, 0.00037598501142393787),
    (4, 20, 0.000004050494623257709),
    (4, 21, 0),
    (4, 22, 0.00045575032924610184),
    (4, 23, 0.00010408757697420884),
    (4, 24, 0.000056126265202715844),
    (4, 25, 0.00006403615298236947),
    (4, 26, 0.00016723902782223067),
    (4, 27, 0.00008931864281762862),
    (4, 28, 0.000013495860988133201),
    (5, 1, 0.00046994890373737555),
    (5, 2, 0.0007917970515478857),
    (5, 3, 0.0015420412619863164),
    (5, 4, 0.001414279658724003),
    (5, 6, 0.0014908791245574786),
    (5, 7, 0.001054472079126668),
    (5, 8, 0.00031649611388875914),
    (5, 9, 0.0001329937943939068),
    (5, 10, 0.0006611670196884016),
    (5, 11, 0.0013670239561650753),
    (5, 12, 0.0013814444667562572),
    (5, 13, 0.0010424794674386536),
    (5, 14, 0.0009421985670514026),
    (5, 15, 0.0002695066731092669),
    (5, 16, 0.0013417736935047882),
    (5, 17, 0.00012649512618322038),
    (5, 18, 0.0006992310315019048),
    (5, 19, 0.0015209411532203642),
    (5, 20, 0.0012879030463547405),
    (5, 21, 0.0007989145326515049),
    (5, 22, 0.0005072996166514226),
    (5, 23, 0.00032784325969869644),
    (5, 24, 0.001908504188636554),
    (5, 25, 0.001071920401299869),
    (5, 26, 0.0003348882119349399),
    (5, 27, 0.0011026344021933484),
    (5, 28, 0.0012517402066436038),
    (6, 1, 0.0004402281277278006),
    (6, 2, 0.000011475055238047153),
    (6, 3, 0.00011833828713624108),
    (6, 4, 0.0000011318651156341699),
    (6, 5, 0.000032462608131085076),
    (6, 7, 0.00004441365610333039),
    (6, 8, 0.0002502163151250373),
    (6, 9, 0.00015868765883192033),
    (6, 10, 0.00003653781378274845),
    (6, 11, 0.00017113741995936757),
    (6, 12, 0.0004849124446261273),
    (6, 13, 0.00006929538618719604),
    (6, 14, 0.00004408221963708311),
    (6, 15, 0.00030400095291610455),
    (6, 16, 0.0000521864526099084),
    (6, 17, 0.00009971716063166499),
    (6, 18, 0.00004197686902009312),
    (6, 19, 0.00004894203631499094),
    (6, 20, 0.00022303246576936504),
    (6, 21, 0.00009637936733181658),
    (6, 22, 0.000468813436681685),
    (6, 23, 0.000046264455526599524),
    (6, 24, 0.00005798320700901007),
    (6, 25, 0.00023717683999641088),
    (6, 26, 0.00025188340088388176),
    (6, 27, 0.00008505872995486817),
    (6, 28, 0.0002393140575356578),
    (7, 1, 0.005337024128007561),
    (7, 2, 0.015712820386703023),
    (7, 3, 0.00024209784635694127),
    (7, 4, 0.0008452228399023968),
    (7, 5, 0.00402982933374121),
    (7, 6, 0.0005081205931996716),
    (7, 8, 0.0007657236380640636),
    (7, 9, 0.008189854318500922),
    (7, 10, 0.0010838475212143677),
    (7, 11, 0.015785223750894004),
    (7, 12, 0.005545109893640501),
    (7, 13, 0.01352782080751549),
    (7, 14, 0.0011604179811726218),
    (7, 15, 0.00020038674109501523),
    (7, 16, 0.002327014160034074),
    (7, 17, 0.0031064590850447805),
    (7, 18, 0.010413556186476592),
    (7, 19, 0.014665283659351132),
    (7, 20, 0.0011594496004265489),
    (7, 21, 0.014817881385571838),
    (7, 22, 0.005252815104704588),
    (7, 23, 0.015772101033295065),
    (7, 24, 0.005689532112639109),
    (7, 25, 0.0030156754176180003),
    (7, 26, 0.01800295721692482),
    (7, 27, 0.02009748154429717),
    (7, 28, 0.001788357213568046),
    (8, 1, 0.07914735260073441),
    (8, 2, 0.000010374675647293306),
    (8, 3, 0.0007767669699090274),
    (8, 4, 0),
    (8, 5, 0.00007651019714333136),
    (8, 6, 0.0000011328922228648238),
    (8, 7, 0),
    (8, 9, 0.00006139235567632574),
    (8, 10, 0.00001716261867235703),
    (8, 11, 0),
    (8, 12, 0.0000997873318540198),
    (8, 13, 0.000044739393035567816),
    (8, 14, 0),
    (8, 15, 0),
    (8, 16, 0),
    (8, 17, 0.000012760088299811032),
    (8, 18, 0),
    (8, 19, 0.000009744745002952084),
    (8, 20, 0.00009694082455095626),
    (8, 21, 0),
    (8, 22, 0.0005069767254343067),
    (8, 23, 0),
    (8, 24, 0.000017485959056908897),
    (8, 25, 0.000019590455760429468),
    (8, 26, 0.00015811648447119168),
    (8, 27, 0),
    (8, 28, 0.00003910600277142542),
    (9, 1, 0.21805154921698644),
    (9, 2, 0.0000005406942730743984),
    (9, 3, 0.00007891152417037113),
    (9, 4, 0.00001625186678809133),
    (9, 5, 0),
    (9, 6, 0.0000011539435733132085),
    (9, 7, 0),
    (9, 8, 0.000004654572535694753),
    (9, 10, 0.0000051921858756390725),
    (9, 11, 0.0008458975047908166),
    (9, 12, 0.0000023067412205429146),
    (9, 13, 0.000030498912297882324),
    (9, 14, 0.00011712966542459215),
    (9, 15, 0),
    (9, 16, 0.000001153369280009227),
    (9, 17, 0.000009237261960089254),
    (9, 18, 0),
    (9, 19, 0.00000487760728432711),
    (9, 20, 0.000021400160443365054),
    (9, 21, 0.0000005436697271647841),
    (9, 22, 0.00015975892609586812),
    (9, 23, 0.000028757975590447358),
    (9, 24, 0),
    (9, 25, 0.00003639907950772267),
    (9, 26, 0.0002009609987816397),
    (9, 27, 0.00003082717277088979),
    (9, 28, 0.0000029203031741943323),
    (10, 1, 0.00033893189744375884),
    (10, 2, 0.0004896878688957799),
    (10, 3, 0.0023530950094387514),
    (10, 4, 0.0005923014744822588),
    (10, 5, 0.001117455086901315),
    (10, 6, 0.000848276335977484),
    (10, 7, 0.0004907504716265024),
    (10, 8, 0.0016434413992057874),
    (10, 9, 0.0003022725558566033),
    (10, 11, 0.0008447164604392072),
    (10, 12, 0.0012316817583207648),
    (10, 13, 0.0007989257789235828),
    (10, 14, 0.00011630119895963292),
    (10, 15, 0.00036422672256475596),
    (10, 16, 0.0006940838469495913),
    (10, 17, 0.00008041756529410977),
    (10, 18, 0.000276224819148183),
    (10, 19, 0.0006483427965185956),
    (10, 20, 0.0005970073272236499),
    (10, 21, 0.0009894599305084783),
    (10, 22, 0.00007151113580785308),
    (10, 23, 0.00038868025904396084),
    (10, 24, 0.0009105724168292759),
    (10, 25, 0.0006470162881058841),
    (10, 26, 0.0008096835625617032),
    (10, 27, 0.0012724449883018984),
    (10, 28, 0.00038657982287615384),
    (11, 1, 0.08002633306417048),
    (11, 2, 0.0013833258273172526),
    (11, 3, 0.0006944049113365548),
    (11, 4, 0.00008680730216127189),
    (11, 5, 0),
    (11, 6, 0.00010488088728108919),
    (11, 7, 0.0012123613437452746),
    (11, 8, 0.000006385718283008068),
    (11, 9, 0.00006814763630715884),
    (11, 10, 0.0013261638514959963),
    (11, 12, 0.000003328867103303068),
    (11, 13, 0.00046564613439459637),
    (11, 14, 0.0001427834801247708),
    (11, 15, 0.0000005242351278425994),
    (11, 16, 0.00010134441071805269),
    (11, 17, 0.000007307907436920111),
    (11, 18, 0.000276315324908445),
    (11, 19, 0.001240748115186581),
    (11, 20, 0.00008682147163536809),
    (11, 21, 0.0011275573046070023),
    (11, 22, 0.0001072239931555351),
    (11, 23, 0.0028534316454322337),
    (11, 24, 0),
    (11, 25, 0.000020005568216486923),
    (11, 26, 0.0002576587099574941),
    (11, 27, 0.001790074460445251),
    (11, 28, 0.000030225091388130095),
    (12, 1, 0.08817191491896284),
    (12, 2, 0.0000017019017049651282),
    (12, 3, 0.0016600246461505722),
    (12, 4, 0.00028951857116018144),
    (12, 5, 0.0019145501808408801),
    (12, 6, 0.0006426196670896952),
    (12, 7, 0),
    (12, 8, 0.008145016736536696),
    (12, 9, 0.0002587190317039567),
    (12, 10, 0.000019735955471173382),
    (12, 11, 0.0000011184493817771043),
    (12, 13, 0.00013439721718703235),
    (12, 14, 0.000024692081134733203),
    (12, 15, 0.00019517816496188574),
    (12, 16, 0.0006990285627527113),
    (12, 17, 0.000015370689802401245),
    (12, 18, 0.0000005764290107498246),
    (12, 19, 0.0000078088352508672),
    (12, 20, 0.00011848426313559627),
    (12, 21, 0),
    (12, 22, 0.000003994118375398056),
    (12, 23, 0.000003344923493237401),
    (12, 24, 0.0001098861244138279),
    (12, 25, 0.0005832648941951353),
    (12, 26, 0.0002827221627408993),
    (12, 27, 0),
    (12, 28, 0.00022588400165033618),
    (13, 1, 0.0009932613478550825),
    (13, 2, 0.00014419928772008552),
    (13, 3, 0.000030709631336562775),
    (13, 4, 0.000041600029582243266),
    (13, 5, 0.0000501095862485629),
    (13, 6, 0.00015273414058265795),
    (13, 7, 0.00018629978389225068),
    (13, 8, 0.00010234472924644381),
    (13, 9, 0.0001089292695158951),
    (13, 10, 0.000033785563600464525),
    (13, 11, 0.00021325357613954373),
    (13, 12, 0.00003436985684672903),
    (13, 14, 0.00029738325964578867),
    (13, 15, 0.00037021442247344544),
    (13, 16, 0.00003094956065691849),
    (13, 17, 0.00001556641873781712),
    (13, 18, 0.000028521256724864945),
    (13, 19, 0.0008760980913200318),
    (13, 20, 0.000004027643443082782),
    (13, 21, 0.00010626953426061395),
    (13, 22, 0.000046501294286024295),
    (13, 23, 0.00041809881976523453),
    (13, 24, 0.000006883540250641174),
    (13, 25, 0.00002734950790828115),
    (13, 26, 0.00027213058007482263),
    (13, 27, 0.0002368165139348928),
    (13, 28, 0.000044070668476656756),
    (14, 1, 0.00034854926500686967),
    (14, 2, 0.000025077583774803296),
    (14, 3, 0.0014311002718237775),
    (14, 4, 0),
    (14, 5, 0.000004044898371928405),
    (14, 6, 0.000016202737915506194),
    (14, 7, 0.000038768865311675244),
    (14, 8, 0.00021646449221319724),
    (14, 9, 0.0004966437610641674),
    (14, 10, 0.00002037011924667807),
    (14, 11, 0.00008698577580942856),
    (14, 12, 0.000007528066659293022),
    (14, 13, 0.000029538778044463388),
    (14, 15, 0.0004217128724631623),
    (14, 16, 0.000010431523135669492),
    (14, 17, 0.0015751499130288898),
    (14, 18, 0.00008506641589553378),
    (14, 19, 0.00009179635262492236),
    (14, 20, 0.000009867279289277287),
    (14, 21, 0.000025622221412433496),
    (14, 22, 0.00004295127774085824),
    (14, 23, 0.00006390013918612136),
    (14, 24, 0.0011048544976977393),
    (14, 25, 0.0010280102419208347),
    (14, 26, 0.00022330681832095429),
    (14, 27, 0.0000005776620399788345),
    (14, 28, 0.000025383860377486206),
    (15, 1, 0.08965825279357345),
    (15, 2, 0.00160250281513587),
    (15, 3, 0.0011680033462454762),
    (15, 4, 0.002406164869992898),
    (15, 5, 0.0022786573830808282),
    (15, 6, 0.0022618334874512486),
    (15, 7, 0.0011977545605771649),
    (15, 8, 0.0020602800331816695),
    (15, 9, 0.0010190288031610688),
    (15, 10, 0.0011423037220284424),
    (15, 11, 0.001538060685495014),
    (15, 12, 0.0015313153999285383),
    (15, 13, 0.0014135907636243727),
    (15, 14, 0.000492628317234203),
    (15, 16, 0.001686083603347654),
    (15, 17, 0.0008104588620938533),
    (15, 18, 0.0008687292290965376),
    (15, 19, 0.0014441569962371367),
    (15, 20, 0.0013451012120141996),
    (15, 21, 0.0013891395967571044),
    (15, 22, 0.0020338279125067184),
    (15, 23, 0.0015549093198433685),
    (15, 24, 0.0029075468236693285),
    (15, 25, 0.0018346638566515974),
    (15, 26, 0.0012363461452059212),
    (15, 27, 0.0014936002329745462),
    (15, 28, 0.0016325521253565314),
    (16, 1, 0.0003851085195270288),
    (16, 2, 0),
    (16, 3, 0.0007390573835154219),
    (16, 4, 0.000009118554891420806),
    (16, 5, 0.0006214324440578692),
    (16, 6, 0.0002795145039917005),
    (16, 7, 0),
    (16, 8, 0.010151342056038952),
    (16, 9, 0.00011960181794763281),
    (16, 10, 0.0000045548100217207495),
    (16, 11, 0.0000005542386230052259),
    (16, 12, 0.0008109604381817646),
    (16, 13, 0.00010892255381840926),
    (16, 14, 0.000028763221733950552),
    (16, 15, 0.00003652786945983108),
    (16, 17, 0.000010953622362915415),
    (16, 18, 0.00007820710497277307),
    (16, 19, 0.000008261049153242462),
    (16, 20, 0.00008090650269615453),
    (16, 21, 0.000016393478455690615),
    (16, 22, 0.00061132860734485),
    (16, 23, 0.000010982505966246366),
    (16, 24, 0.00015043656366091164),
    (16, 25, 0.0003374474601223859),
    (16, 26, 0.00018584196735766764),
    (16, 27, 0),
    (16, 28, 0.00024769299892858377),
    (17, 1, 0.00029844900960892477),
    (17, 2, 0.000014554023954759107),
    (17, 3, 0.00010664028904706238),
    (17, 4, 0.000014962220393506398),
    (17, 5, 0.000014525560338015598),
    (17, 6, 0.000013923132704858592),
    (17, 7, 0.000012894770467224423),
    (17, 8, 0.00019213754201526188),
    (17, 9, 0.00007854307826032319),
    (17, 10, 0.0000220646470933892),
    (17, 11, 0.000012681803744475486),
    (17, 12, 0.000020263764741165144),
    (17, 13, 0.000043647994636534414),
    (17, 14, 0.00012386045446807512),
    (17, 15, 0.000012709689148633184),
    (17, 16, 0.000014548154682963702),
    (17, 18, 0.000015053317693322234),
    (17, 19, 0.00001854479030478363),
    (17, 20, 0.00010668836968511192),
    (17, 21, 0.000013333051857794113),
    (17, 22, 0.00022365444122861644),
    (17, 23, 0.000017411370321274608),
    (17, 24, 0.000015100300844455287),
    (17, 25, 0.000031342503917812994),
    (17, 26, 0.00038287459928692505),
    (17, 27, 0.000014917400631465045),
    (17, 28, 0.00004166626984504909),
    (18, 1, 0.0003873201644477421),
    (18, 2, 0.0000010926280928886847),
    (18, 3, 0.0009069134306742145),
    (18, 4, 0.00006618137562381803),
    (18, 5, 0.000034895727205145124),
    (18, 6, 0.00009637272791134174),
    (18, 7, 0.0000005496767625797649),
    (18, 8, 0.0000614453571076627),
    (18, 9, 0.00022598109721392784),
    (18, 10, 0.000004047103661356867),
    (18, 11, 0.00000053182239046719),
    (18, 12, 0.0000017400271792245394),
    (18, 13, 0.000023581727529982483),
    (18, 14, 0.0001757608711625788),
    (18, 15, 0.00002000738651080372),
    (18, 16, 0.00000460363030776995),
    (18, 17, 0.000004607262543128297),
    (18, 19, 0.0000054125792672233684),
    (18, 20, 0.000004656352457942952),
    (18, 21, 0.0000005316069574592164),
    (18, 22, 0.00036370342583504767),
    (18, 23, 0),
    (18, 24, 0),
    (18, 25, 0),
    (18, 26, 0.00021563120346050155),
    (18, 27, 0),
    (18, 28, 0.000008899151258280661),
    (19, 1, 0.004933711639777929),
    (19, 2, 0.004681700423488364),
    (19, 3, 0.0032743949933109035),
    (19, 4, 0.004417860540197746),
    (19, 5, 0.004271990342470003),
    (19, 6, 0.004777806376904322),
    (19, 7, 0.004601340225268265),
    (19, 8, 0.0046756384211484505),
    (19, 9, 0.003569682046244294),
    (19, 10, 0.0032728914302911746),
    (19, 11, 0.005237304392989981),
    (19, 12, 0.004838223980718616),
    (19, 13, 0.005579139700124524),
    (19, 14, 0.004828844773791386),
    (19, 15, 0.004733245515090802),
    (19, 16, 0.0038388415646565866),
    (19, 17, 0.004464664374592603),
    (19, 18, 0.004769431676396243),
    (19, 20, 0.0044630771566296495),
    (19, 21, 0.004154576731972728),
    (19, 22, 0.0024358829329133034),
    (19, 23, 0.0055982611572601496),
    (19, 24, 0.003796091380595488),
    (19, 25, 0.004553410925374779),
    (19, 26, 0.005086904304231902),
    (19, 27, 0.004978670661561461),
    (19, 28, 0.004955807544887674),
    (20, 1, 0.0008551086838412805),
    (20, 2, 0.0009079574008022017),
    (20, 3, 0.002949946993947184),
    (20, 4, 0.0013370773798339773),
    (20, 5, 0.0012157220363588229),
    (20, 6, 0.0006911536650582945),
    (20, 7, 0.0011634684870658759),
    (20, 8, 0.0006372787154132648),
    (20, 9, 0.00040999511581064565),
    (20, 10, 0.0008655286799803272),
    (20, 11, 0.0013848683290035972),
    (20, 12, 0.0014659976463534897),
    (20, 13, 0.0009454816399787871),
    (20, 14, 0.0005896973677738201),
    (20, 15, 0.00018212455419076517),
    (20, 16, 0.0006904043663826266),
    (20, 17, 0.00041989325021600277),
    (20, 18, 0.0002706115299054714),
    (20, 19, 0.001443574125075876),
    (20, 21, 0.000659653883762042),
    (20, 22, 0.0003897208798180838),
    (20, 23, 0.0005156916786744763),
    (20, 24, 0.000694315867431957),
    (20, 25, 0.0026556701467231303),
    (20, 26, 0.0005139147441278781),
    (20, 27, 0.0011911454572954092),
    (20, 28, 0.0004255025996182633),
    (21, 1, 0.008618766171835353),
    (21, 2, 0.011051535829247835),
    (21, 3, 0.00023847928759008425),
    (21, 4, 0.0005374160827378844),
    (21, 5, 0.008705126549586776),
    (21, 6, 0.0030801673099797424),
    (21, 7, 0.009652763274904858),
    (21, 8, 0.0009824753414274987),
    (21, 9, 0.004429317015328423),
    (21, 10, 0.006923476927567092),
    (21, 11, 0.012442447843999803),
    (21, 12, 0.005664717854963118),
    (21, 13, 0.014483064696118849),
    (21, 14, 0.0017330916018805887),
    (21, 15, 0.00018407354230606294),
    (21, 16, 0.007358604084956907),
    (21, 17, 0.013143813598685517),
    (21, 18, 0.01521736701563076),
    (21, 19, 0.013389187101106785),
    (21, 20, 0.0015625213381464604),
    (21, 22, 0.005928399041220385),
    (21, 23, 0.009712044313793996),
    (21, 24, 0.006109205797699534),
    (21, 25, 0.007549103276301304),
    (21, 26, 0.004952894441734195),
    (21, 27, 0.01156104771836747),
    (21, 28, 0.001358877129435735),
    (22, 1, 0.001037441296125892),
    (22, 2, 0.0005542652179254332),
    (22, 3, 0.0003360095896439287),
    (22, 4, 0.0008064767946800526),
    (22, 5, 0.00016066120459925265),
    (22, 6, 0.000310896937665164),
    (22, 7, 0.00046141929113307855),
    (22, 8, 0.000753831857099531),
    (22, 9, 0.0004342217047921714),
    (22, 10, 0.00017540649875269718),
    (22, 11, 0.00037686728232839116),
    (22, 12, 0.00020283556069380105),
    (22, 13, 0.0005128825032810665),
    (22, 14, 0.00033318829609055094),
    (22, 15, 0.0009645877311529432),
    (22, 16, 0.0002911412911568571),
    (22, 17, 0.0013166710955603291),
    (22, 18, 0.0003076874258405306),
    (22, 19, 0.00041893519320986217),
    (22, 20, 0.0002307930059281329),
    (22, 21, 0.0004169604427771028),
    (22, 23, 0.0011300486885680596),
    (22, 24, 0.00486383252269458),
    (22, 25, 0.0003994791804575246),
    (22, 26, 0.0003288216783997956),
    (22, 27, 0.0005034092745557019),
    (22, 28, 0.0006946694416834614),
    (23, 1, 0.00043036695127403736),
    (23, 2, 0.0011888474538285735),
    (23, 3, 0.0015211823508841731),
    (23, 4, 0.00006912681972068193),
    (23, 5, 0),
    (23, 6, 0.00010319738983120812),
    (23, 7, 0.0019845092775808725),
    (23, 8, 0.000005804254983243116),
    (23, 9, 0.00007602529143471422),
    (23, 10, 0.0014541765489942868),
    (23, 11, 0.0011585847737542807),
    (23, 12, 0.00000332606219181955),
    (23, 13, 0.0006421667461505408),
    (23, 14, 0.00023527584644252492),
    (23, 15, 0.0000015814844023465013),
    (23, 16, 0.00010538620802588933),
    (23, 17, 0.00007264407264407265),
    (23, 18, 0.000203471218996073),
    (23, 19, 0.0025070814234948754),
    (23, 20, 0.0000045902959994996574),
    (23, 21, 0.0005792168305192919),
    (23, 22, 0.000010820215625256982),
    (23, 24, 0),
    (23, 25, 0.00003215740718152523),
    (23, 26, 0.00021821593921958704),
    (23, 27, 0.0014210755345818603),
    (23, 28, 0.00002350754334131634),
    (24, 1, 0.00039584672673577024),
    (24, 2, 0.000005242479226676065),
    (24, 3, 0.00009736613159204506),
    (24, 4, 0),
    (24, 5, 0),
    (24, 6, 0.0007149858418645175),
    (24, 7, 0.000019355667427403052),
    (24, 8, 0.000007548278498960951),
    (24, 9, 0.00015034772281474247),
    (24, 10, 0.0000028912530343700596),
    (24, 11, 0.000810232374413982),
    (24, 12, 0),
    (24, 13, 0.000028472133045048145),
    (24, 14, 0.00009295613283896164),
    (24, 15, 0.00003750405692923513),
    (24, 16, 0.0000016538994815025125),
    (24, 17, 0.000009899796588297159),
    (24, 18, 0.00007983092160428686),
    (24, 19, 0.000006360569097464156),
    (24, 20, 0.00011137992841830166),
    (24, 21, 0),
    (24, 22, 0.0004337900876337714),
    (24, 23, 0.000005205724445966316),
    (24, 25, 0.00003813100597883121),
    (24, 26, 0.00026930703139854147),
    (24, 27, 0.0000011482776696164006),
    (24, 28, 0.000008675409551625915),
    (25, 1, 0.0003661668709230164),
    (25, 2, 0.000019251032902846266),
    (25, 3, 0.00015272536914073392),
    (25, 4, 0.000018448905476753263),
    (25, 5, 0.00040807772748622015),
    (25, 6, 0.001077695985272178),
    (25, 7, 0.000021087126878962743),
    (25, 8, 0.00019877132662765029),
    (25, 9, 0.00006419279848504996),
    (25, 10, 0.00012285460241950638),
    (25, 11, 0.0008160895494671087),
    (25, 12, 0.0008764978507792426),
    (25, 13, 0.00008944701802442874),
    (25, 14, 0.00016632115091981236),
    (25, 15, 0.0001839185381550209),
    (25, 16, 0.0003612554102235281),
    (25, 17, 0.00002921572951963039),
    (25, 18, 0),
    (25, 19, 0.00002173554419114795),
    (25, 20, 0.00024127233719057082),
    (25, 21, 0.000021811689576033954),
    (25, 22, 0.000020047472414677957),
    (25, 23, 0.000048140139304128694),
    (25, 24, 0.000018326963815027033),
    (25, 26, 0.00021656300968442708),
    (25, 27, 0.00002003794965019863),
    (25, 28, 0.000025845121101622444),
    (26, 1, 0.0008659613841102995),
    (26, 2, 0.004097323933662375),
    (26, 3, 0.0003672984966013411),
    (26, 4, 0.0006624384672121862),
    (26, 5, 0.00171625787542288),
    (26, 6, 0.0005440699521779103),
    (26, 7, 0.006321100870481913),
    (26, 8, 0.0006418492640359112),
    (26, 9, 0.0010867940120313914),
    (26, 10, 0.002160459276592771),
    (26, 11, 0.0029977246123291815),
    (26, 12, 0.0005494402470946997),
    (26, 13, 0.00247430791481637),
    (26, 14, 0.0011979018248213702),
    (26, 15, 0.0007693184105083038),
    (26, 16, 0.001339540751332526),
    (26, 17, 0.0006070687359027221),
    (26, 18, 0.002163060491568522),
    (26, 19, 0.004845438359209604),
    (26, 20, 0.0006565094236216475),
    (26, 21, 0.0017130507838713255),
    (26, 22, 0.0004130044932829567),
    (26, 23, 0.00404592242776358),
    (26, 24, 0.0007331758954588169),
    (26, 25, 0.0009273192225310125),
    (26, 27, 0.0052877143182778795),
    (26, 28, 0.00029339620339502984),
    (27, 1, 0.07688227058993402),
    (27, 2, 0.018906527043130297),
    (27, 3, 0.0002026387309025767),
    (27, 4, 0.0005771913594681627),
    (27, 5, 0.004638465534677999),
    (27, 6, 0.007555894851188766),
    (27, 7, 0.0196471796266431),
    (27, 8, 0.006343788159230034),
    (27, 9, 0.008779819461412998),
    (27, 10, 0.002743581420104108),
    (27, 11, 0.018302845056591917),
    (27, 12, 0.006869305646250093),
    (27, 13, 0.01339141411823967),
    (27, 14, 0.001089222755577721),
    (27, 15, 0.0007944218017506872),
    (27, 16, 0.0042531678473067035),
    (27, 17, 0.0031959746604067175),
    (27, 18, 0.012626039898471761),
    (27, 19, 0.010207998954491804),
    (27, 20, 0.0029928850855884524),
    (27, 21, 0.013107473638944704),
    (27, 22, 0.005423515758853454),
    (27, 23, 0.01461025824942633),
    (27, 24, 0.00238769884744672),
    (27, 25, 0.004523160461605667),
    (27, 26, 0.011741791167456661),
    (27, 28, 0.0003634936674979954),
    (28, 1, 0.0005923791318732852),
    (28, 2, 0.00006855701997739943),
    (28, 3, 0.00008614431815049298),
    (28, 4, 0.0000966197143539259),
    (28, 5, 0.00010866731674384164),
    (28, 6, 0.00011243450689973089),
    (28, 7, 0.00007704962289797159),
    (28, 8, 0.00015707235607379167),
    (28, 9, 0.00011228202452053249),
    (28, 10, 0.00006729662495822967),
    (28, 11, 0.00012525447727035284),
    (28, 12, 0.00007582725509388398),
    (28, 13, 0.00012494922121765632),
    (28, 14, 0.00009606497402835109),
    (28, 15, 0.00004725567895121796),
    (28, 16, 0.00009900428323793799),
    (28, 17, 0.00005917040722257658),
    (28, 18, 0.00009849532176711223),
    (28, 19, 0.0000707527336942496),
    (28, 20, 0.0000882708381606448),
    (28, 21, 0.00012096043733790728),
    (28, 22, 0.0006431033155738757),
    (28, 23, 0.00007587974161499894),
    (28, 24, 0.00008944822563574605),
    (28, 25, 0.00007871518300122472),
    (28, 26, 0.0002181969273694387),
    (28, 27, 0.0000753283973107187),
];

const LHG_73_RTT: [(u64, u64, f64); 156] = [
    (1, 2, 0.61712),
    (1, 3, 0.16138),
    (1, 4, 0.1979),
    (1, 5, 0.31523),
    (1, 6, 0.03331),
    (1, 7, 0.0301),
    (1, 8, 0.0968),
    (1, 9, 0.1448),
    (1, 10, 0.26926),
    (1, 11, 0.04916),
    (1, 12, 0.03823),
    (1, 13, 0.31636),
    (2, 1, 0.4457),
    (2, 3, 0.21571),
    (2, 4, 0.31776),
    (2, 5, 0.31094),
    (2, 6, 0.34994),
    (2, 7, 0.24353),
    (2, 8, 0.36381),
    (2, 9, 0.05638),
    (2, 10, 0.21407),
    (2, 11, 0.33622),
    (2, 12, 0.27787),
    (2, 13, 0.03922),
    (3, 1, 0.16143),
    (3, 2, 0.21653),
    (3, 4, 0.13629),
    (3, 5, 0.1642),
    (3, 6, 0.17138),
    (3, 7, 0.13677),
    (3, 8, 0.20414),
    (3, 9, 0.24348),
    (3, 10, 0.14349),
    (3, 11, 0.15612),
    (3, 12, 0.16038),
    (3, 13, 0.16789),
    (4, 1, 0.19735),
    (4, 2, 0.32791),
    (4, 3, 0.13626),
    (4, 5, 0.24396),
    (4, 6, 0.18301),
    (4, 7, 0.16498),
    (4, 8, 0.23006),
    (4, 9, 0.28532),
    (4, 10, 0.32546),
    (4, 11, 0.17209),
    (4, 12, 0.1687),
    (4, 13, 0.3046),
    (5, 1, 0.32781),
    (5, 2, 0.31353),
    (5, 3, 0.16413),
    (5, 4, 0.24397),
    (5, 6, 0.30252),
    (5, 7, 0.28085),
    (5, 8, 0.35983),
    (5, 9, 0.25506),
    (5, 10, 0.03217),
    (5, 11, 0.2806),
    (5, 12, 0.28543),
    (5, 13, 0.39781),
    (6, 1, 0.03333),
    (6, 2, 0.35234),
    (6, 3, 0.17143),
    (6, 4, 0.18291),
    (6, 5, 0.3025),
    (6, 7, 0.02777),
    (6, 8, 0.07972),
    (6, 9, 0.1297),
    (6, 10, 0.25978),
    (6, 11, 0.02073),
    (6, 12, 0.02456),
    (6, 13, 0.33166),
    (7, 1, 0.03004),
    (7, 2, 0.24537),
    (7, 3, 0.13675),
    (7, 4, 0.16501),
    (7, 5, 0.27803),
    (7, 6, 0.02777),
    (7, 8, 0.07466),
    (7, 9, 0.13592),
    (7, 10, 0.23801),
    (7, 11, 0.01887),
    (7, 12, 0.01972),
    (7, 13, 0.29473),
    (8, 1, 0.09677),
    (8, 2, 0.34166),
    (8, 3, 0.20411),
    (8, 4, 0.23096),
    (8, 5, 0.35981),
    (8, 6, 0.0798),
    (8, 7, 0.07474),
    (8, 9, 0.17424),
    (8, 10, 0.30549),
    (8, 11, 0.08596),
    (8, 12, 0.08187),
    (8, 13, 0.27698),
    (9, 1, 0.14482),
    (9, 2, 0.05636),
    (9, 3, 0.24343),
    (9, 4, 0.28514),
    (9, 5, 0.25525),
    (9, 6, 0.12969),
    (9, 7, 0.13586),
    (9, 8, 0.17429),
    (9, 10, 0.25616),
    (9, 11, 0.10919),
    (9, 12, 0.14037),
    (9, 13, 0.23707),
    (10, 1, 0.26862),
    (10, 2, 0.19502),
    (10, 3, 0.16683),
    (10, 4, 0.29872),
    (10, 5, 0.03211),
    (10, 6, 0.25981),
    (10, 7, 0.23806),
    (10, 8, 0.30551),
    (10, 9, 0.25588),
    (10, 11, 0.2647),
    (10, 12, 0.27553),
    (10, 13, 0.05266),
    (11, 1, 0.04922),
    (11, 2, 0.32807),
    (11, 3, 0.15616),
    (11, 4, 0.17251),
    (11, 5, 0.28066),
    (11, 6, 0.02084),
    (11, 7, 0.01885),
    (11, 8, 0.08604),
    (11, 9, 0.10918),
    (11, 10, 0.26476),
    (11, 12, 0.02555),
    (11, 13, 0.2858),
    (12, 1, 0.03829),
    (12, 2, 0.27083),
    (12, 3, 0.16036),
    (12, 4, 0.16875),
    (12, 5, 0.2854),
    (12, 6, 0.02457),
    (12, 7, 0.01961),
    (12, 8, 0.08141),
    (12, 9, 0.1404),
    (12, 10, 0.27557),
    (12, 11, 0.02553),
    (12, 13, 0.30877),
    (13, 1, 0.31634),
    (13, 2, 0.03919),
    (13, 3, 0.16781),
    (13, 4, 0.31543),
    (13, 5, 0.40834),
    (13, 6, 0.32947),
    (13, 7, 0.2947),
    (13, 8, 0.27695),
    (13, 9, 0.23713),
    (13, 10, 0.05268),
    (13, 11, 0.29273),
    (13, 12, 0.30878),
];

const LHG73_PACKET_LOSS: [(u64, u64, f64); 156] = [
    (1, 2, 0.10996749729144095),
    (1, 3, 0.0),
    (1, 4, 0.00014506208657305328),
    (1, 5, 0.00017493731412910373),
    (1, 6, 0.0),
    (1, 7, 0.00021835849005104132),
    (1, 8, 0.000028244598220590316),
    (1, 9, 0.0),
    (1, 10, 0.00017437298381237467),
    (1, 11, 0.0004203211253397596),
    (1, 12, 0.00025079418157498745),
    (1, 13, 0.00017522852720422885),
    (2, 1, 0.46462264150943394),
    (2, 3, 0.0),
    (2, 4, 0.004377136649733218),
    (2, 5, 0.0),
    (2, 6, 0.0038299891540130152),
    (2, 7, 0.5499092558983666),
    (2, 8, 0.13039882959099292),
    (2, 9, 0.0),
    (2, 10, 0.00035081564637782847),
    (2, 11, 0.00006247461968575268),
    (2, 12, 0.00002988196623337816),
    (2, 13, 0.0),
    (3, 1, 0.00011286681715575621),
    (3, 2, 0.0398395352054226),
    (3, 4, 0.0),
    (3, 5, 0.0),
    (3, 6, 0.0),
    (3, 7, 0.0),
    (3, 8, 0.0008279800142755175),
    (3, 9, 0.0),
    (3, 10, 0.00046834536338090247),
    (3, 11, 0.0),
    (3, 12, 0.0),
    (3, 13, 0.0),
    (4, 1, 0.0),
    (4, 2, 0.016789015769439915),
    (4, 3, 0.0),
    (4, 5, 0.0),
    (4, 6, 0.0),
    (4, 7, 0.0),
    (4, 8, 0.000058462437883659755),
    (4, 9, 0.0),
    (4, 10, 0.0009978868278938716),
    (4, 11, 0.0),
    (4, 12, 0.0),
    (4, 13, 0.000029207313511303232),
    (5, 1, 0.0008459496514104023),
    (5, 2, 0.0),
    (5, 3, 0.0),
    (5, 4, 0.0),
    (5, 6, 0.0),
    (5, 7, 0.0),
    (5, 8, 0.0),
    (5, 9, 0.0),
    (5, 10, 0.0),
    (5, 11, 0.0),
    (5, 12, 0.000028875028875028877),
    (5, 13, 0.00707166153564788),
    (6, 1, 0.00016115602589240148),
    (6, 2, 0.022668947818648418),
    (6, 3, 0.0),
    (6, 4, 0.0),
    (6, 5, 0.0),
    (6, 7, 0.0),
    (6, 8, 0.00005460601758313766),
    (6, 9, 0.0),
    (6, 10, 0.0),
    (6, 11, 0.0),
    (6, 12, 0.0),
    (6, 13, 0.0),
    (7, 1, 0.0029997857295907438),
    (7, 2, 0.0033869115958668193),
    (7, 3, 0.0032367831355299198),
    (7, 4, 0.0033353887549750546),
    (7, 5, 0.003399915002124947),
    (7, 6, 0.0025975461478943297),
    (7, 8, 0.0030563669804176134),
    (7, 9, 0.0035285815102328866),
    (7, 10, 0.002148109388339622),
    (7, 11, 0.003549532107131333),
    (7, 12, 0.003492063492063492),
    (7, 13, 0.003373956545766557),
    (8, 1, 0.00011341404632963793),
    (8, 2, 0.021753561762753407),
    (8, 3, 0.0),
    (8, 4, 0.0),
    (8, 5, 0.00023399338968674137),
    (8, 6, 0.0),
    (8, 7, 0.0),
    (8, 9, 0.0),
    (8, 10, 0.0009087977485268681),
    (8, 11, 0.00016970725498515062),
    (8, 12, 0.0),
    (8, 13, 0.0),
    (9, 1, 0.000055850321139346556),
    (9, 2, 0.0),
    (9, 3, 0.0),
    (9, 4, 0.0),
    (9, 5, 0.0),
    (9, 6, 0.0),
    (9, 7, 0.000027785495971103084),
    (9, 8, 0.0003091190108191654),
    (9, 10, 0.0),
    (9, 11, 0.0),
    (9, 12, 0.0),
    (9, 13, 0.000029191114224829965),
    (10, 1, 0.0013883264881124544),
    (10, 2, 0.0),
    (10, 3, 0.0),
    (10, 4, 0.0),
    (10, 5, 0.0),
    (10, 6, 0.0),
    (10, 7, 0.0),
    (10, 8, 0.00002900063801403631),
    (10, 9, 0.0),
    (10, 11, 0.0),
    (10, 12, 0.00014441684478077522),
    (10, 13, 0.0),
    (11, 1, 0.0),
    (11, 2, 0.017175265040440823),
    (11, 3, 0.0),
    (11, 4, 0.0),
    (11, 5, 0.0),
    (11, 6, 0.0),
    (11, 7, 0.0),
    (11, 8, 0.000055944055944055945),
    (11, 9, 0.0),
    (11, 10, 0.0024500510427300573),
    (11, 12, 0.0),
    (11, 13, 0.20009510223490254),
    (12, 1, 0.00005495562333415767),
    (12, 2, 0.008612001832340814),
    (12, 3, 0.00005611672278338946),
    (12, 4, 0.0005651313930488839),
    (12, 5, 0.000028395377232586536),
    (12, 6, 0.00018987685129930016),
    (12, 7, 0.0001321912013536379),
    (12, 8, 0.00005529902950203224),
    (12, 9, 0.00027585445918733276),
    (12, 10, 0.0013517400057520852),
    (12, 11, 0.0),
    (12, 13, 0.00005702554744525548),
    (13, 1, 0.00008762705923589204),
    (13, 2, 0.0),
    (13, 3, 0.0),
    (13, 4, 0.0),
    (13, 5, 0.000240132072639952),
    (13, 6, 0.0),
    (13, 7, 0.0),
    (13, 8, 0.000057097179399337676),
    (13, 9, 0.0),
    (13, 10, 0.0),
    (13, 11, 0.0),
    (13, 12, 0.00002901073397156948),
];

const IO67_RTT: [(u64, u64, f64); 156] = [
    (1, 2, 0.16734),
    (1, 3, 0.27353),
    (1, 4, 0.30555),
    (1, 5, 0.23737),
    (1, 6, 0.25876),
    (1, 7, 0.19405),
    (1, 8, 0.25064),
    (1, 9, 0.18161),
    (1, 10, 0.23736),
    (1, 11, 0.05576),
    (1, 12, 0.2812),
    (1, 13, 0.11474),
    (2, 1, 0.16745),
    (2, 3, 0.12441),
    (2, 4, 0.17481),
    (2, 5, 0.10927),
    (2, 6, 0.12067),
    (2, 7, 0.24545),
    (2, 8, 0.26332),
    (2, 9, 0.04151),
    (2, 10, 0.22915),
    (2, 11, 0.22803),
    (2, 12, 0.13506),
    (2, 13, 0.09143),
    (3, 1, 0.27369),
    (3, 2, 0.12448),
    (3, 4, 0.07763),
    (3, 5, 0.02511),
    (3, 6, 0.01955),
    (3, 7, 0.33227),
    (3, 8, 0.19035),
    (3, 9, 0.10048),
    (3, 10, 0.36291),
    (3, 11, 0.32749),
    (3, 12, 0.00252),
    (3, 13, 0.16926),
    (4, 1, 0.30565),
    (4, 2, 0.17482),
    (4, 3, 0.07763),
    (4, 5, 0.07412),
    (4, 6, 0.06778),
    (4, 7, 0.31882),
    (4, 8, 0.24298),
    (4, 9, 0.14879),
    (4, 10, 0.37033),
    (4, 11, 0.37262),
    (4, 12, 0.07774),
    (4, 13, 0.20558),
    (5, 1, 0.23735),
    (5, 2, 0.10931),
    (5, 3, 0.0251),
    (5, 4, 0.07417),
    (5, 6, 0.0152),
    (5, 7, 0.20899),
    (5, 8, 0.1815),
    (5, 9, 0.08172),
    (5, 10, 0.32365),
    (5, 11, 0.32509),
    (5, 12, 0.02524),
    (5, 13, 0.1358),
    (6, 1, 0.25877),
    (6, 2, 0.1207),
    (6, 3, 0.01956),
    (6, 4, 0.06777),
    (6, 5, 0.01518),
    (6, 7, 0.26372),
    (6, 8, 0.1825),
    (6, 9, 0.09002),
    (6, 10, 0.30955),
    (6, 11, 0.31012),
    (6, 12, 0.02154),
    (6, 13, 0.14768),
    (7, 1, 0.19406),
    (7, 2, 0.24547),
    (7, 3, 0.33227),
    (7, 4, 0.31866),
    (7, 5, 0.20844),
    (7, 6, 0.26364),
    (7, 8, 0.28578),
    (7, 9, 0.33597),
    (7, 10, 0.11232),
    (7, 11, 0.03261),
    (7, 12, 0.33047),
    (7, 13, 0.20231),
    (8, 1, 0.25065),
    (8, 2, 0.26337),
    (8, 3, 0.1903),
    (8, 4, 0.24296),
    (8, 5, 0.18148),
    (8, 6, 0.18248),
    (8, 7, 0.28589),
    (8, 9, 0.25825),
    (8, 10, 0.32082),
    (8, 11, 0.42551),
    (8, 12, 0.1919),
    (8, 13, 0.30328),
    (9, 1, 0.18172),
    (9, 2, 0.04157),
    (9, 3, 0.10048),
    (9, 4, 0.14877),
    (9, 5, 0.08173),
    (9, 6, 0.08999),
    (9, 7, 0.33593),
    (9, 8, 0.25829),
    (9, 10, 0.3733),
    (9, 11, 0.21682),
    (9, 12, 0.10349),
    (9, 13, 0.06968),
    (10, 1, 0.23699),
    (10, 2, 0.22907),
    (10, 3, 0.36289),
    (10, 4, 0.37027),
    (10, 5, 0.32357),
    (10, 6, 0.30947),
    (10, 7, 0.11226),
    (10, 8, 0.32078),
    (10, 9, 0.37328),
    (10, 11, 0.12819),
    (10, 12, 0.36405),
    (10, 13, 0.1937),
    (11, 1, 0.05577),
    (11, 2, 0.22817),
    (11, 3, 0.32739),
    (11, 4, 0.37252),
    (11, 5, 0.32532),
    (11, 6, 0.31036),
    (11, 7, 0.03266),
    (11, 8, 0.42551),
    (11, 9, 0.21658),
    (11, 10, 0.12826),
    (11, 12, 0.33359),
    (11, 13, 0.16365),
    (12, 1, 0.28104),
    (12, 2, 0.13512),
    (12, 3, 0.00253),
    (12, 4, 0.07771),
    (12, 5, 0.02525),
    (12, 6, 0.02147),
    (12, 7, 0.33049),
    (12, 8, 0.1919),
    (12, 9, 0.10349),
    (12, 10, 0.36412),
    (12, 11, 0.33376),
    (12, 13, 0.16952),
    (13, 1, 0.11449),
    (13, 2, 0.09144),
    (13, 3, 0.1693),
    (13, 4, 0.20561),
    (13, 5, 0.13581),
    (13, 6, 0.14766),
    (13, 7, 0.20231),
    (13, 8, 0.3031),
    (13, 9, 0.06971),
    (13, 10, 0.1938),
    (13, 11, 0.16366),
    (13, 12, 0.1695),
];

/// Query for the metric:
/// https://victoria.ch1-obs1.dfinity.network/select/0/vmui/#/?g0.expr=sum+by+%28ic_node%2Cpeer%29+%28%0A++rate%28quic_transport_quinn_path_lost_packets%7Bic_ProductionSubnetTopology%3D%22io67a-2jmkw-zup3h-snbwi-g6a5n-rm5dn-b6png-lvdpl-nqnto-yih6l-gqe%22%7D%5B7d%5D%29+%2F%0A++rate%28quic_transport_quinn_path_sent_packets%7Bic_ProductionSubnetTopology%3D%22io67a-2jmkw-zup3h-snbwi-g6a5n-rm5dn-b6png-lvdpl-nqnto-yih6l-gqe%22%7D%5B7d%5D%29%0A%29&g0.range_input=10d2h52m42s818ms&g0.end_input=2024-05-12T13%3A19%3A31&g0.tab=1&g0.relative_time=none&g0.tenantID=0
const IO67_PACKET_LOSS: [(u64, u64, f64); 156] = [
    (1, 2, 0.0000025116739926176536),
    (1, 3, 0.0004579456767444065),
    (1, 4, 0.001850035700864664),
    (1, 5, 0.000995202969108691),
    (1, 6, 0.00001909138613960752),
    (1, 7, 0.00019945655637087513),
    (1, 8, 0.00020795407398626622),
    (1, 9, 0.000026004830460787808),
    (1, 10, 0.00006330761514513749),
    (1, 11, 0.00009654861405968816),
    (1, 12, 0.0004536072375606995),
    (1, 13, 0.0009260210590594368),
    (2, 1, 0.000026576950863990973),
    (2, 3, 0.0004114995052709546),
    (2, 4, 0.0018229081737066288),
    (2, 5, 0.0000005933958768819974),
    (2, 6, 0.00013024455288572292),
    (2, 7, 0.020455982007400803),
    (2, 8, 0.000031435626028901895),
    (2, 9, 0.000023947440365412273),
    (2, 10, 0.00006601200235208804),
    (2, 11, 0.0006411684186170226),
    (2, 12, 0.00041909322428773237),
    (2, 13, 0.00007295633111814528),
    (3, 1, 0.010389597449360232),
    (3, 2, 0.000005401243077713142),
    (3, 4, 0.0021555313839978565),
    (3, 5, 0.000006727880551439605),
    (3, 6, 0.0011608136729818863),
    (3, 7, 0.0005629997811317654),
    (3, 8, 0.00001949232259855781),
    (3, 9, 0.00101600480987657),
    (3, 10, 0.00005065854264858888),
    (3, 11, 0.005021689441758273),
    (3, 12, 0.0000032934530928022075),
    (3, 13, 0.0000023184022386039645),
    (4, 1, 0.0018678684335336694),
    (4, 2, 0.000031416668268300735),
    (4, 3, 0.0005144044320281668),
    (4, 5, 0.0001028766894281342),
    (4, 6, 0.00019102556100341472),
    (4, 7, 0.0004362537524155629),
    (4, 8, 0.000056674819121417206),
    (4, 9, 0.00015202853894404224),
    (4, 10, 0.0003617712393357278),
    (4, 11, 0.003004178416230635),
    (4, 12, 0.0005811423720677048),
    (4, 13, 0.000051074816581858724),
    (5, 1, 0.0010432149107949453),
    (5, 2, 0.0009475517681796154),
    (5, 3, 0.0022883193286215905),
    (5, 4, 0.002610988212034662),
    (5, 6, 0.001153250918564546),
    (5, 7, 0.0021525973193944293),
    (5, 8, 0.0010767507701540298),
    (5, 9, 0.00043418753932369356),
    (5, 10, 0.001272768969006755),
    (5, 11, 0.010749916709952487),
    (5, 12, 0.0019574384042711),
    (5, 13, 0.0009673222429462834),
    (6, 1, 0.0067117374811837705),
    (6, 2, 0.00006556061456508818),
    (6, 3, 0.0007314081054916355),
    (6, 4, 0.0018472198140076258),
    (6, 5, 0.000006429619908156391),
    (6, 7, 0.0012561006357616922),
    (6, 8, 0.00003722154298823348),
    (6, 9, 0.001102775770117787),
    (6, 10, 0.00003790317704034539),
    (6, 11, 0.00433350243550568),
    (6, 12, 0.0004261915770601068),
    (6, 13, 0.00005815573915253811),
    (7, 1, 0.006823172227417568),
    (7, 2, 0.00008792702682246431),
    (7, 3, 0.001476173624351456),
    (7, 4, 0.030076349208947972),
    (7, 5, 0.037095492354744415),
    (7, 6, 0.030038303242105942),
    (7, 8, 0.0002786281336062296),
    (7, 9, 0.000021040752994576822),
    (7, 10, 0.000001095917541365759),
    (7, 11, 0.00004952133633027111),
    (7, 12, 0.0024578454093489278),
    (7, 13, 0.000016841824481378308),
    (8, 1, 0.00005370160093649248),
    (8, 2, 0.000017874223930090313),
    (8, 3, 0.00006836185034737848),
    (8, 4, 0.0013723956396028574),
    (8, 5, 0.000015717180752751758),
    (8, 6, 0.000017518158418853967),
    (8, 7, 0.00008481692748439206),
    (8, 9, 0.0025713202866593163),
    (8, 10, 0.00004845256158888936),
    (8, 11, 0.00597232779894635),
    (8, 12, 0.000019538842338310524),
    (8, 13, 0.000019167036921761375),
    (9, 1, 0.000017309396411480213),
    (9, 2, 0.000027680298114631145),
    (9, 3, 0.0005667623474787441),
    (9, 4, 0.002033220199129239),
    (9, 5, 0.000004030380786458279),
    (9, 6, 0.00008071943646350249),
    (9, 7, 0.00443521094808668),
    (9, 8, 0.00008616131904608202),
    (9, 10, 0.000029517833129548022),
    (9, 11, 0.000762494536565196),
    (9, 12, 0.00003346306762915821),
    (9, 13, 0.00007681578987797783),
    (10, 1, 0.009322270880568405),
    (10, 2, 0.000020254746844599795),
    (10, 3, 0.00023500601357271062),
    (10, 4, 0.0013617773363115001),
    (10, 5, 0.000009083328382446275),
    (10, 6, 0.00001840239989943796),
    (10, 7, 0.000010781540651193795),
    (10, 8, 0.00002671767220453463),
    (10, 9, 0.000030520812178630785),
    (10, 11, 0.000031855778722983164),
    (10, 12, 0.0004215135278290673),
    (10, 13, 0.00006244122959858073),
    (11, 1, 0.00003363942481658124),
    (11, 2, 0.0000286721370679327),
    (11, 3, 0.0004917590531146349),
    (11, 4, 0.0018349257726532338),
    (11, 5, 0.000024763148915756672),
    (11, 6, 0.00010442346671132577),
    (11, 7, 0.000047054745823687904),
    (11, 8, 0.00038678542449209344),
    (11, 9, 0.00008411905126516441),
    (11, 10, 0.000026530805634556678),
    (11, 12, 0.00048041545797093287),
    (11, 13, 0.0010165654083166037),
    (12, 1, 0.012252953478055162),
    (12, 2, 0.000005131745225463936),
    (12, 3, 0.000008923671744409786),
    (12, 4, 0.0021122113111040983),
    (12, 5, 0.0000015164146296872908),
    (12, 6, 0.0008193443890555587),
    (12, 7, 0.0005300908848447211),
    (12, 8, 0.00012318614018410142),
    (12, 9, 0.001026882749503089),
    (12, 10, 0.000050966344544268),
    (12, 11, 0.004995221578124113),
    (12, 13, 0.000001358177454882406),
    (13, 1, 0.0006337791868513416),
    (13, 2, 0.0000009519790678842553),
    (13, 3, 0.000003302281817464143),
    (13, 4, 0.00148074982778491),
    (13, 5, 0.0000014964488140247861),
    (13, 6, 0.000005996316225352878),
    (13, 7, 0.0011227127562902584),
    (13, 8, 0.00018202700190020091),
    (13, 9, 0.000006003484178758085),
    (13, 10, 0.000007740675111283463),
    (13, 11, 0.0007356809260771047),
    (13, 12, 0.000005987140187701364),
];

/*
Small script to parse text formatted prometheus table data

peer1 peer2 value
peer1 peer3 value
peer2 peer1 value
...


import sys

"""
LATENCY

sum by (ic_node,peer) (quic_transport_quinn_path_rtt_seconds{ic_subnet="<<SUBNET_ID>>"})

PACKETLOSS

sum by (ic_node,peer) (
  rate(quic_transport_quinn_path_lost_packets{ic_subnet="<<SUBNET_ID>>"}[10m]) /
  rate(quic_transport_quinn_path_sent_packets{ic_subnet="<<SUBNET_ID>>"}[10m])
)

"""

def process_data(input_file, output_file):
    # Initialize a dictionary to hold ID to number mapping
    id_to_number = {}
    next_number = 1

    # Read data from the input file
    with open(input_file, 'r') as file:
        data = file.readlines()

    # Prepare to write to the output file
    with open(output_file, 'w') as output:
        # Process each line
        for line in data:
            # Split the line into components
            parts = line.split()
            if len(parts) < 3:
                continue

            node_id, peer_id, value = parts[0], parts[1], parts[2]

            # Assign numbers to node IDs if they haven't been assigned already
            if node_id not in id_to_number:
                id_to_number[node_id] = next_number
                next_number += 1
            if peer_id not in id_to_number:
                id_to_number[peer_id] = next_number
                next_number += 1

            # Map node and peer IDs to their respective numbers
            node_number = id_to_number[node_id]
            peer_number = id_to_number[peer_id]

            # Format the output
            output_line = f"({node_number}, {peer_number}, {value}),\n"
            output.write(output_line)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python process_data.py <input_file> <output_file>")
    else:
        input_file = sys.argv[1]
        output_file = sys.argv[2]
        process_data(input_file, output_file)
*/
