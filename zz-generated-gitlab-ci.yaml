---
".cargo-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
".boundary-node-service-worker":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
".rules-dependency-scan-release-cut":
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".cargo-rules-autorun-on-trigger":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE != "trigger" && $CI_COMMIT_BRANCH =~ /^rc--/
  - if: $CI_PIPELINE_SOURCE == "trigger"
".rules-merge-branch-only":
  rules:
  - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
".rules-master-schedule-push-branch":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    when: on_success
".on-success-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: on_success
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: on_success
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    when: on_success
".on-failure-rules":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: on_failure
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: on_failure
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    when: on_failure
".rules-parent-pipeline":
  rules:
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
".rules-parent-pipeline-autorun-on-trigger":
  rules:
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
  - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
".rules-parent-pipeline-protected-branch-only":
  rules:
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_COMMIT_BRANCH == "master"
  - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_COMMIT_BRANCH =~ /^rc--.*/
".rules-parent-pipeline-prs-only":
  rules:
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "parent_pipeline" && $CI_COMMIT_BRANCH != "master"
      && $CI_COMMIT_BRANCH != "post-merge-tests-passed" && $CI_COMMIT_BRANCH !~ /^rc--.*/
".rules-prs-only":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
".rules-any-schedule":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
".rules-rc-cut-schedule":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "release-candidate-cut"
".rules-cargo-audit-schedule":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "cargo-audit"
".rules-dependency-scan-schedule":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "dependency-scan-nightly"
".rules-rollout-pipeline-manual":
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    when: manual
    allow_failure: true
".rules-rollout-pipeline-auto":
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE
      != "trigger"
    when: manual
    allow_failure: true
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
    when: always
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
".rules-prod-hotfix-pipeline":
  rules:
  - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
".rules-prod-hotfix-tests":
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: "$CD_ENV == $cd_target_env && ( $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/ || $CI_MERGE_REQUEST_TITLE
      =~ /hotfix/i )"
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
".rules-rollout-pipeline-run-on-trigger":
  rules:
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
".rules-benchmark-tests":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
".rules-benchmark-spot-tests":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
".rules-sns-tests":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[sns\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "SNS_CD"
    when: always
".rules-prod-tests":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
".rules-simple-prober":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == "precious-automation/run-simple-prober-v4"
".rules-protected-branch":
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH =~ /^rc--/
".rules-scheduled-rosetta-release":
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "schedule" &&
      $SCHEDULE_NAME == "rosetta-release"
".rules-service-worker-release":
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
".rules-scheduled-reproducibility":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
".rules-pipeline-no-merge-train":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".ic-build-image":
  artifacts:
    expire_in: 3 days
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
".ic-build-legacy-image":
  artifacts:
    expire_in: 3 days
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
stages:
- ".pre"
- automation
- init
- test
- deploy
- cargo-build
- cargo-test
- guest-os-build
- guest-os-test
- host-os-test
- build-determinism-test
- prod-tests
- prod-tests-01
- prod-tests-02
- prod-tests-03
- prod-tests-04
- prod-tests-05
- benchmark-tests
- benchmark-spot-tests
- sns-tests
- push-branches
- npm-release
- finalize
- ".post"
default:
  retry:
    max: 2
    when:
    - unknown_failure
    - api_failure
    - runner_system_failure
variables:
  TEST_ES_HOSTNAMES: elasticsearch-node-0.testnet.dfinity.systems:443, elasticsearch-node-1.testnet.dfinity.systems:443,
    elasticsearch-node-2.testnet.dfinity.systems:443
before_script:
- |
  # Execute the before_script section
  echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"  # first close before_script section, if open

  # Start the (collapsed) before_script section
  set -eExuo pipefail
  echo -e "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0KClick here to see the before_script section"

  date +%s > "/tmp/job_start_date_${CI_JOB_ID:-}"
  # date -Iseconds is not supported by BSD date (macOS)
  date +"%Y-%m-%dT%H:%M:%S%z" > "/tmp/job_start_iso_date_${CI_JOB_ID:-}"
  date
  command -v ssh-agent > /dev/null
  test -z "${SSH_AUTH_SOCK:-}" && { eval "$(ssh-agent -s)"; ssh-add - <<< "${SSH_PRIVATE_KEY}"; }
  mkdir -p ~/.ssh
  chmod 0700 ~/.ssh

  echo -e "Host *\nUser gitlab-runner\n" > ~/.ssh/config
  date

  export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}

  if [ "${CI_DISPOSABLE_ENVIRONMENT:-false}" != "true" ]; then
    # MacOS + shell builds
    export CARGO_TARGET_DIR="$CI_PROJECT_DIR/target"
  fi

  # docker login for RO to overcome anonymous pull limit of 100 pulls / 6h
  # enterprise logged in account has 5000 pulls / 24h
  if [ "$(uname)" == "Linux" ]; then
    docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD_RO"

    # set ownership to ic-build container's user,
    # but ignore errors that happen due to git gc:
    #   `chown: changing ownership of '.git/shallow.lock': No such file or directory`
    sudo chown "$(id -u):$(id -g)" -fR "${CI_PROJECT_DIR}" || true
  fi
- echo -e "\e[0Ksection_end:$(date +%s):before_script\r\e[0K"
after_script:
- |
  # Start the after_script section
  echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

  # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
  export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
  buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

  rm -rf "${CI_PROJECT_DIR}/target"

  # Finish and collapse the after_script section
  echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
".build-env-base":
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
".cargo-build-env-base":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
  extends:
  - ".cargo-rules"
  - ".build-env-base"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
".ubuntu-k8s":
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-env-base"
  - ".ic-build-legacy-image"
".bazel-build-k8s":
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".ubuntu-k8s"
  - ".ic-build-image"
".ubuntu-cargo-k8s":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".cargo-build-env-base"
  - ".ubuntu-k8s"
  - ".ic-build-legacy-image"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
".macos-cargo-native":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
  extends:
  - ".cargo-build-env-base"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  tags:
  - dfinity
  - macos
no-interrupt:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
  interruptible: false
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-any-schedule"
  script:
  - echo "This pipeline is not interruptible"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: init
cargo-audit:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "cargo-audit"
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-cargo-audit-schedule"
  script:
  - cd rs; cargo audit
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: init
boundary-node-service-worker:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
  - if: $CI_PARENT_PIPELINE_SOURCE == "trigger"
  interruptible: true
  artifacts:
    paths:
    - typescript/service-worker/artifacts
    when: always
    expire_in: 3 days
    reports:
      junit:
      - typescript/service-worker/junit.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".boundary-node-service-worker"
  script:
  - "set -eExuo pipefail\n# shellcheck disable=SC1090\nsource \"$NVM_DIR/nvm.sh\"\nnvm
    use 18\nnode --version\nnpm --version\n\n(\n  cd typescript/service-worker\n  npm
    ci\n  npm run lint\n  npm run format:check\n  npm test\n  npm run build \n  npm
    run build-dev\n  npm pack\n  mkdir artifacts\n  mv dfinity-service-worker-*.tgz
    artifacts\n  cd artifacts\n  sha256sum dfinity-service-worker-*.tgz > SHA256SUMS\n)\n\nROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}\nGIT_REVISION=$(\"$CI_PROJECT_DIR\"/gitlab-ci/src/artifacts/find-build-id.sh)\nbuildevents
    cmd \"${ROOT_PIPELINE_ID}\" \"${CI_JOB_ID}\" rclone -- \\\n  gitlab-ci/src/artifacts/rclone_upload.py
    --version=\"${GIT_REVISION}\" \"typescript/service-worker/artifacts\" service-worker\n"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  needs: []
  stage: test
".after-script-test":
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/src/after_script/**/*
    - gitlab-ci/config/**/*
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail

    cd "${CI_PROJECT_DIR}"

    shellcheck -x gitlab-ci/src/after_script/*.sh

    buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
after-script-test-ic-build-legacy-image:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".after-script-test"
  - ".ic-build-legacy-image"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/src/after_script/**/*
    - gitlab-ci/config/**/*
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail

    cd "${CI_PROJECT_DIR}"

    shellcheck -x gitlab-ci/src/after_script/*.sh

    buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
after-script-test-ic-build-image:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".after-script-test"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/src/after_script/**/*
    - gitlab-ci/config/**/*
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail

    cd "${CI_PROJECT_DIR}"

    shellcheck -x gitlab-ci/src/after_script/*.sh

    buildevents cmd "$CI_PIPELINE_ID" "$CI_JOB_ID" "$CI_JOB_NAME" -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh
bazel-build-fuzzers:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=fuzzing"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//rs/..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-build-fuzzers-weekly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-fuzzers-to-clusterfuzz"
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-test-all"
  - ".ic-build-legacy-image"
  stage: test
  needs: []
  script:
  - |
    set -euo pipefail
    cd "${CI_PROJECT_DIR}"/bin
    gcloud auth activate-service-account --key-file "${FUZZING_GCP_SERVICE_KEY}"
    ./build-all-fuzzers.sh --zip
    cd fuzzer_build
    gsutil -m cp libfuzzer_linux_*.zip gs://ic_fuzzer_builds
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-build-fuzzers-archives:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/20--test--bazel-fuzzers.yml
    - bin/build-all-fuzzers.sh
    - bazel/fuzz_testing.bzl
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-test-all"
  - ".ic-build-legacy-image"
  stage: test
  needs: []
  script:
  - |-
    set -euo pipefail
    cd "${CI_PROJECT_DIR}"/bin
    ./build-all-fuzzers.sh --zip
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
".bazel-rules-pipeline":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".bazel-rules-pipeline-no-merge-train":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
".bazel-rules-pipeline-no-merge-train-allow-to-fail":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    allow_failure: true
".bazel-rules-post-master":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
".bazel-test-all":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-rules-pipeline"
  - ".bazel-build-k8s"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-test-all:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going $BAZEL_EXTRA_ARGS_RULES"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 80 minutes
linux-openssl-static-binaries:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//publish/binaries:upload"
    DFINITY_OPENSSL_STATIC: 1
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".bazel-rules-pipeline-no-merge-train"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-test-all-allow-to-fail:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --test_tag_filters=allow_to_fail"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".bazel-rules-pipeline-no-merge-train-allow-to-fail"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-system-test-hourly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_hourly"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".bazel-rules-post-master"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 120 minutes
bazel-system-test-hotfix:
  rules:
  - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_hotfix"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".rules-prod-hotfix-pipeline"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-system-test-staging:
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE
      != "trigger"
    when: manual
    allow_failure: true
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
    when: always
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_staging"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".rules-rollout-pipeline-auto"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  allow_failure: true
bazel-system-test-nightly:
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE
      != "trigger"
    when: manual
    allow_failure: true
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
    when: always
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --test_tag_filters=system_test_nightly"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".rules-rollout-pipeline-auto"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 7h 30m
bazel-config-check-all-rebuild:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=check"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//rs/..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-cache-perf-test-linux:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going $BAZEL_EXTRA_ARGS_RULES"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: test
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - bazel-test-all
  - ".bazel-rules-post-master"
  stage: test
  needs:
  - job: bazel-test-all
    artifacts: false
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 80 minutes
bazel-test-all-rebuild:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached
      --remote_instance_name=${CI_COMMIT_SHA} --@rules_rust//rust/settings:pipelined_compilation=True"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//..."
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  - ".bazel-rules-post-master"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 2h
bazel-build-macos:
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//rs/... //publish/binaries/..."
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - macos
  extends:
  - ".build-env-base"
  - ".bazel-test-all"
  - ".bazel-rules-pipeline-no-merge-train"
  stage: test
  needs: []
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 90 minutes
macos-openssl-static-binaries:
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//publish/binaries:upload"
    DFINITY_OPENSSL_STATIC: 1
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - macos
  extends:
  - ".build-env-base"
  - ".bazel-test-all"
  - ".bazel-rules-pipeline-no-merge-train"
  stage: test
  needs: []
  script:
  - - "./gitlab-ci/src/bazel-ci/main.sh"
  - |
    # check replica
    if ! bazel run --config macos_ci //publish/binaries:replica -- --print-sample-config --replica-version 1 >/dev/null; then
      BIN=$(bazel cquery --output=files //publish/binaries:replica)
      otool -L "$BIN"
      exit 1
    fi
    # check ic-starter
    if ! bazel run --config macos_ci //publish/binaries:ic-starter -- --version; then
      BIN=$(bazel cquery --output=files //publish/binaries:ic-starter)
      otool -L "$BIN"
      exit 1
    fi
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
bazel-cache-perf-test-macos:
  interruptible: true
  artifacts:
    paths:
    - bazel-build-log*.json*
    - bazel-bep.pb
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_EXTRA_ARGS: "--config macos_ci"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: build
    BAZEL_TARGETS: "//rs/... //publish/binaries/..."
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - macos
  extends:
  - bazel-build-macos
  - ".bazel-rules-post-master"
  stage: test
  needs:
  - job: bazel-build-macos
    artifacts: false
  script:
  - "./gitlab-ci/src/bazel-ci/main.sh"
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 90 minutes
".build-ic":
  artifacts:
    expire_in: 3 days
    reports:
      dotenv: nns.release.env
    paths:
    - bazel-build-log*.json*
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  extends:
  - ".ic-build-image"
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    VERSION=$(git rev-parse HEAD)

    if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
        # read NNS release version from git tree
        NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
        # we pass nss version info to build-determinism-*-release jobs
        # we put it under /tmp due to git clean -ffdx within build-ic script
        echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

        # fetch and checkout this version
        git fetch origin "$NNS_RELEASE_VERSION"
        git checkout "$NNS_RELEASE_VERSION"
        # NOTE: ic/$VERSION in S3 will have artifacts
        #       for revision $NNS_RELEASE_VERSION !!!
    fi

    if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
        gitlab-ci/container/build-ic.sh -i -c -b
    else
        gitlab-ci/container/build-ic.sh -i -c -b --no-release
    fi

    # release binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/release" "${CI_JOB_NAME}/release"
    # canister binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/canisters" "${CI_JOB_NAME}/canisters"

    # guestos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
    # hostos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
    # setupos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

    # collect dotenv
    if [ -f /tmp/nns.release.env ]; then
        mv /tmp/nns.release.env .
    fi
build-ic:
  artifacts:
    expire_in: 3 days
    reports:
      dotenv:
      - nns.release.env
    paths:
    - bazel-build-log*.json*
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  extends:
  - ".build-ic"
  - ".bazel-rules-pipeline"
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    VERSION=$(git rev-parse HEAD)

    if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
        # read NNS release version from git tree
        NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
        # we pass nss version info to build-determinism-*-release jobs
        # we put it under /tmp due to git clean -ffdx within build-ic script
        echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

        # fetch and checkout this version
        git fetch origin "$NNS_RELEASE_VERSION"
        git checkout "$NNS_RELEASE_VERSION"
        # NOTE: ic/$VERSION in S3 will have artifacts
        #       for revision $NNS_RELEASE_VERSION !!!
    fi

    if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
        gitlab-ci/container/build-ic.sh -i -c -b
    else
        gitlab-ci/container/build-ic.sh -i -c -b --no-release
    fi

    # release binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/release" "${CI_JOB_NAME}/release"
    # canister binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/canisters" "${CI_JOB_NAME}/canisters"

    # guestos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
    # hostos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
    # setupos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

    # collect dotenv
    if [ -f /tmp/nns.release.env ]; then
        mv /tmp/nns.release.env .
    fi
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
build-ic-release:
  artifacts:
    expire_in: 3 days
    reports:
      dotenv:
      - nns.release.env
    paths:
    - bazel-build-log*.json*
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  variables:
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  extends:
  - ".build-ic"
  - ".rules-scheduled-reproducibility"
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    VERSION=$(git rev-parse HEAD)

    if [ "$CI_JOB_NAME" == "build-ic-release" ]; then
        # read NNS release version from git tree
        NNS_RELEASE_VERSION="$(jq -r '.subnets["tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe"]' testnet/mainnet_revisions.json)"
        # we pass nss version info to build-determinism-*-release jobs
        # we put it under /tmp due to git clean -ffdx within build-ic script
        echo "NNS_RELEASE_VERSION=$NNS_RELEASE_VERSION" > /tmp/nns.release.env

        # fetch and checkout this version
        git fetch origin "$NNS_RELEASE_VERSION"
        git checkout "$NNS_RELEASE_VERSION"
        # NOTE: ic/$VERSION in S3 will have artifacts
        #       for revision $NNS_RELEASE_VERSION !!!
    fi

    if [ "$CI_COMMIT_REF_PROTECTED" == "true" ]; then
        gitlab-ci/container/build-ic.sh -i -c -b
    else
        gitlab-ci/container/build-ic.sh -i -c -b --no-release
    fi

    # release binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/release" "${CI_JOB_NAME}/release"
    # canister binaries
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/canisters" "${CI_JOB_NAME}/canisters"

    # guestos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/guestos" "${CI_JOB_NAME}/guest-os"
    # hostos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/hostos" "${CI_JOB_NAME}/host-os"
    # setupos images
    buildevents cmd "${ROOT_PIPELINE_ID}" "${CI_JOB_ID}" rclone -- \
        gitlab-ci/src/artifacts/rclone_upload.py --version="${VERSION}" \
        "artifacts/icos/setupos" "${CI_JOB_NAME}/setup-os"

    # collect dotenv
    if [ -f /tmp/nns.release.env ]; then
        mv /tmp/nns.release.env .
    fi
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
pre-commit:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PRE_COMMIT_HOME: "/cache/pre-commit/$CI_CONCURRENT_ID"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eEuo pipefail

    rustup default stable

    # Make sure CI can pull from the private repo.
    if ! pre-commit run -a --hook-stage=manual ; then
      echo "Pre-commit checks failed. Here is the diff of the changes:"
      git diff
      echo
      echo "You can fix the code locally by following these instructions in the same branch."
      echo
      echo "install pre-commit by following https://pre-commit.com/#installation:"
      echo "(brew|pip) install pre-commit"
      echo "pre-commit install"
      echo
      echo "Then, to fix the checks in this branch, run:"
      echo "pre-commit run --from-ref=\$(git merge-base HEAD master) --to-ref=HEAD"
      echo
      echo "And then commit the changes."
      exit 1
    fi
cargo-lock-generate:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "web" && $DISKIMG_BRANCH == ""
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends: ".ubuntu-cargo-k8s"
  script:
  - |
    echo "Running a tiny cargo check (should always succeed), just to make sure Cargo.lock is up to date"
    set -exuo pipefail
    cd "${CI_PROJECT_DIR}"
    cargo check -p ic-sys
    cd "${CI_PROJECT_DIR}"
  - |
    set -exuo pipefail
    git add Cargo.lock
    git status
    if ! git diff --cached --quiet; then
      # If a merge request and not on a merge train then update the Cargo.lock file in the MR automatically.
      if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]  && [ "$CI_MERGE_REQUEST_EVENT_TYPE" != "merge_train" ];then
        # There are some changes staged
        # Command might fail because the gitlab remote already exists from a previous run.
        git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
        git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
        git config --global user.email "infra+gitlab-automation@dfinity.org"
        git config --global user.name "IDX GitLab Automation"
        git commit -m"Automatically updated Cargo.lock"
        git push origin HEAD:"${CI_COMMIT_REF_NAME}"
      fi

      # Force the pipeline to fail so MRs cannot be merged with a stale cargo lockfile.
      exit 1
    fi
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  needs: []
  stage: test
docker-generate-runner-list:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == "precious-automation/run-simple-prober-v4"
  interruptible: true
  artifacts:
    paths:
    - runners.yml
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-simple-prober"
  script:
  - |
    set -euo pipefail
    ./gitlab-ci/src/gitlab_runners_check/create-gitlab-runner-jobs.py
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity
  - docker
  - ubuntu
  stage: init
gitlab-runner-tests:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME == "precious-automation/run-simple-prober-v4"
  extends:
  - ".rules-simple-prober"
  stage: test
  needs:
  - docker-generate-runner-list
  trigger:
    include:
    - artifact: runners.yml
      job: docker-generate-runner-list
    strategy: depend
gitlab-ci-config-validation:
  interruptible: true
  artifacts:
    paths:
    - gitlab-ci/src/htmlcov
    when: always
    expire_in: 3 days
    reports:
      junit:
      - test_report.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-pipeline-no-merge-train"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: test
  script:
  - |
    set -xeuo pipefail
    cd gitlab-ci/src
    python3 gitlab_config/main.py --cfg-validate
python-gitlab-ci-tests:
  interruptible: true
  artifacts:
    paths:
    - gitlab-ci/src/htmlcov
    when: always
    expire_in: 3 days
    reports:
      junit:
      - test_report.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-pipeline-no-merge-train"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -xeuo pipefail
    cd gitlab-ci/src
    pytest -v -o junit_family=xunit1 --junitxml=../../test_report.xml --cov=. --cov-report=term --cov-report=term-missing --cov-report=html --cov-branch
container-autobuild-protected:
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "push"
    changes:
    - gitlab-ci/container/TAG
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  script:
  - |
    # use docker on protected runner
    set -euo pipefail

    # container image tag
    TAG=$(cat ./gitlab-ci/container/TAG)
    # check if we have it in dockerhub
    EXISTS=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build-legacy/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")
    EXISTS_BAZEL=$(curl -s https://hub.docker.com/v2/repositories/dfinity/ic-build/tags | jq -r "[.results? | .[]? | .name == \"$TAG\"] | any")

    if [ "$EXISTS" != "true" ] || [ "$EXISTS_BAZEL" != "true" ]; then
      # build it
      echo -e "\e[0Ksection_start:$(date +%s):docker_build_script[collapsed=true]\r\e[0KClick here to see the docker_build_script"
      ./gitlab-ci/container/build-image.sh
      echo -e "\e[0Ksection_end:$(date +%s):docker_build_script\r\e[0K"
      # push it to dockerhub
      docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
      docker push docker.io/dfinity/ic-build-legacy:"$TAG"
      docker push docker.io/dfinity/ic-build-legacy:latest
      docker push docker.io/dfinity/ic-build:"$TAG"
      docker push docker.io/dfinity/ic-build:latest
    fi
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  needs: []
  stage: test
container-autobuild:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - requirements.txt
    - ".bazelversion"
    - gitlab-ci/container/**/*
    - gitlab-ci/config/20--test--container-image-autobuild.yml
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  script:
  - |
    set -euo pipefail

    # safeguard for feedback loop [this CI job pushes commits]
    git fetch origin master
    COMMIT_COUNT=$(git rev-list --count "$(git merge-base HEAD origin/master)"..HEAD)
    if [ "$COMMIT_COUNT" -gt 256 ]; then
        echo "Reached hard safeguard limit of commits"
        exit 1
    fi

    # check if tag changed
    pushd gitlab-ci/container
    TAG="$(./get-image-tag.sh)"
    cd ../config
    # names must match with names in docker-build-image.sh!
    IMG_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy"
    IMG_BAZEL_NAME="registry.gitlab.com/dfinity-lab/core/docker/ic-build"
    IMG_BAZEL_DOCKER_HUB="dfinity/ic-build"

    IMG_NAME_FULL="$IMG_NAME:$TAG"
    IMG_BAZEL_NAME_FULL="$IMG_BAZEL_NAME:$TAG"
    IMG_BAZEL_DOCKER_HUB_FULL="$IMG_BAZEL_DOCKER_HUB:$TAG"

    # return if no changes
    if grep -q "$IMG_NAME_FULL" -- *; then
        echo "No changes required to build a new docker ic-build-legacy image"
        exit 0
    fi
    popd

    # build new ic-build* images
    ./gitlab-ci/container/build-image.sh

    # push the new ic-build-legacy image it to gitlab registry
    docker login -u gitlab-ci-token -p "$GITLAB_API_TOKEN" registry.gitlab.com
    docker push "$IMG_NAME_FULL"
    docker push "$IMG_BAZEL_NAME_FULL"

    # update gitlab's docker image tags
    pushd gitlab-ci/config
    sed -i -E "s|$IMG_NAME:[^\"]{5,}|$IMG_NAME_FULL|g" -- *
    sed -i -E "s|$IMG_BAZEL_NAME:[^\"]{5,}|$IMG_BAZEL_NAME_FULL|g" -- *
    cd ../container
    echo "$TAG" > TAG
    popd

    pushd .devcontainer
    sed -i -E "s|$IMG_BAZEL_DOCKER_HUB:[^\"]{5,}|$IMG_BAZEL_DOCKER_HUB_FULL|g" -- *
    popd

    # commit and push the change upstream
    git config --global user.email "idx@dfinity.org"
    git config --global user.name "IDX GitLab Automation"
    git commit -a -m "Updating docker image in CI"
    git remote add origin \
        "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
        || true
    git remote set-url origin \
        "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" \
        || true
    git push --set-upstream origin HEAD:"$CI_COMMIT_REF_NAME"

    # try to free some space if above 80%
    DISK_UTIL=$(df / | tail -1 | awk '{print 0+$5}')
    if [ "$DISK_UTIL" -gt 80 ]; then
        df -h /
        docker container prune -f
        docker image prune -f
    fi
    df -h /
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  needs: []
  stage: test
dependencies-check:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    CARGO_AUDIT_VERSION: 0.16.0
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
    cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies/
    $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_merge_job.py
  allow_failure: false
dependency-scan-nightly:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    CARGO_AUDIT_VERSION: 0.16.0
    NVM_VERSION: '19'
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-dependency-scan-schedule"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "dependency-scan-nightly"
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
    # shellcheck disable=SC1090
    source "${NVM_DIR}/nvm.sh"
    nvm use ${NVM_VERSION}
    node --version
    npm --version
    cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies
    $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_periodic_job.py
    $SHELL_WRAPPER python3 job/npm_scanner_periodic_job.py
    $SHELL_WRAPPER python3 job/bazel_trivy_container_ic_scanner_periodic_job.py
  allow_failure: true
dependency-scan-release-cut:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PYTHONPATH: "${CI_PROJECT_DIR}/gitlab-ci/src:${CI_PROJECT_DIR}/gitlab-ci/src/dependencies"
    CARGO_AUDIT_VERSION: 0.16.0
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-dependency-scan-release-cut"
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -euo pipefail
    $SHELL_WRAPPER cargo install cargo-audit --version "${CARGO_AUDIT_VERSION}"
    cd "${CI_PROJECT_DIR}"/gitlab-ci/src/dependencies
    $SHELL_WRAPPER python3 job/bazel_rust_ic_scanner_release_job.py
  allow_failure: false
test-testnet-deployment:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    TESTNET: small14
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-protected-branch"
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs:
  - job: bazel-test-all
    artifacts: false
  stage: test
  resource_group: "$TESTNET"
  timeout: 30 minutes
  script:
  - |
    set -eExou pipefail
    export ANSIBLE_REMOTE_USER=gitlab-runner
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "${CI_COMMIT_SHA}")
    "$CI_PROJECT_DIR/testnet/tools/icos_deploy.sh" $TESTNET --git-revision "$GIT_REVISION" --boundary-dev-image
check-bins-linux:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    ARTIFACT_PREFIX: openssl-static-binaries/x86_64-linux
  image:
    name: ubuntu@sha256:b5a61709a9a44284d88fb12e5c48db0409cfad5b69d4ff8224077c57302df9cf
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".bazel-rules-pipeline-no-merge-train"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train" && $CI_MERGE_REQUEST_TITLE =~ /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      != "merge_train"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: test
  needs:
  - job: linux-openssl-static-binaries
    artifacts: false
  before_script: "/bin/true"
  after_script: "/bin/true"
  script:
  - |
    set -exuo pipefail

    apt-get update && apt-get install --yes --no-install-recommends curl ca-certificates

    "$CI_PROJECT_DIR"/gitlab-ci/tools/download "${ARTIFACT_PREFIX}/replica.gz" | gunzip > /tmp/replica
    chmod +x /tmp/replica
    ldd /tmp/replica
    /tmp/replica --print-sample-config --replica-version 1 >/dev/null

    "$CI_PROJECT_DIR"/gitlab-ci/tools/download "${ARTIFACT_PREFIX}/ic-starter.gz" | gunzip > /tmp/ic-starter
    chmod +x /tmp/ic-starter
    ldd /tmp/ic-starter
    /tmp/ic-starter --version
cargo-clippy-linux:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- \
        "$CI_PROJECT_DIR"/gitlab-ci/src/rust_lint/lint.sh
legacy-cargo-check:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- cargo check --tests --benches
cargo-build-release-linux:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  needs: []
  stage: test
  script:
  - |
    set -eExuo pipefail
    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- cargo build --release
benchmarks:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "rust-benchmarks"
  interruptible: true
  artifacts:
    paths:
    - report
    when: always
    expire_in: 3 days
    reports:
      junit:
      - bazel-testlogs-gitlab/**/test.xml
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    BAZEL_COMMAND: run
    BAZEL_TARGETS: "//..."
    RUST_BACKTRACE: full
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-test-all"
  stage: cargo-test
  needs: []
  script:
  - |
    set -eEuo pipefail

    TARGET_LIST=$(bazel query "attr(tags, 'rust_bench', ${TARGETS:-'//rs/...'})")
    for TARGET in $TARGET_LIST; do
        BAZEL_TARGETS="$TARGET"
        time ./gitlab-ci/src/bazel-ci/main.sh
    done
    find -L ./bazel-out -name 'benchmark.json'

    set -x
    while IFS= read -r bench_dir; do
      echo '{}' | jq -cMr \
        --slurpfile benchmark "$bench_dir/benchmark.json" \
        --slurpfile estimates "$bench_dir/estimates.json" \
        --arg system x86_64-linux \
        --arg timestamp "$(date --utc --iso-8601=seconds)" \
        --arg rev "$CI_COMMIT_SHA" \
        '.benchmark = $benchmark[] |
        .estimates = $estimates[] |
        .package = "replica-benchmarks" |
        .system = $system |
        .timestamp = $timestamp |
        .rev = $rev |
        .revCount = 1' \
        > report.json
      curl -sS -o /dev/null -H 'Content-Type: application/json' --data @report.json \
        "http://elasticsearch.dfinity.systems:9200/ci-performance-test/properties?pretty"
    done < <(find -L ./bazel-out -type d -path '*/new')
  after_script:
  - |
    set +e # Do not fail in the after_script, try to do as much as possible instead.
    echo -e "\033[0;31m"
    echo -e "************************************************************************"
    echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel           ***"
    echo -e "*** (NEW) To regenerate Cargo Bazel lockfiles run ./bin/bazel-pin.sh ***"
    echo -e "************************************************************************"
    echo -e "\033[0m"
  - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
  - gzip bazel-build-log*.json
  - |
    echo -e "\e[0Ksection_start:$(date +%s):bazel_exporter_logs[collapsed=true]\r\e[0KClick to see Bazel exporter logs"
    bazel run //bazel/exporter:exporter --build_event_binary_file= -- -f "$(pwd)/bazel-bep.pb"
    echo -e "\e[0Ksection_end:$(date +%s):bazel_exporter_logs\r\e[0K"
  - - |
      # Start the after_script section
      echo -e "\e[0Ksection_start:$(date +%s):after_script[collapsed=true]\r\e[0KClick here to see the after_script section. It does not affect the job success status"

      # Export all the environmental variables so that the GITLAB configured variables are available to after_script.sh
      export ROOT_PIPELINE_ID=${PARENT_PIPELINE_ID:-$CI_PIPELINE_ID}
      buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" after-script -- "${CI_PROJECT_DIR}"/gitlab-ci/src/after_script/after_script.sh

      rm -rf "${CI_PROJECT_DIR}/target"

      # Finish and collapse the after_script section
      echo -e "\e[0Ksection_end:$(date +%s):after_script\r\e[0K"
  timeout: 12h
  parallel:
    matrix:
    - TARGETS: "//rs/crypto/..."
".rules-build-base-images":
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
".build-base-image": |
  set -euo pipefail

  TAG=$(date '+%Y-%m-%d-%H%M')
  echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
  pushd "$CONTEXT"
  podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
  popd
  echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

  if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
      podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
      podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
      echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
      echo "$REF_FILE" >> "digestfile-${IMAGE}"
      rm -f digestfile
  fi
".build-base-image-job":
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-build-base-images"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-guestos-base:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    IMAGE: guestos-base
    REF_FILE: ic-os/guestos/rootfs/docker-base.prod
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-guestos-base-dev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    IMAGE: guestos-base-dev
    REF_FILE: ic-os/guestos/rootfs/docker-base.dev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-guestos-base-dev-sev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/guestos/rootfs"
    IMAGE: guestos-base-dev-sev
    REF_FILE: ic-os/guestos/rootfs/docker-base.dev-sev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-boundaryos-base:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-guestos/rootfs"
    IMAGE: boundaryos-base
    REF_FILE: ic-os/boundary-guestos/rootfs/docker-base.prod
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-boundaryos-base-snp:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-guestos/rootfs"
    IMAGE: boundaryos-base-snp
    REF_FILE: ic-os/boundary-guestos/rootfs/docker-base.snp
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "CPU_SUPPORT=snp")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-boundaryos-api-guestos-base:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-api-guestos/rootfs"
    IMAGE: boundary-api-guestos-base
    REF_FILE: ic-os/boundary-api-guestos/rootfs/docker-base.prod
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-boundaryos-api-guestos-base-snp:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/boundary-api-guestos/rootfs"
    IMAGE: boundary-api-guestos-base-snp
    REF_FILE: ic-os/boundary-api-guestos/rootfs/docker-base.snp
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "CPU_SUPPORT=snp")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-hostos-base:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    IMAGE: hostos-base
    REF_FILE: ic-os/hostos/rootfs/docker-base.prod
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-hostos-base-dev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    IMAGE: hostos-base-dev
    REF_FILE: ic-os/hostos/rootfs/docker-base.dev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-hostos-base-dev-sev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/hostos/rootfs"
    IMAGE: hostos-base-dev-sev
    REF_FILE: ic-os/hostos/rootfs/docker-base.dev-sev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev" --build-arg
    "CPU_SUPPORT=sev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-setupos-base:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    IMAGE: setupos-base
    REF_FILE: ic-os/setupos/rootfs/docker-base.prod
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-setupos-base-dev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    IMAGE: setupos-base-dev
    REF_FILE: ic-os/setupos/rootfs/docker-base.dev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-setupos-base-dev-sev:
  interruptible: true
  artifacts:
    paths:
    - digestfile*
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    CONTEXT: "${CI_PROJECT_DIR}/ic-os/setupos/rootfs"
    IMAGE: setupos-base-dev-sev
    REF_FILE: ic-os/setupos/rootfs/docker-base.dev-sev
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-base-image-job"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs: []
  script:
  - BUILD_ARGS=(--build-arg "PACKAGE_FILES=packages.common packages.dev")
  - |
    set -euo pipefail

    TAG=$(date '+%Y-%m-%d-%H%M')
    echo -e "\e[0Ksection_start:$(date +%s):${IMAGE}[collapsed=true]\r\e[0KClick here to see the ${IMAGE} build"
    pushd "$CONTEXT"
    podman build "${BUILD_ARGS[@]}" --squash-all --no-cache -t "docker.io/dfinity/${IMAGE}:${TAG}" -f Dockerfile.base .
    popd
    echo -e "\e[0Ksection_end:$(date +%s):${IMAGE}\r\e[0K"

    if [ "${CI_COMMIT_REF_NAME:-}" == "master" ]; then
        podman login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
        podman push "dfinity/${IMAGE}:${TAG}" --digestfile digestfile
        echo "dfinity/${IMAGE}@$(cat digestfile)" > "digestfile-${IMAGE}"
        echo "$REF_FILE" >> "digestfile-${IMAGE}"
        rm -f digestfile
    fi
build-base-images-ref-update:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-build-base-images"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-push-base-images"
  - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME
      == "run-all-master"
    when: manual
    allow_failure: true
  - if: $CI_PARENT_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - gitlab-ci/config/46--guest-os-build--guest-base-image.yml
    - ic-os/boundary-guestos/rootfs/Dockerfile.base
    - ic-os/boundary-api-guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/Dockerfile.base
    - ic-os/guestos/rootfs/packages.common
    - ic-os/guestos/rootfs/packages.dev
    - ic-os/hostos/rootfs/Dockerfile.base
    - ic-os/hostos/rootfs/packages.common
    - ic-os/hostos/rootfs/packages.dev
    - ic-os/setupos/rootfs/Dockerfile.base
    - ic-os/setupos/rootfs/packages.common
    - ic-os/setupos/rootfs/packages.dev
  stage: guest-os-build
  needs:
  - build-guestos-base
  - build-guestos-base-dev
  - build-guestos-base-dev-sev
  - build-boundaryos-base
  - build-boundaryos-base-snp
  - build-boundaryos-api-guestos-base
  - build-boundaryos-api-guestos-base-snp
  - build-hostos-base
  - build-hostos-base-dev
  - build-hostos-base-dev-sev
  - build-setupos-base
  - build-setupos-base-dev
  - build-setupos-base-dev-sev
  script:
  - |
    set -euo pipefail
    if ! ls -1 digestfile-*; then
      echo "No digestfiles, nothing to do!"
      exit 0
    fi

    # update image ref in ref files
    for FILE in digestfile-*; do
        IMAGE="$(head -1 "$FILE")"
        REF_FILE="$(tail -1 "$FILE")"
        echo "$IMAGE" > "$REF_FILE"
    done
    rm -f digestfile*

    # commit, push & create new merge request
    TAG=$(date '+%Y-%m-%d-%H%M')
    git remote set-url origin \
        "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
    git config --global user.email "idx@dfinity.org"
    git config --global user.name "IDX GitLab Automation"
    git checkout -b "base-image-refs-update-${TAG}"
    git add .
    if git diff --cached --quiet; then
        echo "No changes to commit."
        exit 0
    fi
    git commit -m "Updating container base image refs"
    git push \
        -o merge_request.create \
        -o merge_request.title="Updating container base images refs [$TAG]" \
        origin "base-image-refs-update-${TAG}" 2>&1 | tee push.info
rosetta-release:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  - ".ic-build-image"
  - ".rules-scheduled-rosetta-release"
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "schedule" &&
      $SCHEDULE_NAME == "rosetta-release"
  stage: guest-os-build
  script:
  - |
    set -euo pipefail

    docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"

    # - Query the current rosetta version
    bazel build //rs/rosetta-api:version
    readonly ROSETTA_RELEASE_VERSION="$(cat "$(bazel cquery --output=files //rs/rosetta-api:version)")"
    readonly VERSION_TAG="v$ROSETTA_RELEASE_VERSION"

    # - Abort the release if the image with that version was already published.
    if docker manifest inspect "dfinity/rosetta-api:$VERSION_TAG"; then
        echo Rosetta version "$ROSETTA_RELEASE_VERSION" is already published on DockerHub
        exit 0
    fi

    # - Build an publish the image
    ROSETTA_API_DATE=$(date +"%Y%m%d")

    for tag in "$VERSION_TAG" "$CI_COMMIT_SHA" "$ROSETTA_API_DATE" latest; do
        bazel run --stamp --embed_label="$tag" //rs/rosetta-api:push_rosetta_image
    done

    # - Tag the commit
    git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
    git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

    git config --global user.email "infra+gitlab-automation@dfinity.org"
    git config --global user.name "IDX GitLab Automation"

    git tag "rosetta-release-$ROSETTA_RELEASE_VERSION" "$CI_COMMIT_SHA"
    git push origin "rosetta-release-$ROSETTA_RELEASE_VERSION"
rosetta-api-docker-image:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  stage: guest-os-build
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    when: manual
    allow_failure: true
  needs:
  - job: bazel-test-all
    artifacts: false
  script:
  - |
    set -exuo pipefail

    "${CI_PROJECT_DIR}"/gitlab-ci/src/artifacts/rclone_download.py --git-rev "$CI_COMMIT_SHA" \
      --remote-path=release --out="artifacts/release"

    gunzip artifacts/release/ic-rosetta-api.gz
    chmod +x artifacts/release/ic-rosetta-api

    pushd "$(mktemp -d)"
    cp \
      "$CI_PROJECT_DIR"/artifacts/release/ic-rosetta-api \
      "$CI_PROJECT_DIR"/rs/rosetta-api/log_config.yml \
      .
    docker build \
      --build-arg RELEASE="$CI_COMMIT_SHA" \
      -f "$CI_PROJECT_DIR"/rs/rosetta-api/Dockerfile \
      -t dfinity/rosetta-api:"$CI_COMMIT_SHA" \
      .
    popd

    docker run --rm dfinity/rosetta-api:"$CI_COMMIT_SHA" --help

    ROSETTA_API_DATE=$(date +"%Y%m%d")
    ROSETTA_API_VERSION=$(grep -e '^version' "$CI_PROJECT_DIR"/rs/rosetta-api/Cargo.toml | sed -e 's|^version[ ]*=[ ]*"\([^"]*\)"|\1|g')

    docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:"$ROSETTA_API_DATE"
    docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:v"$ROSETTA_API_VERSION"
    docker tag dfinity/rosetta-api:"$CI_COMMIT_SHA" dfinity/rosetta-api:latest

    docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"

    docker push dfinity/rosetta-api:"$CI_COMMIT_SHA"
    docker push dfinity/rosetta-api:"$ROSETTA_API_DATE"
    docker push dfinity/rosetta-api:v"$ROSETTA_API_VERSION"
    docker push dfinity/rosetta-api:latest
host-os-upgrade-test:
  interruptible: true
  artifacts:
    paths:
    - ic-os/hostos/test-out
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    HOST_OS_TEST_TIMEOUT: 2400
    E2E_TEST_TIMEOUT: 480
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".bazel-build-k8s"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - ic-os/**/*
    - toolchains/sysimage/**/*
    - testnet/**/*
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $SCHEDULE_NAME == "run-all-master"
  - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
  needs:
  - job: bazel-test-all
    artifacts: false
  stage: test
  script:
  - |
    VERSION=$(git rev-parse HEAD)
    export VERSION

    "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
        --git-rev="${VERSION}" --remote-path="host-os/disk-img" \
        --out="ic-os/hostos/build-out/disk-img"

    "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
        --git-rev="${VERSION}" --remote-path="host-os/update-img-dev" \
        --out="ic-os/hostos/build-out/update-img"

    # shellcheck disable=SC2154
    $SHELL_WRAPPER timeout -k 10 "${HOST_OS_TEST_TIMEOUT}" \
        "$CI_PROJECT_DIR"/ic-os/hostos/tests/hostos-upgrade.sh "$CI_PROJECT_DIR"
build-determinism-binaries:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PATH0: release
    PATH1: build-ic/release
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: build-determinism-test
  needs:
  - job: bazel-test-all
    artifacts: false
  - job: build-ic
    artifacts: false
  script:
  - |
    set -eExuo pipefail
    ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
build-determinism-canisters:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PATH0: canisters
    PATH1: build-ic/canisters
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: build-determinism-test
  needs:
  - job: bazel-test-all
    artifacts: false
  - job: build-ic
    artifacts: false
  script:
  - |
    set -eExuo pipefail
    ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
build-determinism-guest-update-img:
  interruptible: true
  artifacts:
    paths:
    - artifacts
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PATH0: guest-os/update-img
    PATH1: build-ic/guest-os
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: build-determinism-test
  needs:
  - job: bazel-test-all
    artifacts: false
  - job: build-ic
    artifacts: false
  script:
  - |
    set -eExuo pipefail
    ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
build-determinism-host-update-img:
  interruptible: true
  artifacts:
    paths:
    - artifacts
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PATH0: host-os/update-img
    PATH1: build-ic/host-os
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: build-determinism-test
  needs:
  - job: bazel-test-all
    artifacts: false
  - job: build-ic
    artifacts: false
  script:
  - |
    set -eExuo pipefail
    ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
build-determinism-setupos-img:
  interruptible: true
  artifacts:
    paths:
    - artifacts
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    BAZEL_STARTUP_ARGS: "--output_base=/var/tmp/bazel-output/"
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel"
    BAZEL_CI_CONFIG: "--config=ci"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    PATH0: setup-os/disk-img
    PATH1: build-ic/setup-os
    SETUPOS_FLAG: 'true'
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  - zh
  extends:
  - ".bazel-build-k8s"
  - ".bazel-rules-pipeline"
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE
      == "merge_train"
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\bhotfix\b/i
    variables:
      BAZEL_EXTRA_ARGS_RULES: "--test_timeout_filters=short,moderate"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
  stage: build-determinism-test
  needs:
  - job: bazel-test-all
    artifacts: false
  - job: build-ic
    artifacts: false
  script:
  - |
    set -eExuo pipefail
    ./gitlab-ci/tools/build-diff.sh "$PATH0" "$PATH1"
".build-determinism-release":
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PATH0: build-ic-release/release
    PATH1: release
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".ubuntu-k8s"
  - ".rules-scheduled-reproducibility"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  stage: build-determinism-test
  needs:
  - job: build-ic-release
  script:
  - |
    set -eExuo pipefail

    # TODO IDX-2757
    if [ "$CI_JOB_NAME" == "build-determinism-guest-update-img-release" ]; then
        OLD_PATH="$(git rev-parse HEAD)/build-ic-release/guest-os/update-img"
        if curl -sfSI --retry 2 "https://download.dfinity.systems/ic/$OLD_PATH/SHA256SUMS"; then
            PATH0="build-ic-release/guest-os/update-img"
        fi
    fi

    # what we've build in build-ic-release
    P0=$PATH0
    # what is live and available under $NNS_RELEASE_VERSION
    # NNS_RELEASE_VERSION is set in build-ic-release
    P1="/${NNS_RELEASE_VERSION}/${PATH1}"

    ./gitlab-ci/tools/build-diff.sh "$P0" "$P1"
build-determinism-binaries-release:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PATH0: build-ic-release/release
    PATH1: release
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-determinism-release"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  stage: build-determinism-test
  needs:
  - job: build-ic-release
  script:
  - |
    set -eExuo pipefail

    # TODO IDX-2757
    if [ "$CI_JOB_NAME" == "build-determinism-guest-update-img-release" ]; then
        OLD_PATH="$(git rev-parse HEAD)/build-ic-release/guest-os/update-img"
        if curl -sfSI --retry 2 "https://download.dfinity.systems/ic/$OLD_PATH/SHA256SUMS"; then
            PATH0="build-ic-release/guest-os/update-img"
        fi
    fi

    # what we've build in build-ic-release
    P0=$PATH0
    # what is live and available under $NNS_RELEASE_VERSION
    # NNS_RELEASE_VERSION is set in build-ic-release
    P1="/${NNS_RELEASE_VERSION}/${PATH1}"

    ./gitlab-ci/tools/build-diff.sh "$P0" "$P1"
build-determinism-canisters-release:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PATH0: build-ic-release/canisters
    PATH1: canisters
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-determinism-release"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  stage: build-determinism-test
  needs:
  - job: build-ic-release
  script:
  - |
    set -eExuo pipefail

    # TODO IDX-2757
    if [ "$CI_JOB_NAME" == "build-determinism-guest-update-img-release" ]; then
        OLD_PATH="$(git rev-parse HEAD)/build-ic-release/guest-os/update-img"
        if curl -sfSI --retry 2 "https://download.dfinity.systems/ic/$OLD_PATH/SHA256SUMS"; then
            PATH0="build-ic-release/guest-os/update-img"
        fi
    fi

    # what we've build in build-ic-release
    P0=$PATH0
    # what is live and available under $NNS_RELEASE_VERSION
    # NNS_RELEASE_VERSION is set in build-ic-release
    P1="/${NNS_RELEASE_VERSION}/${PATH1}"

    ./gitlab-ci/tools/build-diff.sh "$P0" "$P1"
build-determinism-guest-update-img-release:
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    PATH0: build-ic-release/guest-os
    PATH1: guest-os/update-img
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  extends:
  - ".build-determinism-release"
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "build-reproducibility"
  stage: build-determinism-test
  needs:
  - job: build-ic-release
  - job: build-determinism-binaries-release
    artifacts: false
  script:
  - |
    set -eExuo pipefail

    # TODO IDX-2757
    if [ "$CI_JOB_NAME" == "build-determinism-guest-update-img-release" ]; then
        OLD_PATH="$(git rev-parse HEAD)/build-ic-release/guest-os/update-img"
        if curl -sfSI --retry 2 "https://download.dfinity.systems/ic/$OLD_PATH/SHA256SUMS"; then
            PATH0="build-ic-release/guest-os/update-img"
        fi
    fi

    # what we've build in build-ic-release
    P0=$PATH0
    # what is live and available under $NNS_RELEASE_VERSION
    # NNS_RELEASE_VERSION is set in build-ic-release
    P1="/${NNS_RELEASE_VERSION}/${PATH1}"

    ./gitlab-ci/tools/build-diff.sh "$P0" "$P1"
prod-nightly-pipeline:
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE =~ /hotfix/i && $CI_PIPELINE_SOURCE
      != "trigger"
    when: manual
    allow_failure: true
  - if: $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_PIPELINE_SOURCE != "trigger"
    when: always
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  extends: ".rules-rollout-pipeline-auto"
  stage: prod-tests
  variables:
    CD_ENV: NIGHTLY
    TESTNET1: cdnightly
    TESTNET2: cdrc01
    TESTNET3: cdrc02
    TESTNET4: cdrc03
    TESTNET5: cdrc04
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  trigger:
    include:
    - local: gitlab-ci/config/00--prod-test-child-pipeline.yml
    strategy: depend
prod-hotfix-pipeline:
  rules:
  - if: "$CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  extends: ".rules-prod-hotfix-pipeline"
  stage: prod-tests
  variables:
    CD_ENV: HOTFIX
    TESTNET1: cdhotfix01
    TESTNET2: cdhotfix02
    TESTNET3: cdhotfix03
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  trigger:
    include:
    - local: gitlab-ci/config/00--prod-test-child-pipeline.yml
    strategy: depend
prod-hourly-triggered:
  rules:
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  extends: ".rules-rollout-pipeline-run-on-trigger"
  needs: []
  stage: prod-tests
  variables:
    CD_ENV: HOURLY
    TESTNET: cdrc03
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  trigger:
    include:
    - local: gitlab-ci/config/00--prod-test-child-pipeline.yml
    strategy: depend
prod-nightly-triggered:
  rules:
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  extends: ".rules-rollout-pipeline-run-on-trigger"
  needs: []
  stage: prod-tests
  variables:
    CD_ENV: NIGHTLY
    TESTNET1: cdnightly
    TESTNET2: cdrc01
    TESTNET3: cdrc02
    TESTNET4: cdrc03
    TESTNET5: cdrc04
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  trigger:
    include:
    - local: gitlab-ci/config/00--prod-test-child-pipeline.yml
    strategy: depend
prod-hotfix-triggered:
  rules:
  - if: $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  extends: ".rules-rollout-pipeline-run-on-trigger"
  needs: []
  stage: prod-tests
  variables:
    CD_ENV: HOTFIX
    TESTNET1: cdhotfix01
    TESTNET2: cdhotfix02
    TESTNET3: cdhotfix03
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  trigger:
    include:
    - local: gitlab-ci/config/00--prod-test-child-pipeline.yml
    strategy: depend
".benchmark-test":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-benchmark-tests"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-canister-http:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    echo '{"test_ledger_accounts":["b3gus-edhie-77egn-fejju-pt4xd-zz2pt-7v22l-rrts4-a3ebi-fcm4d-wae"]}' > test-accounts.json
    export TESTNET_LOG="testnet_deployment.log"
    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh "$TESTNET" --git-revision "$GIT_REVISION" --no-boundary-nodes  --ansible-args "-e @$PWD/test-accounts.json" &> $TESTNET_LOG

    # Obtains nns_node URL
    NNS_URL=$(grep "NNS_URL" "$TESTNET_LOG" | tail -1 | grep -o -P '(?<=http).*(?=8080)' | sed 's/$/8080/' | sed 's/^/http/')
    echo "$NNS_URL" > nns_url.log
    echo "Obtained NNS subnet URL: $NNS_URL"

    # Enables http_request feature on subnet
    "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
        --git-rev="$GIT_REVISION" --remote-path="release" \
        --out="artifacts/release"
    pigz -d "${CI_PROJECT_DIR}/artifacts/release/ic-admin.gz"
    chmod u+x "${CI_PROJECT_DIR}/artifacts/release/ic-admin"
    ln -sf "${CI_PROJECT_DIR}/artifacts/release/ic-admin" ic-admin
    "${CI_PROJECT_DIR}/artifacts/release/ic-admin" --nns-url="$NNS_URL" propose-to-update-subnet --features http_requests --subnet 1 --test-neuron-proposer --summary "Updating a subnet"

    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --initial_rps=50 --increment_rps=50 --target_rps=150 --max_rps=400 --workload workloads/canister-http-benchmark.toml

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-system-baseline-query:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    # First run, no caching
    # -------------------------------------------------

    $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --use_random_payload=True --num_canisters 2 --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --datapoints 100,3500,4500,5500,7500,12000,17200,40000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    # Allow the system some time to recover from previous benchmark
    sleep 60

    # Second run, with caching
    # -------------------------------------------------

    $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --num_canisters 2 --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --datapoints 100,3500,4500,5500,7500,12000,17200,40000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    # Upload results from both run (the entire folder of that GIT revision)
    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-system-baseline-update:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_system_baseline_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --initial_rps=100 --increment_rps=20 --target_rps=800 --max_rps=2000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-large-memory-query:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --initial_rps=20 --increment_rps=5 --target_rps=160 --max_rps=1000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-large-memory-update:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --datapoints=20,35,50,55,100,150

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-multiple-large-memory-update:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_large_memory_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --use_updates=True --initial_rps=20 --increment_rps=10 --target_rps=25 --max_rps=100 --num_canisters 15 --payload_size 5000000 --use_updates=True --iter_duration 900

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-mixed-workloads:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/mixed-query-update.toml --initial_rps=20 --increment_rps=5 --target_rps=160 --max_rps=1000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-mixed-counter-memory:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    # These are equivalent to maximum-capacity-large-memory-update.
    # We just run the counter canister alongside it.
    # Might mean that we don't need maximum-capacity-large-memory-update any longer.
    $SHELL_WRAPPER python3 experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/mixed-memory-counter.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=500

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-qr:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/qr.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=150

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-sha256:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER experiments/run_mixed_workload_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --workload workloads/sha256.toml --initial_rps=10 --increment_rps=5 --target_rps=25 --max_rps=150

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
benchmark-response-payload:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER timeout 90m python3 experiments/run_large_payload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
benchmark-xnet:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_xnet_experiment.py --testnet $TESTNET --hosts_ini_filename=hosts_single_node_subnets.ini

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 6 hours
statesync-experiment:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    # Note that this benchmark needs unassigned nodes
    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --dkg-interval-length 14 --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_statesync_experiment.py --testnet $TESTNET

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
".benchmark-spot-test":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-benchmark-spot-tests"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
system-baseline-query-performance-test-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-spot-test"
  script:
  - |
    set -eExou pipefail
    git fetch

    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    # Note that this benchmark needs unassigned nodes
    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

    # Run system baseline performance evaluation
    cd ./scalability

    $SHELL_WRAPPER timeout 1h python3 experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --target_rps=600  --use_updates=False

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=200
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
system-baseline-update-performance-test-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-spot-test"
  script:
  - |
    set -eExou pipefail
    git fetch

    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    # Note that this benchmark needs unassigned nodes
    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

    # Run system baseline performance evaluation
    cd ./scalability

    $SHELL_WRAPPER timeout 1h python3 experiments/run_system_baseline_experiment.py --testnet "$TESTNET" --wg_subnet 2 --wg_testnet $TESTNET --iter_duration 300 --target_rps=60 --use_updates=True

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=2300
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
heavy-memory-update-performance-test-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-spot-test"
  script:
  - |
    set -eExou pipefail
    git fetch

    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

    # Run heavy memory update performance evaluation
    cd ./scalability

    $SHELL_WRAPPER timeout 1h python3 experiments/run_large_memory_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --iter_duration 300 --target_rps=15 --use_updates=True

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=3300
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
large-response-downloading-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-spot-test"
  script:
  - |
    set -eExou pipefail
    git fetch

    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

    cd ./scalability

    $SHELL_WRAPPER timeout 1h python3 experiments/run_large_payload_experiment.py --testnet "$TESTNET" --wg_testnet "$TESTNET" --wg_subnet 2 --iter_duration 300 --datapoints 2048

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)

    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=3300

    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
xnet-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_NIGHTLY"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: BENCHMARK_NIGHTLY
    TESTNET: cdrc02
    WG_TESTNET: cdrc02
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-spot-test"
  script:
  - |
    set -eExou pipefail
    git fetch

    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes

    cd ./scalability

    $SHELL_WRAPPER timeout 1h python3 experiments/run_xnet_experiment.py --testnet "$TESTNET" --iter_duration 300 --datapoints=500

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)

    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    $SHELL_WRAPPER python3 common/verify_perf.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --median_latency_threshold=3300

    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --branch="$CURRENT_BRANCH" --is_max_capacity_run="False" --gitlab_job_id="$CI_JOB_ID"

    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-spot-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
".sns-tests":
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[sns\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "SNS_CD"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: SNS_CD
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-sns-tests"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: sns-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
sns-deployment-test-nightly:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[sns\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "SNS_CD"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    cd_target_env: BENCHMARK_NIGHTLY
    CD_ENV: SNS_CD
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".sns-tests"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    # For the SNS deployment, we need to make sure we boot the testnet with some test accounts
    echo '{"init_ledger_accounts":["5b315d2f6702cb3a27d826161797d7b2c2e131cd312aece51d4d5574d1247087"]}' > test-accounts.json
    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh medium09 --git-revision "$GIT_REVISION" --hosts-ini sns_hosts.ini --ansible-args "-e @$PWD/test-accounts.json"

    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_sns_experiment.py --testnet medium09 --interactive=False

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: sns-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 1 hour
tecdsa:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER experiments/run_tecdsa.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET

    # TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    # $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
delegated-identity-bench:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --no-boundary-nodes
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_delegation_experiment.py --testnet $TESTNET --num_procs 64 --iter_duration 30 --num_identities 200 --rps 30,100,200,500,1000

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
maximum-capacity-boundary-nodes-queries:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~
      /\[benchmark\]/
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - scalability/
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    DISKIMG_BRANCH: "${CI_COMMIT_SHA}"
    CURRENT_BRANCH: "$CI_COMMIT_REF_NAME"
    TESTNET: cdslo
    PARENT_PIPELINE_ID: "${CI_PIPELINE_ID}"
  extends: ".benchmark-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")

    $SHELL_WRAPPER timeout 1h ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION" --boundary-dev-image
    cd ./scalability

    $SHELL_WRAPPER python3 experiments/run_boundary_node_baseline_experiment.py --testnet $TESTNET --wg_subnet 2 --wg_testnet $TESTNET --targets https://"$TESTNET".testnet.dfinity.network --use_updates=False --no_instrument=True --datapoints=100~2000~5000

    TIMESTAMP=$(find results/"$GIT_REVISION" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sort -nr | head -1)
    $SHELL_WRAPPER python3 common/generate_report.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP"
    $SHELL_WRAPPER python3 common/notify_dashboard.py --base_dir="results/" --git_revision="$GIT_REVISION" --timestamp="$TIMESTAMP" --is_max_capacity_run="True" --branch="$CURRENT_BRANCH" --gitlab_job_id="$CI_JOB_ID"

    find . -name  'workload-generator*stderr.txt' -print0 | xargs -0 pigz
    cd -

    $SHELL_WRAPPER rclone --config="${CI_PROJECT_DIR}/.rclone.conf"  copyto "scalability/results/$GIT_REVISION" "performance-testing:performance-testing-results/$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: benchmark-tests
  resource_group: "$TESTNET"
  dependencies: []
  timeout: 3 hours
test-push-branch:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "run-all-master"
    when: on_success
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-master-schedule-push-branch"
  script:
  - |
    # The remote might already exist from a previous CI job run because GitLab re-uses the git repo.
    git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
    git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

    git config --global user.email "infra+gitlab-automation@dfinity.org"
    git config --global user.name "IDX GitLab Automation"

    git switch --force-create post-merge-tests-passed HEAD
    git push --force --set-upstream origin post-merge-tests-passed
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: push-branches
  dependencies: []
cut-release-candidate:
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_NAME == "release-candidate-cut"
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-rc-cut-schedule"
  script:
  - |
    # The remote might already exist from a previous CI job run because GitLab re-uses the git repo.
    git remote add origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true
    git remote set-url origin "https://gitlab-ci-token:${GITLAB_API_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git" || true

    git config --global user.email "infra+gitlab-automation@dfinity.org"
    git config --global user.name "IDX GitLab Automation"

    RC_BRANCH_NAME="rc--$(date '+%Y-%m-%d_%H-%M')"
    git switch --force-create "$RC_BRANCH_NAME" HEAD
    git push --force --set-upstream origin  "$RC_BRANCH_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: push-branches
  dependencies: []
release-boundary-node-service-worker:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^service-worker_v([0-9\.]+)$/
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-service-worker-release"
  script:
  - |
    set -eExuo pipefail
    # shellcheck disable=SC1090
    source "$NVM_DIR/nvm.sh"
    nvm use 18
    node --version
    npm --version

    # download previously built artifact (during merge commit pipeline)
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/find-build-id.sh)
    "$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/rclone_download.py \
      --git-rev="${GIT_REVISION}" --remote-path="service-worker" \
      --out="typescript/service-worker/artifacts"

    (
      cd typescript/service-worker
      if [[ $CI_COMMIT_TAG =~ ^service-worker_v([0-9\.]+)$ ]]; then
        TAG_VERSION="${BASH_REMATCH[1]}"
      else
        echo "could not parse version from commit tag $CI_COMMIT_TAG"
        echo "check CI configuration, this job should not be run for malformed tags!"
        exit 1
      fi

      # verify the source version matches the tag
      PACKAGE_JSON_VERSION=$(< package.json jq '.version' -r)
      if [  "$PACKAGE_JSON_VERSION" != "$TAG_VERSION" ]; then
        echo "package.json version $PACKAGE_JSON_VERSION does not match tag version $TAG_VERSION"
        exit 1
      fi

      # extracts to folder package
      tar -xf "artifacts/dfinity-service-worker-$TAG_VERSION.tgz"

      # verify the prebuilt package version matches the tag
      PREBUILT_VERSION=$(< package/package.json jq '.version' -r)
      if [  "$PREBUILT_VERSION" != "$TAG_VERSION" ]; then
        echo "version $PREBUILT_VERSION contained in the prebuilt artifact does not match tag version $TAG_VERSION!"
        exit 1
      fi

      printf '%s\n' "//registry.npmjs.org/:_authToken=\${SW_NODE_AUTH_TOKEN}" "registry=https://registry.npmjs.org/" "always-auth=true" >> .npmrc
      npm publish "file:artifacts/dfinity-service-worker-$PACKAGE_JSON_VERSION.tgz" --access public
    )
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: npm-release
  needs:
  - boundary-node-service-worker
notify-gitlab-success:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: on_success
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: on_success
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    when: on_success
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".on-success-rules"
  script:
  - "echo \"notify gitlab success\"\n\n# Send a slack notification on rc--* pipeline
    succees.\n# Limit to \"push\" pipeline source so that GitLab doesn't send spurious
    alerts for manual or\n# scheduled pipelines that developers may create off the
    rc branch.\nif [[ \"$CI_PIPELINE_SOURCE\" == \"push\" ]] && [[ \"$CI_COMMIT_REF_NAME\"
    =~ ^rc--.* ]]; then\n    if [[ \"${CI_COMMIT_MESSAGE,,}\" =~ hotfix ]]; then\n
    \       MESSAGE=\"✔ Hotfix pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> succeeded.
    \U0001FAD1\U0001FAD1\U0001FAD1\"\n    else\n        MESSAGE=\"✅ Release candidate
    pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> succeeded. \U0001F389\U0001F389\U0001F389\"\n
    \   fi\n    cd \"${CI_PROJECT_DIR}/gitlab-ci/src\" || true\n    buildevents cmd
    \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" notify-slack -- notify_slack/notify_slack.py
    \\\n        \"${MESSAGE}\" --channel \"release-management-alerts\"\nfi\n"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: finalize
  dependencies: []
notify-gitlab-failure:
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: on_failure
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: on_failure
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^rc--/
    when: on_failure
  interruptible: true
  artifacts:
    paths:
    - junit_data/*
    - coredumps/*.txt
    - coredumps/*.gz
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".on-failure-rules"
  script:
  - "echo \"notify gitlab failure\"\n\n# Send a slack alert on rc--* pipeline failures.\n#
    Limit to \"push\" pipeline source so that GitLab doesn't send spurious alerts
    for manual or\n# scheduled pipelines that developers may create off the rc branch.\nif
    [[ \"$CI_PIPELINE_SOURCE\" == \"push\" ]] && [[ \"$CI_COMMIT_REF_NAME\" =~ ^rc--.*
    ]]; then\n    if [[ \"${CI_COMMIT_MESSAGE,,}\" =~ hotfix ]]; then\n        MESSAGE=\"✘
    Hotfix pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME> failed. \U0001F336\U0001F336\U0001F336\"\n
    \   else\n        MESSAGE=\"❌ Release candidate pipeline <$CI_PIPELINE_URL|$CI_COMMIT_REF_NAME>
    failed. \U0001F62D\U0001F62D\U0001F62D\"\n    fi\n    cd \"${CI_PROJECT_DIR}/gitlab-ci/src\"
    || true\n    buildevents cmd \"$ROOT_PIPELINE_ID\" \"$CI_JOB_ID\" notify-slack
    -- notify_slack/notify_slack.py \\\n        \"${MESSAGE}\" --channel \"release-management-alerts\"\nfi\n"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: finalize
  dependencies: []
".prod-test":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
  extends:
  - ".ubuntu-cargo-k8s"
  - ".rules-prod-tests"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
".prod-stress-test":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: STRESS
  extends: ".prod-test"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  resource_group: "$TESTNET"
".prod-hourly-test":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: HOURLY
  extends: ".prod-test"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  resource_group: "$TESTNET"
".prod-nightly-test":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: NIGHTLY
  extends: ".prod-test"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  needs: []
  timeout: 3 hours
".prod-nightly-test-group-2":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: NIGHTLY
    TESTNET: "$TESTNET2"
    cd_debug_target: 'true'
  extends: ".prod-nightly-test"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests-02
  dependencies: []
  needs: []
  timeout: 3 hours
  resource_group: "$TESTNET2"
".prod-slo-test":
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: SLO
  extends: ".prod-test"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  resource_group: "$TESTNET"
  timeout: 3 hours
rejoin-nightly:
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: NIGHTLY
    TESTNET: "$TESTNET2"
    cd_debug_target: 'true'
  extends: ".prod-nightly-test-group-2"
  script:
  - |
    set -eExou pipefail
    if [[ -z "$TESTNET2" ]]; then echo "Please set the TESTNET2 environment variable for proper resource_group locking"; exit 1; fi
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
    export GIT_REVISION

    $SHELL_WRAPPER timeout 46m ./testnet/tests/scripts/rejoin_test.sh "$TESTNET" 900 8 8 normal "$CI_JOB_STAGE/$CI_JOB_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests-02
  dependencies: []
  needs: []
  timeout: 3 hours
  resource_group: "$TESTNET2"
nns-state-deployment-test-nightly:
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: NIGHTLY
    TESTNET: "$TESTNET2"
    cd_debug_target: 'true'
  extends: ".prod-nightly-test-group-2"
  script:
  - |
    set -eExou pipefail
    if [[ -z "$TESTNET2" ]]; then echo "Please set the TESTNET2 environment variable for proper resource_group locking"; exit 1; fi
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
    export GIT_REVISION
    $SHELL_WRAPPER timeout 1h ./testnet/tests/scripts/nns_state_deployment_test.sh "$TESTNET" "$CI_JOB_STAGE/$CI_JOB_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests-02
  dependencies: []
  needs: []
  timeout: 3 hours
  resource_group: "$TESTNET2"
  allow_failure: true
rejoin-test-slo:
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: SLO
  extends: ".prod-slo-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
    export GIT_REVISION

    $SHELL_WRAPPER ./testnet/tests/scripts/rejoin_test.sh "$TESTNET" 900 8 8 large "$CI_JOB_STAGE/$CI_JOB_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  resource_group: "$TESTNET"
  timeout: 3 hours
".with-monitoring":
  variables:
    REPLICA_LOG_DEBUG_OVERRIDES: ic_consensus::consensus::batch_delivery,ic_artifact_manager::processors,ic_consensus::consensus,ic_transport::control_plane
icos-deploy-stress:
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: STRESS
  extends: ".prod-stress-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
    export GIT_REVISION

    $SHELL_WRAPPER timeout 10m ./testnet/tools/icos_deploy.sh $TESTNET --git-revision "$GIT_REVISION"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  resource_group: "$TESTNET"
  parallel:
    matrix:
    - DEPLOY_FLAVOR: single-dc
      TESTNET:
      - cdhourlydebug01
      - cdhourlydebug02
    - DEPLOY_FLAVOR: multi-dc
      TESTNET:
      - cdhourlydebug03
      - cdhourlydebug04
".prod-hotfix-test":
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: "$CD_ENV == $cd_target_env && ( $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/ || $CI_MERGE_REQUEST_TITLE
      =~ /hotfix/i )"
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: HOTFIX
  extends:
  - ".prod-test"
  - ".rules-prod-hotfix-tests"
  script:
  - |
    set -eExuo pipefail
    cd "${CI_PROJECT_DIR}/rs"

    if [[ -n "${BUILD_COMMAND_PRE:-}" ]]; then
        $BUILD_COMMAND_PRE
    fi

    buildevents cmd "$ROOT_PIPELINE_ID" "$CI_JOB_ID" build-command -- "$BUILD_COMMAND"

    if [[ -n "${BUILD_COMMAND_POST:-}" ]]; then
        $BUILD_COMMAND_POST
    fi

    set +x
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  timeout: 55 minutes
rejoin-hotfix:
  rules:
  - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/"
    when: always
  - if: "$CD_ENV == $cd_target_env && ( $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/ || $CI_MERGE_REQUEST_TITLE
      =~ /hotfix/i )"
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /(\\[rc\\]|hotfix)/i"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: HOTFIX
    TESTNET: "$TESTNET2"
  extends: ".prod-hotfix-test"
  script:
  - |
    set -eExou pipefail
    git fetch
    GIT_REVISION=$("$CI_PROJECT_DIR"/gitlab-ci/src/artifacts/newest_sha_with_disk_image.sh "$DISKIMG_BRANCH")
    export GIT_REVISION

    $SHELL_WRAPPER ./testnet/tests/scripts/rejoin_test.sh "$TESTNET" 900 8 8 normal "$CI_JOB_STAGE/$CI_JOB_NAME"
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  timeout: 55 minutes
  resource_group: "$TESTNET2"
ingress-manager-proptests-nightly:
  rules:
  - if: "$CD_ENV == $cd_target_env && $CI_COMMIT_BRANCH =~ /^rc--/ && $CI_COMMIT_MESSAGE
      =~ /hotfix/i"
    when: manual
    allow_failure: true
  - if: "$CD_ENV == $cd_target_env && $CI_MERGE_REQUEST_TITLE =~ /\\[rc\\]/"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "web" && $CD_ENV != "BENCHMARK_SUITE"
    when: manual
    allow_failure: true
  - if: $CD_ENV == $cd_target_env && ($DEBUG_PIPELINE != "true" || $cd_debug_target
      == "true") && $CD_ENV != "BENCHMARK_SUITE"
    when: always
  interruptible: true
  artifacts:
    paths:
    - "$CI_JOB_STAGE/$CI_JOB_NAME"
    when: always
    expire_in: 3 days
  variables:
    GET_SOURCES_ATTEMPTS: 5
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    SHELL_WRAPPER: "/usr/bin/time"
    BUILD_COMMAND_PRE: ''
    BUILD_COMMAND: echo Replace this with a build command
    BUILD_COMMAND_POST: ''
    GIT_CLONE_PATH: "$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME"
    RUSTFLAGS: "--remap-path-prefix=${CI_PROJECT_DIR}=/ic"
    cd_target_env: NIGHTLY
  extends:
  - ".prod-test"
  script:
  - |
    cd "${CI_PROJECT_DIR}/rs"
    $SHELL_WRAPPER cargo test --release -p ic-ingress-manager proptest
  image:
    name: registry.gitlab.com/dfinity-lab/core/docker/ic-build-legacy:87db40a372221bb8eddffc354d833c68f0e7f5664f7d90a28a71cf36c7aa19ae
  tags:
  - dfinity-ic
  stage: prod-tests
  dependencies: []
  timeout: 70 minutes

